@use '../node_modules/sass-true' as *;
@import './tailwindv3.4.1.scss';

// api usage: https://www.oddbird.net/true/docs/
@include describe('Setting') {
  @include describe('Structure') {
    @include describe('Layout') {
      @include it('Layout') {
        @include is-equal($__Layout, true)
      }

      @include it('AspectRatio') {
        @include is-equal($___AspectRatio, true)
      }

      @include it('Container') {
        @include is-equal($___Container, true)
      }

      @include it('Columns') {
        @include is-equal($___Columns, true)
      }

      @include it('BreakAfter') {
        @include is-equal($___BreakAfter, true)
      }

      @include it('BreakBefore') {
        @include is-equal($___BreakBefore, true)
      }

      @include it('BreakInside') {
        @include is-equal($___BreakInside, true)
      }

      @include it('BoxDecorationBreak') {
        @include is-equal($___BoxDecorationBreak, true)
      }

      @include it('BoxSizing') {
        @include is-equal($___BoxSizing, true)
      }

      @include it('Display') {
        @include is-equal($___Display, true)
      }

      @include it('Floats') {
        @include is-equal($___Floats, true)
      }

      @include it('Clear') {
        @include is-equal($___Clear, true)
      }

      @include it('Isolation') {
        @include is-equal($___Isolation, true)
      }

      @include it('ObjectFit') {
        @include is-equal($___ObjectFit, true)
      }

      @include it('ObjectPosition') {
        @include is-equal($___ObjectPosition, true)
      }

      @include it('Overflow') {
        @include is-equal($___Overflow, true)
      }

      @include it('OverscrollBehavior') {
        @include is-equal($___OverscrollBehavior, true)
      }

      @include it('Position') {
        @include is-equal($___Position, true)
      }

      @include it('TopRightBottomLeft') {
        @include is-equal($___TopRightBottomLeft, true)
      }

      @include it('Visibility') {
        @include is-equal($___Visibility, true)
      }

      @include it('Z-Index') {
        @include is-equal($___Z-Index, true)
      }
    }
  }

  @include describe('Media') {
    @include it('SM') {
      @include is-equal($__MEDIA-SM, 640px)
    }

    @include it('MD') {
      @include is-equal($__MEDIA-MD, 768px)
    }

    @include it('LG') {
      @include is-equal($__MEDIA-LG, 1024px)
    }

    @include it('XL') {
      @include is-equal($__MEDIA-XL, 1280px)
    }

    @include it('2XL') {
      @include is-equal($__MEDIA-2XL, 1536px)
    }
  }

  @include describe('Color') {
    @include describe('BLACK') {
      @include it('BLACK') {
        @include is-equal($__BLACK, 0 0 0);
      }
    }

    @include describe('WHITE') {
      @include it('WHITE') {
        @include is-equal($__WHITE, 255 255 255);
      }
    }

    @include describe('SLATE') {
      @include it('50') {
        @include is-equal($__SLATE-50, 248 250 252);
      }

      @include it('100') {
        @include is-equal($__SLATE-100, 241 245 249);
      }

      @include it('200') {
        @include is-equal($__SLATE-200, 226 232 240);
      }

      @include it('300') {
        @include is-equal($__SLATE-300, 203 213 225);
      }

      @include it('400') {
        @include is-equal($__SLATE-400, 148 163 184);
      }

      @include it('500') {
        @include is-equal($__SLATE-500, 100 116 139);
      }

      @include it('600') {
        @include is-equal($__SLATE-600, 71 85 105);
      }

      @include it('700') {
        @include is-equal($__SLATE-700, 51 65 85);
      }

      @include it('800') {
        @include is-equal($__SLATE-800, 30 41 59);
      }

      @include it('900') {
        @include is-equal($__SLATE-900, 15 23 42);
      }

      @include it('950') {
        @include is-equal($__SLATE-950, 2 6 23);
      }
    }

    @include describe('GRAY') {
      @include it('50') {
        @include is-equal($__GRAY-50, 249 250 251);
      }

      @include it('100') {
        @include is-equal($__GRAY-100, 243 244 246);
      }

      @include it('200') {
        @include is-equal($__GRAY-200, 229 231 235);
      }

      @include it('300') {
        @include is-equal($__GRAY-300, 209 213 219);
      }

      @include it('400') {
        @include is-equal($__GRAY-400, 156 163 175);
      }

      @include it('500') {
        @include is-equal($__GRAY-500, 107 114 128);
      }

      @include it('600') {
        @include is-equal($__GRAY-600, 75 85 99);
      }

      @include it('700') {
        @include is-equal($__GRAY-700, 55 65 81);
      }

      @include it('800') {
        @include is-equal($__GRAY-800, 31 41 55);
      }

      @include it('900') {
        @include is-equal($__GRAY-900, 17 24 39);
      }

      @include it('950') {
        @include is-equal($__GRAY-950, 3 7 18);
      }
    }

    @include describe('ZINC') {
      @include it('50') {
        @include is-equal($__ZINC-50, 250 250 250);
      }

      @include it('100') {
        @include is-equal($__ZINC-100, 244 244 245);
      }

      @include it('200') {
        @include is-equal($__ZINC-200, 228 228 231);
      }

      @include it('300') {
        @include is-equal($__ZINC-300, 212 212 216);
      }

      @include it('400') {
        @include is-equal($__ZINC-400, 161 161 170);
      }

      @include it('500') {
        @include is-equal($__ZINC-500, 113 113 122);
      }

      @include it('600') {
        @include is-equal($__ZINC-600, 82 82 91);
      }

      @include it('700') {
        @include is-equal($__ZINC-700, 63 63 70);
      }

      @include it('800') {
        @include is-equal($__ZINC-800, 39 39 42);
      }

      @include it('900') {
        @include is-equal($__ZINC-900, 24 24 27);
      }

      @include it('950') {
        @include is-equal($__ZINC-950, 9 9 11);
      }
    }

    @include describe('NEUTRAL') {
      @include it('50') {
        @include is-equal($__NEUTRAL-50, 250 250 250);
      }

      @include it('100') {
        @include is-equal($__NEUTRAL-100, 245 245 245);
      }

      @include it('200') {
        @include is-equal($__NEUTRAL-200, 229 229 229);
      }

      @include it('300') {
        @include is-equal($__NEUTRAL-300, 212 212 212);
      }

      @include it('400') {
        @include is-equal($__NEUTRAL-400, 163 163 163);
      }

      @include it('500') {
        @include is-equal($__NEUTRAL-500, 115 115 115);
      }

      @include it('600') {
        @include is-equal($__NEUTRAL-600, 82 82 82);
      }

      @include it('700') {
        @include is-equal($__NEUTRAL-700, 64 64 64);
      }

      @include it('800') {
        @include is-equal($__NEUTRAL-800, 38 38 38);
      }

      @include it('900') {
        @include is-equal($__NEUTRAL-900, 23 23 23);
      }

      @include it('950') {
        @include is-equal($__NEUTRAL-950, 10 10 10);
      }
    }

    @include describe('STONE') {
      @include it('50') {
        @include is-equal($__STONE-50, 250 250 249);
      }

      @include it('100') {
        @include is-equal($__STONE-100, 245 245 244);
      }

      @include it('200') {
        @include is-equal($__STONE-200, 231 229 228);
      }

      @include it('300') {
        @include is-equal($__STONE-300, 214 211 209);
      }

      @include it('400') {
        @include is-equal($__STONE-400, 168 162 158);
      }

      @include it('500') {
        @include is-equal($__STONE-500, 120 113 108);
      }

      @include it('600') {
        @include is-equal($__STONE-600, 87 83 78);
      }

      @include it('700') {
        @include is-equal($__STONE-700, 68 64 60);
      }

      @include it('800') {
        @include is-equal($__STONE-800, 41 37 36);
      }

      @include it('900') {
        @include is-equal($__STONE-900, 28 25 23);
      }

      @include it('950') {
        @include is-equal($__STONE-950, 12 10 9);
      }
    }

    @include describe('RED') {
      @include it('50') {
        @include is-equal($__RED-50, 254 242 242);
      }

      @include it('100') {
        @include is-equal($__RED-100, 254 226 226);
      }

      @include it('200') {
        @include is-equal($__RED-200, 254 202 202);
      }

      @include it('300') {
        @include is-equal($__RED-300, 252 165 165);
      }

      @include it('400') {
        @include is-equal($__RED-400, 248 113 113);
      }

      @include it('500') {
        @include is-equal($__RED-500, 239 68 68);
      }

      @include it('600') {
        @include is-equal($__RED-600, 220 38 38);
      }

      @include it('700') {
        @include is-equal($__RED-700, 185 28 28);
      }

      @include it('800') {
        @include is-equal($__RED-800, 153 27 27);
      }

      @include it('900') {
        @include is-equal($__RED-900, 127 29 29);
      }

      @include it('950') {
        @include is-equal($__RED-950, 69 10 10);
      }
    }

    @include describe('ORANGE') {
      @include it('50') {
        @include is-equal($__ORANGE-50, 255 247 237);
      }

      @include it('100') {
        @include is-equal($__ORANGE-100, 255 237 213);
      }

      @include it('200') {
        @include is-equal($__ORANGE-200, 254 215 170);
      }

      @include it('300') {
        @include is-equal($__ORANGE-300, 252 186 116);
      }

      @include it('400') {
        @include is-equal($__ORANGE-400, 251 146 60);
      }

      @include it('500') {
        @include is-equal($__ORANGE-500, 249 115 22);
      }

      @include it('600') {
        @include is-equal($__ORANGE-600, 234 88 12);
      }

      @include it('700') {
        @include is-equal($__ORANGE-700, 194 65 12);
      }

      @include it('800') {
        @include is-equal($__ORANGE-800, 154 52 18);
      }

      @include it('900') {
        @include is-equal($__ORANGE-900, 124 45 18);
      }

      @include it('950') {
        @include is-equal($__ORANGE-950, 67 20 7);
      }
    }

    @include describe('AMBER') {
      @include it('50') {
        @include is-equal($__AMBER-50, 255 251 235);
      }

      @include it('100') {
        @include is-equal($__AMBER-100, 254 243 199);
      }

      @include it('200') {
        @include is-equal($__AMBER-200, 253 214 138);
      }

      @include it('300') {
        @include is-equal($__AMBER-300, 252 211 77);
      }

      @include it('400') {
        @include is-equal($__AMBER-400, 251 191 36);
      }

      @include it('500') {
        @include is-equal($__AMBER-500, 245 158 11);
      }

      @include it('600') {
        @include is-equal($__AMBER-600, 217 119 6);
      }

      @include it('700') {
        @include is-equal($__AMBER-700, 180 83 9);
      }

      @include it('800') {
        @include is-equal($__AMBER-800, 146 64 14);
      }

      @include it('900') {
        @include is-equal($__AMBER-900, 120 53 15);
      }

      @include it('950') {
        @include is-equal($__AMBER-950, 69 26 3);
      }
    }

    @include describe('YELLOW') {
      @include it('50') {
        @include is-equal($__YELLOW-50, 254 252 232);
      }

      @include it('100') {
        @include is-equal($__YELLOW-100, 254 249 195);
      }

      @include it('200') {
        @include is-equal($__YELLOW-200, 254 240 138);
      }

      @include it('300') {
        @include is-equal($__YELLOW-300, 253 224 71);
      }

      @include it('400') {
        @include is-equal($__YELLOW-400, 250 204 21);
      }

      @include it('500') {
        @include is-equal($__YELLOW-500, 234 179 8);
      }

      @include it('600') {
        @include is-equal($__YELLOW-600, 202 138 4);
      }

      @include it('700') {
        @include is-equal($__YELLOW-700, 161 98 7);
      }

      @include it('800') {
        @include is-equal($__YELLOW-800, 133 77 14);
      }

      @include it('900') {
        @include is-equal($__YELLOW-900, 113 63 18);
      }

      @include it('950') {
        @include is-equal($__YELLOW-950, 66 32 6);
      }
    }

    @include describe('LIME') {
      @include it('50') {
        @include is-equal($__LIME-50, 247 254 231);
      }

      @include it('100') {
        @include is-equal($__LIME-100, 236 252 203);
      }

      @include it('200') {
        @include is-equal($__LIME-200, 217 249 157);
      }

      @include it('300') {
        @include is-equal($__LIME-300, 190 242 100);
      }

      @include it('400') {
        @include is-equal($__LIME-400, 163 230 53);
      }

      @include it('500') {
        @include is-equal($__LIME-500, 132 204 22);
      }

      @include it('600') {
        @include is-equal($__LIME-600, 101 163 13);
      }

      @include it('700') {
        @include is-equal($__LIME-700, 77 124 15);
      }

      @include it('800') {
        @include is-equal($__LIME-800, 63 98 18);
      }

      @include it('900') {
        @include is-equal($__LIME-900, 54 83 20);
      }

      @include it('950') {
        @include is-equal($__LIME-950, 26 46 5);
      }
    }

    @include describe('GREEN') {
      @include it('50') {
        @include is-equal($__GREEN-50, 240 253 244);
      }

      @include it('100') {
        @include is-equal($__GREEN-100, 220 252 231);
      }

      @include it('200') {
        @include is-equal($__GREEN-200, 187 247 208);
      }

      @include it('300') {
        @include is-equal($__GREEN-300, 134 239 172);
      }

      @include it('400') {
        @include is-equal($__GREEN-400, 74 222 128);
      }

      @include it('500') {
        @include is-equal($__GREEN-500, 34 197 94);
      }

      @include it('600') {
        @include is-equal($__GREEN-600, 22 163 74);
      }

      @include it('700') {
        @include is-equal($__GREEN-700, 21 128 61);
      }

      @include it('800') {
        @include is-equal($__GREEN-800, 22 101 52);
      }

      @include it('900') {
        @include is-equal($__GREEN-900, 20 83 45);
      }

      @include it('950') {
        @include is-equal($__GREEN-950, 5 46 22);
      }
    }

    @include describe('EMERALD') {
      @include it('50') {
        @include is-equal($__EMERALD-50, 236 253 245);
      }

      @include it('100') {
        @include is-equal($__EMERALD-100, 209 250 229);
      }

      @include it('200') {
        @include is-equal($__EMERALD-200, 167 243 208);
      }

      @include it('300') {
        @include is-equal($__EMERALD-300, 110 231 183);
      }

      @include it('400') {
        @include is-equal($__EMERALD-400, 52 211 153);
      }

      @include it('500') {
        @include is-equal($__EMERALD-500, 16 185 129);
      }

      @include it('600') {
        @include is-equal($__EMERALD-600, 5 150 105);
      }

      @include it('700') {
        @include is-equal($__EMERALD-700, 4 120 87);
      }

      @include it('800') {
        @include is-equal($__EMERALD-800, 6 95 70);
      }

      @include it('900') {
        @include is-equal($__EMERALD-900, 6 78 59);
      }

      @include it('950') {
        @include is-equal($__EMERALD-950, 2 44 34);
      }
    }

    @include describe('TEAL') {
      @include it('50') {
        @include is-equal($__TEAL-50, 240 253 250);
      }

      @include it('100') {
        @include is-equal($__TEAL-100, 204 251 241);
      }

      @include it('200') {
        @include is-equal($__TEAL-200, 153 246 228);
      }

      @include it('300') {
        @include is-equal($__TEAL-300, 94 234 212);
      }

      @include it('400') {
        @include is-equal($__TEAL-400, 45 212 191);
      }

      @include it('500') {
        @include is-equal($__TEAL-500, 20 184 166);
      }

      @include it('600') {
        @include is-equal($__TEAL-600, 13 148 136);
      }

      @include it('700') {
        @include is-equal($__TEAL-700, 15 118 110);
      }

      @include it('800') {
        @include is-equal($__TEAL-800, 17 94 89);
      }

      @include it('900') {
        @include is-equal($__TEAL-900, 19 78 74);
      }

      @include it('950') {
        @include is-equal($__TEAL-950, 4 47 46);
      }
    }

    @include describe('CYAN') {
      @include it('50') {
        @include is-equal($__CYAN-50, 236 254 255);
      }

      @include it('100') {
        @include is-equal($__CYAN-100, 207 250 254);
      }

      @include it('200') {
        @include is-equal($__CYAN-200, 165 243 252);
      }

      @include it('300') {
        @include is-equal($__CYAN-300, 103 232 249);
      }

      @include it('400') {
        @include is-equal($__CYAN-400, 34 211 238);
      }

      @include it('500') {
        @include is-equal($__CYAN-500, 6 182 212);
      }

      @include it('600') {
        @include is-equal($__CYAN-600, 8 145 178);
      }

      @include it('700') {
        @include is-equal($__CYAN-700, 14 116 144);
      }

      @include it('800') {
        @include is-equal($__CYAN-800, 21 94 117);
      }

      @include it('900') {
        @include is-equal($__CYAN-900, 22 78 99);
      }

      @include it('950') {
        @include is-equal($__CYAN-950, 8 51 68);
      }
    }

    @include describe('SKY') {
      @include it('50') {
        @include is-equal($__SKY-50, 240 249 255);
      }

      @include it('100') {
        @include is-equal($__SKY-100, 224 242 254);
      }

      @include it('200') {
        @include is-equal($__SKY-200, 186 230 253);
      }

      @include it('300') {
        @include is-equal($__SKY-300, 125 211 252);
      }

      @include it('400') {
        @include is-equal($__SKY-400, 56 189 248);
      }

      @include it('500') {
        @include is-equal($__SKY-500, 14 165 233);
      }

      @include it('600') {
        @include is-equal($__SKY-600, 2 132 199);
      }

      @include it('700') {
        @include is-equal($__SKY-700, 3 105 161);
      }

      @include it('800') {
        @include is-equal($__SKY-800, 7 89 133);
      }

      @include it('900') {
        @include is-equal($__SKY-900, 12 74 110);
      }

      @include it('950') {
        @include is-equal($__SKY-950, 8 47 73);
      }
    }

    @include describe('BLUE') {
      @include it('50') {
        @include is-equal($__BLUE-50, 239 246 255);
      }

      @include it('100') {
        @include is-equal($__BLUE-100, 219 234 254);
      }

      @include it('200') {
        @include is-equal($__BLUE-200, 191 219 254);
      }

      @include it('300') {
        @include is-equal($__BLUE-300, 147 197 253);
      }

      @include it('400') {
        @include is-equal($__BLUE-400, 96 165 250);
      }

      @include it('500') {
        @include is-equal($__BLUE-500, 59 130 246);
      }

      @include it('600') {
        @include is-equal($__BLUE-600, 37 99 235);
      }

      @include it('700') {
        @include is-equal($__BLUE-700, 29 78 216);
      }

      @include it('800') {
        @include is-equal($__BLUE-800, 30 64 175);
      }

      @include it('900') {
        @include is-equal($__BLUE-900, 30 58 138);
      }

      @include it('950') {
        @include is-equal($__BLUE-950, 23 37 84);
      }
    }

    @include describe('INDIGO') {
      @include it('50') {
        @include is-equal($__INDIGO-50, 238 242 255);
      }

      @include it('100') {
        @include is-equal($__INDIGO-100, 224 231 255);
      }

      @include it('200') {
        @include is-equal($__INDIGO-200, 199 210 254);
      }

      @include it('300') {
        @include is-equal($__INDIGO-300, 165 180 252);
      }

      @include it('400') {
        @include is-equal($__INDIGO-400, 129 140 248);
      }

      @include it('500') {
        @include is-equal($__INDIGO-500, 99 102 241);
      }

      @include it('600') {
        @include is-equal($__INDIGO-600, 79 70 229);
      }

      @include it('700') {
        @include is-equal($__INDIGO-700, 67 56 202);
      }

      @include it('800') {
        @include is-equal($__INDIGO-800, 55 48 163);
      }

      @include it('900') {
        @include is-equal($__INDIGO-900, 49 46 129);
      }

      @include it('950') {
        @include is-equal($__INDIGO-950, 30 27 75);
      }
    }

    @include describe('VIOLET') {
      @include it('50') {
        @include is-equal($__VIOLET-50, 245 243 255);
      }

      @include it('100') {
        @include is-equal($__VIOLET-100, 237 233 254);
      }

      @include it('200') {
        @include is-equal($__VIOLET-200, 221 214 254);
      }

      @include it('300') {
        @include is-equal($__VIOLET-300, 196 181 253);
      }

      @include it('400') {
        @include is-equal($__VIOLET-400, 167 139 250);
      }

      @include it('500') {
        @include is-equal($__VIOLET-500, 139 92 246);
      }

      @include it('600') {
        @include is-equal($__VIOLET-600, 124 58 237);
      }

      @include it('700') {
        @include is-equal($__VIOLET-700, 109 40 217);
      }

      @include it('800') {
        @include is-equal($__VIOLET-800, 91 33 182);
      }

      @include it('900') {
        @include is-equal($__VIOLET-900, 76 29 149);
      }

      @include it('950') {
        @include is-equal($__VIOLET-950, 46 16 101);
      }
    }

    @include describe('PURPLE') {
      @include it('50') {
        @include is-equal($__PURPLE-50, 250 245 255);
      }

      @include it('100') {
        @include is-equal($__PURPLE-100, 243 232 255);
      }

      @include it('200') {
        @include is-equal($__PURPLE-200, 233 213 255);
      }

      @include it('300') {
        @include is-equal($__PURPLE-300, 216 180 254);
      }

      @include it('400') {
        @include is-equal($__PURPLE-400, 192 132 252);
      }

      @include it('500') {
        @include is-equal($__PURPLE-500, 168 85 247);
      }

      @include it('600') {
        @include is-equal($__PURPLE-600, 147 51 234);
      }

      @include it('700') {
        @include is-equal($__PURPLE-700, 126 34 206);
      }

      @include it('800') {
        @include is-equal($__PURPLE-800, 107 33 168);
      }

      @include it('900') {
        @include is-equal($__PURPLE-900, 88 28 135);
      }

      @include it('950') {
        @include is-equal($__PURPLE-950, 59 7 100);
      }
    }

    @include describe('FUCHSIA') {
      @include it('50') {
        @include is-equal($__FUCHSIA-50, 253 244 255);
      }

      @include it('100') {
        @include is-equal($__FUCHSIA-100, 250 232 255);
      }

      @include it('200') {
        @include is-equal($__FUCHSIA-200, 245 208 254);
      }

      @include it('300') {
        @include is-equal($__FUCHSIA-300, 240 171 252);
      }

      @include it('400') {
        @include is-equal($__FUCHSIA-400, 232 121 249);
      }

      @include it('500') {
        @include is-equal($__FUCHSIA-500, 217 70 239);
      }

      @include it('600') {
        @include is-equal($__FUCHSIA-600, 192 38 211);
      }

      @include it('700') {
        @include is-equal($__FUCHSIA-700, 162 28 175);
      }

      @include it('800') {
        @include is-equal($__FUCHSIA-800, 134 25 143);
      }

      @include it('900') {
        @include is-equal($__FUCHSIA-900, 112 26 117);
      }

      @include it('950') {
        @include is-equal($__FUCHSIA-950, 74 4 78);
      }
    }

    @include describe('PINK') {
      @include it('50') {
        @include is-equal($__PINK-50, 253 242 248);
      }

      @include it('100') {
        @include is-equal($__PINK-100, 252 231 243);
      }

      @include it('200') {
        @include is-equal($__PINK-200, 251 207 232);
      }

      @include it('300') {
        @include is-equal($__PINK-300, 249 168 212);
      }

      @include it('400') {
        @include is-equal($__PINK-400, 244 114 182);
      }

      @include it('500') {
        @include is-equal($__PINK-500, 236 72 153);
      }

      @include it('600') {
        @include is-equal($__PINK-600, 219 39 119);
      }

      @include it('700') {
        @include is-equal($__PINK-700, 190 24 93);
      }

      @include it('800') {
        @include is-equal($__PINK-800, 157 23 77);
      }

      @include it('900') {
        @include is-equal($__PINK-900, 131 24 67);
      }

      @include it('950') {
        @include is-equal($__PINK-950, 80 7 36);
      }
    }

    @include describe('ROSE') {
      @include it('50') {
        @include is-equal($__ROSE-50, 255 241 242);
      }

      @include it('100') {
        @include is-equal($__ROSE-100, 255 228 230);
      }

      @include it('200') {
        @include is-equal($__ROSE-200, 254 205 211);
      }

      @include it('300') {
        @include is-equal($__ROSE-300, 253 164 175);
      }

      @include it('400') {
        @include is-equal($__ROSE-400, 251 113 133);
      }

      @include it('500') {
        @include is-equal($__ROSE-500, 244 63 94);
      }

      @include it('600') {
        @include is-equal($__ROSE-600, 225 29 72);
      }

      @include it('700') {
        @include is-equal($__ROSE-700, 190 18 60);
      }

      @include it('800') {
        @include is-equal($__ROSE-800, 159 18 57);
      }

      @include it('900') {
        @include is-equal($__ROSE-900, 136 19 55);
      }

      @include it('950') {
        @include is-equal($__ROSE-950, 76 5 25);
      }
    }
  }
}

@include describe('Layout') {
  @include describe('AspectRatio') {
    @include describe('Basic') {
      @include it('aspect-auto') {
        @include assert {
          @include output {
            @include aspect-auto
          }

          @include expect {
            aspect-ratio: auto;
          }
        }
      }

      @include it('aspect-square') {
        @include assert {
          @include output {
            @include aspect-square
          }

          @include expect {
            aspect-ratio: 1 / 1;
          }
        }
      }

      @include it('aspect-video') {
        @include assert {
          @include output {
            @include aspect-video
          }

          @include expect {
            aspect-ratio: 16 / 9;
          }
        }
      }
    }

    @include describe('RWD') {
      @include describe('SM') {
        @include it('aspect-(4/3)') {
          @include assert {
            @include output {
              @include sm\:aspect-(4/3)
            }

            @include expect {
              @media (min-width: $__MEDIA-SM) {
                aspect-ratio: 1.3333333333
              }
            }
          }
        }
      }

      @include describe('MD') {
        @include it('aspect-(4/3)') {
          @include assert {
            @include output {
              @include md\:aspect-(4/3)
            }

            @include expect {
              @media (min-width: $__MEDIA-MD) {
                aspect-ratio: 1.3333333333
              }
            }
          }
        }
      }

      @include describe('LG') {
        @include it('aspect-(4/3)') {
          @include assert {
            @include output {
              @include lg\:aspect-(4/3)
            }

            @include expect {
              @media (min-width: $__MEDIA-LG) {
                aspect-ratio: 1.3333333333
              }
            }
          }
        }
      }

      @include describe('XL') {
        @include it('aspect-(4/3)') {
          @include assert {
            @include output {
              @include xl\:aspect-(4/3)
            }

            @include expect {
              @media (min-width: $__MEDIA-XL) {
                aspect-ratio: 1.3333333333
              }
            }
          }
        }
      }

      @include describe('2XL') {
        @include it('aspect-(4/3)') {
          @include assert {
            @include output {
              @include \2xl\:aspect-(4/3)
            }

            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                aspect-ratio: 1.3333333333
              }
            }
          }
        }
      }
    }

    @include describe('Custom') {
      @include it('aspect-(4/3)') {
        @include assert {
          @include output {
            @include aspect-(4/3)
          }

          @include expect {
            aspect-ratio: 1.3333333333
          }
        }
      }
    }
  }

  @include describe('Container') {
    @include describe('Basic') {
      @include it('container') {
        @include assert {
          @include output {
            @include container
          }

          @include expect {
            width: 100%;
          }
        }
      }
    }

    @include describe('RWD') {
      @include describe('SM') {
        @include it('container') {
          @include assert {
            @include output {
              @include sm\:container
            }

            @include expect {
              @media (min-width: $__MEDIA-SM) {
                max-width: $__MEDIA-SM;
              }
            }
          }
        }
      }

      @include describe('MD') {
        @include it('container') {
          @include assert {
            @include output {
              @include md\:container
            }

            @include expect {
              @media (min-width: $__MEDIA-MD) {
                max-width: $__MEDIA-MD;
              }
            }
          }
        }
      }

      @include describe('LG') {
        @include it('container') {
          @include assert {
            @include output {
              @include lg\:container
            }

            @include expect {
              @media (min-width: $__MEDIA-LG) {
                max-width: $__MEDIA-LG;
              }
            }
          }
        }
      }

      @include describe('XL') {
        @include it('container') {
          @include assert {
            @include output {
              @include xl\:container
            }

            @include expect {
              @media (min-width: $__MEDIA-XL) {
                max-width: $__MEDIA-XL;
              }
            }
          }
        }
      }

      @include describe('2XL') {
        @include it('container') {
          @include assert {
            @include output {
              @include \2xl\:container
            }

            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                max-width: $__MEDIA-2XL;
              }
            }
          }
        }
      }
    }
  }

  @include describe('Columns') {
    @include describe('Basic') {
      @include it('columns-1') {
        @include assert {
          @include output {
            @include columns-1
          }

          @include expect {
            columns: 1;
          }
        }
      }

      @include it('columns-1') {
        @include assert {
          @include output {
            @include columns-1
          }

          @include expect {
            columns: 1;
          }
        }
      }

      @include it('columns-2') {
        @include assert {
          @include output {
            @include columns-2
          }

          @include expect {
            columns: 2;
          }
        }
      }

      @include it('columns-3') {
        @include assert {
          @include output {
            @include columns-3
          }

          @include expect {
            columns: 3;
          }
        }
      }

      @include it('columns-4') {
        @include assert {
          @include output {
            @include columns-4
          }

          @include expect {
            columns: 4;
          }
        }
      }

      @include it('columns-5') {
        @include assert {
          @include output {
            @include columns-5
          }

          @include expect {
            columns: 5;
          }
        }
      }

      @include it('columns-6') {
        @include assert {
          @include output {
            @include columns-6
          }

          @include expect {
            columns: 6;
          }
        }
      }

      @include it('columns-7') {
        @include assert {
          @include output {
            @include columns-7
          }

          @include expect {
            columns: 7;
          }
        }
      }

      @include it('columns-8') {
        @include assert {
          @include output {
            @include columns-8
          }

          @include expect {
            columns: 8;
          }
        }
      }

      @include it('columns-9') {
        @include assert {
          @include output {
            @include columns-9
          }

          @include expect {
            columns: 9;
          }
        }
      }

      @include it('columns-10') {
        @include assert {
          @include output {
            @include columns-10
          }

          @include expect {
            columns: 10;
          }
        }
      }

      @include it('columns-11') {
        @include assert {
          @include output {
            @include columns-11
          }

          @include expect {
            columns: 11;
          }
        }
      }

      @include it('columns-12') {
        @include assert {
          @include output {
            @include columns-12
          }

          @include expect {
            columns: 12;
          }
        }
      }

      @include it('columns-auto') {
        @include assert {
          @include output {
            @include columns-auto
          }

          @include expect {
            columns: auto;
          }
        }
      }

      @include it('columns-3xs') {
        @include assert {
          @include output {
            @include columns-3xs
          }

          @include expect {
            columns: 16rem;
          }
        }
      }

      @include it('columns-2xs') {
        @include assert {
          @include output {
            @include columns-2xs
          }

          @include expect {
            columns: 18rem;
          }
        }
      }

      @include it('columns-xs') {
        @include assert {
          @include output {
            @include columns-xs
          }

          @include expect {
            columns: 20rem;
          }
        }
      }

      @include it('columns-sm') {
        @include assert {
          @include output {
            @include columns-sm
          }

          @include expect {
            columns: 24rem;
          }
        }
      }

      @include it('columns-md') {
        @include assert {
          @include output {
            @include columns-md
          }

          @include expect {
            columns: 28rem;
          }
        }
      }

      @include it('columns-lg') {
        @include assert {
          @include output {
            @include columns-lg
          }

          @include expect {
            columns: 32rem;
          }
        }
      }

      @include it('columns-xl') {
        @include assert {
          @include output {
            @include columns-xl
          }

          @include expect {
            columns: 36rem;
          }
        }
      }

      @include it('columns-2xl') {
        @include assert {
          @include output {
            @include columns-2xl
          }

          @include expect {
            columns: 42rem;
          }
        }
      }

      @include it('columns-3xl') {
        @include assert {
          @include output {
            @include columns-3xl
          }

          @include expect {
            columns: 48rem;
          }
        }
      }

      @include it('columns-4xl') {
        @include assert {
          @include output {
            @include columns-4xl
          }

          @include expect {
            columns: 56rem;
          }
        }
      }

      @include it('columns-5xl') {
        @include assert {
          @include output {
            @include columns-5xl
          }

          @include expect {
            columns: 64rem;
          }
        }
      }

      @include it('columns-6xl') {
        @include assert {
          @include output {
            @include columns-6xl
          }

          @include expect {
            columns: 72rem;
          }
        }
      }

      @include it('columns-7xl') {
        @include assert {
          @include output {
            @include columns-7xl
          }

          @include expect {
            columns: 80rem;
          }
        }
      }

    }

    @include describe('RWD') {
      @include describe('SM') {
        @include it('columns-(10rem)') {
          @include assert {
            @include output {
              @include sm\:columns-(10rem)
            }

            @include expect {
              @media (min-width: $__MEDIA-SM) {
                columns: 10rem;
              }
            }
          }
        }
      }

      @include describe('MD') {
        @include it('columns-(10rem)') {
          @include assert {
            @include output {
              @include md\:columns-(10rem)
            }

            @include expect {
              @media (min-width: $__MEDIA-MD) {
                columns: 10rem;
              }
            }
          }
        }
      }

      @include describe('LG') {
        @include it('columns-(10rem)') {
          @include assert {
            @include output {
              @include lg\:columns-(10rem)
            }

            @include expect {
              @media (min-width: $__MEDIA-LG) {
                columns: 10rem;
              }
            }
          }
        }
      }

      @include describe('XL') {
        @include it('columns-(10rem)') {
          @include assert {
            @include output {
              @include xl\:columns-(10rem)
            }

            @include expect {
              @media (min-width: $__MEDIA-XL) {
                columns: 10rem;
              }
            }
          }
        }
      }

      @include describe('2XL') {
        @include it('columns-(10rem)') {
          @include assert {
            @include output {
              @include \2xl\:columns-(10rem)
            }

            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                columns: 10rem;
                ;
              }
            }
          }
        }
      }
    }

    @include describe('Custom') {
      @include it('columns-(10rem)') {
        @include assert {
          @include output {
            @include columns-(10rem)
          }

          @include expect {
            columns: 10rem
          }
        }
      }
    }
  }

  @include describe('Break After') {
    @include describe('Basic') {
      @include it('break-after-auto') {
        @include assert {
          @include output {
            @include break-after-auto
          }

          @include expect {
            break-after: auto;
          }
        }
      }

      @include it('break-after-avoid') {
        @include assert {
          @include output {
            @include break-after-avoid
          }

          @include expect {
            break-after: avoid;
          }
        }
      }

      @include it('break-after-all') {
        @include assert {
          @include output {
            @include break-after-all
          }

          @include expect {
            break-after: all;
          }
        }
      }

      @include it('break-after-avoid-page') {
        @include assert {
          @include output {
            @include break-after-avoid-page
          }

          @include expect {
            break-after: avoid-page;
          }
        }
      }

      @include it('break-after-page') {
        @include assert {
          @include output {
            @include break-after-page
          }

          @include expect {
            break-after: page;
          }
        }
      }

      @include it('break-after-left') {
        @include assert {
          @include output {
            @include break-after-left
          }

          @include expect {
            break-after: left;
          }
        }
      }

      @include it('break-after-right') {
        @include assert {
          @include output {
            @include break-after-right
          }

          @include expect {
            break-after: right;
          }
        }
      }

      @include it('break-after-column') {
        @include assert {
          @include output {
            @include break-after-column
          }

          @include expect {
            break-after: column;
          }
        }
      }
    }

    @include describe('RWD') {
      @include describe('SM') {
        @include it('break-after-auto') {
          @include assert {
            @include output {
              @include sm\:break-after-auto
            }

            @include expect {
              @media (min-width: $__MEDIA-SM) {
                break-after: auto;
              }
            }
          }
        }

        @include it('break-after-avoid') {
          @include assert {
            @include output {
              @include sm\:break-after-avoid
            }

            @include expect {
              @media (min-width: $__MEDIA-SM) {
                break-after: avoid;
              }
            }
          }
        }

        @include it('break-after-all') {
          @include assert {
            @include output {
              @include sm\:break-after-all
            }

            @include expect {
              @media (min-width: $__MEDIA-SM) {
                break-after: all;
              }
            }
          }
        }

        @include it('break-after-avoid-page') {
          @include assert {
            @include output {
              @include sm\:break-after-avoid-page
            }

            @include expect {
              @media (min-width: $__MEDIA-SM) {
                break-after: avoid-page;
              }
            }
          }
        }

        @include it('break-after-page') {
          @include assert {
            @include output {
              @include sm\:break-after-page
            }

            @include expect {
              @media (min-width: $__MEDIA-SM) {
                break-after: page;
              }
            }
          }
        }

        @include it('break-after-left') {
          @include assert {
            @include output {
              @include sm\:break-after-left
            }

            @include expect {
              @media (min-width: $__MEDIA-SM) {
                break-after: left;
              }
            }
          }
        }

        @include it('break-after-right') {
          @include assert {
            @include output {
              @include sm\:break-after-right
            }

            @include expect {
              @media (min-width: $__MEDIA-SM) {
                break-after: right;
              }
            }
          }
        }

        @include it('break-after-column') {
          @include assert {
            @include output {
              @include sm\:break-after-column
            }

            @include expect {
              @media (min-width: $__MEDIA-SM) {
                break-after: column;
              }
            }
          }
        }
      }

      @include describe('MD') {
        @include it('break-after-auto') {
          @include assert {
            @include output {
              @include md\:break-after-auto
            }

            @include expect {
              @media (min-width: $__MEDIA-MD) {
                break-after: auto;
              }
            }
          }
        }

        @include it('break-after-avoid') {
          @include assert {
            @include output {
              @include md\:break-after-avoid
            }

            @include expect {
              @media (min-width: $__MEDIA-MD) {
                break-after: avoid;
              }
            }
          }
        }

        @include it('break-after-all') {
          @include assert {
            @include output {
              @include md\:break-after-all
            }

            @include expect {
              @media (min-width: $__MEDIA-MD) {
                break-after: all;
              }
            }
          }
        }

        @include it('break-after-avoid-page') {
          @include assert {
            @include output {
              @include md\:break-after-avoid-page
            }

            @include expect {
              @media (min-width: $__MEDIA-MD) {
                break-after: avoid-page;
              }
            }
          }
        }

        @include it('break-after-page') {
          @include assert {
            @include output {
              @include md\:break-after-page
            }

            @include expect {
              @media (min-width: $__MEDIA-MD) {
                break-after: page;
              }
            }
          }
        }

        @include it('break-after-left') {
          @include assert {
            @include output {
              @include md\:break-after-left
            }

            @include expect {
              @media (min-width: $__MEDIA-MD) {
                break-after: left;
              }
            }
          }
        }

        @include it('break-after-right') {
          @include assert {
            @include output {
              @include md\:break-after-right
            }

            @include expect {
              @media (min-width: $__MEDIA-MD) {
                break-after: right;
              }
            }
          }
        }

        @include it('break-after-column') {
          @include assert {
            @include output {
              @include md\:break-after-column
            }

            @include expect {
              @media (min-width: $__MEDIA-MD) {
                break-after: column;
              }
            }
          }
        }
      }

      @include describe('LG') {
        @include it('break-after-auto') {
          @include assert {
            @include output {
              @include lg\:break-after-auto
            }

            @include expect {
              @media (min-width: $__MEDIA-LG) {
                break-after: auto;
              }
            }
          }
        }

        @include it('break-after-avoid') {
          @include assert {
            @include output {
              @include lg\:break-after-avoid
            }

            @include expect {
              @media (min-width: $__MEDIA-LG) {
                break-after: avoid;
              }
            }
          }
        }

        @include it('break-after-all') {
          @include assert {
            @include output {
              @include lg\:break-after-all
            }

            @include expect {
              @media (min-width: $__MEDIA-LG) {
                break-after: all;
              }
            }
          }
        }

        @include it('break-after-avoid-page') {
          @include assert {
            @include output {
              @include lg\:break-after-avoid-page
            }

            @include expect {
              @media (min-width: $__MEDIA-LG) {
                break-after: avoid-page;
              }
            }
          }
        }

        @include it('break-after-page') {
          @include assert {
            @include output {
              @include lg\:break-after-page
            }

            @include expect {
              @media (min-width: $__MEDIA-LG) {
                break-after: page;
              }
            }
          }
        }

        @include it('break-after-left') {
          @include assert {
            @include output {
              @include lg\:break-after-left
            }

            @include expect {
              @media (min-width: $__MEDIA-LG) {
                break-after: left;
              }
            }
          }
        }

        @include it('break-after-right') {
          @include assert {
            @include output {
              @include lg\:break-after-right
            }

            @include expect {
              @media (min-width: $__MEDIA-LG) {
                break-after: right;
              }
            }
          }
        }

        @include it('break-after-column') {
          @include assert {
            @include output {
              @include lg\:break-after-column
            }

            @include expect {
              @media (min-width: $__MEDIA-LG) {
                break-after: column;
              }
            }
          }
        }
      }

      @include describe('XL') {
        @include it('break-after-auto') {
          @include assert {
            @include output {
              @include xl\:break-after-auto
            }

            @include expect {
              @media (min-width: $__MEDIA-XL) {
                break-after: auto;
              }
            }
          }
        }

        @include it('break-after-avoid') {
          @include assert {
            @include output {
              @include xl\:break-after-avoid
            }

            @include expect {
              @media (min-width: $__MEDIA-XL) {
                break-after: avoid;
              }
            }
          }
        }

        @include it('break-after-all') {
          @include assert {
            @include output {
              @include xl\:break-after-all
            }

            @include expect {
              @media (min-width: $__MEDIA-XL) {
                break-after: all;
              }
            }
          }
        }

        @include it('break-after-avoid-page') {
          @include assert {
            @include output {
              @include xl\:break-after-avoid-page
            }

            @include expect {
              @media (min-width: $__MEDIA-XL) {
                break-after: avoid-page;
              }
            }
          }
        }

        @include it('break-after-page') {
          @include assert {
            @include output {
              @include xl\:break-after-page
            }

            @include expect {
              @media (min-width: $__MEDIA-XL) {
                break-after: page;
              }
            }
          }
        }

        @include it('break-after-left') {
          @include assert {
            @include output {
              @include xl\:break-after-left
            }

            @include expect {
              @media (min-width: $__MEDIA-XL) {
                break-after: left;
              }
            }
          }
        }

        @include it('break-after-right') {
          @include assert {
            @include output {
              @include xl\:break-after-right
            }

            @include expect {
              @media (min-width: $__MEDIA-XL) {
                break-after: right;
              }
            }
          }
        }

        @include it('break-after-column') {
          @include assert {
            @include output {
              @include xl\:break-after-column
            }

            @include expect {
              @media (min-width: $__MEDIA-XL) {
                break-after: column;
              }
            }
          }
        }
      }

      @include describe('2XL') {
        @include it('break-after-auto') {
          @include assert {
            @include output {
              @include \2xl\:break-after-auto
            }

            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                break-after: auto;
              }
            }
          }
        }

        @include it('break-after-avoid') {
          @include assert {
            @include output {
              @include \2xl\:break-after-avoid
            }

            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                break-after: avoid;
              }
            }
          }
        }

        @include it('break-after-all') {
          @include assert {
            @include output {
              @include \2xl\:break-after-all
            }

            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                break-after: all;
              }
            }
          }
        }

        @include it('break-after-avoid-page') {
          @include assert {
            @include output {
              @include \2xl\:break-after-avoid-page
            }

            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                break-after: avoid-page;
              }
            }
          }
        }

        @include it('break-after-page') {
          @include assert {
            @include output {
              @include \2xl\:break-after-page
            }

            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                break-after: page;
              }
            }
          }
        }

        @include it('break-after-left') {
          @include assert {
            @include output {
              @include \2xl\:break-after-left
            }

            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                break-after: left;
              }
            }
          }
        }

        @include it('break-after-right') {
          @include assert {
            @include output {
              @include \2xl\:break-after-right
            }

            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                break-after: right;
              }
            }
          }
        }

        @include it('break-after-column') {
          @include assert {
            @include output {
              @include \2xl\:break-after-column
            }

            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                break-after: column;
              }
            }
          }
        }
      }
    }

  }

  @include describe('Break Before') {
    @include describe('Basic') {
      @include it('break-before-auto') {
        @include assert {
          @include output {
            @include break-before-auto
          }

          @include expect {
            break-before: auto;
          }
        }
      }

      @include it('break-before-avoid') {
        @include assert {
          @include output {
            @include break-before-avoid
          }

          @include expect {
            break-before: avoid;
          }
        }
      }

      @include it('break-before-all') {
        @include assert {
          @include output {
            @include break-before-all
          }

          @include expect {
            break-before: all;
          }
        }
      }

      @include it('break-before-avoid-page') {
        @include assert {
          @include output {
            @include break-before-avoid-page
          }

          @include expect {
            break-before: avoid-page;
          }
        }
      }

      @include it('break-before-page') {
        @include assert {
          @include output {
            @include break-before-page
          }

          @include expect {
            break-before: page;
          }
        }
      }

      @include it('break-before-left') {
        @include assert {
          @include output {
            @include break-before-left
          }

          @include expect {
            break-before: left;
          }
        }
      }

      @include it('break-before-right') {
        @include assert {
          @include output {
            @include break-before-right
          }

          @include expect {
            break-before: right;
          }
        }
      }

      @include it('break-before-column') {
        @include assert {
          @include output {
            @include break-before-column
          }

          @include expect {
            break-before: column;
          }
        }
      }
    }

    @include describe('RWD') {
      @include describe('SM') {
        @include it('break-before-auto') {
          @include assert {
            @include output {
              @include sm\:break-before-auto
            }

            @include expect {
              @media (min-width: $__MEDIA-SM) {
                break-before: auto;
              }
            }
          }
        }

        @include it('break-before-avoid') {
          @include assert {
            @include output {
              @include sm\:break-before-avoid
            }

            @include expect {
              @media (min-width: $__MEDIA-SM) {
                break-before: avoid;
              }
            }
          }
        }

        @include it('break-before-all') {
          @include assert {
            @include output {
              @include sm\:break-before-all
            }

            @include expect {
              @media (min-width: $__MEDIA-SM) {
                break-before: all;
              }
            }
          }
        }

        @include it('break-before-avoid-page') {
          @include assert {
            @include output {
              @include sm\:break-before-avoid-page
            }

            @include expect {
              @media (min-width: $__MEDIA-SM) {
                break-before: avoid-page;
              }
            }
          }
        }

        @include it('break-before-page') {
          @include assert {
            @include output {
              @include sm\:break-before-page
            }

            @include expect {
              @media (min-width: $__MEDIA-SM) {
                break-before: page;
              }
            }
          }
        }

        @include it('break-before-left') {
          @include assert {
            @include output {
              @include sm\:break-before-left
            }

            @include expect {
              @media (min-width: $__MEDIA-SM) {
                break-before: left;
              }
            }
          }
        }

        @include it('break-before-right') {
          @include assert {
            @include output {
              @include sm\:break-before-right
            }

            @include expect {
              @media (min-width: $__MEDIA-SM) {
                break-before: right;
              }
            }
          }
        }

        @include it('break-before-column') {
          @include assert {
            @include output {
              @include sm\:break-before-column
            }

            @include expect {
              @media (min-width: $__MEDIA-SM) {
                break-before: column;
              }
            }
          }
        }
      }

      @include describe('MD') {
        @include it('break-before-auto') {
          @include assert {
            @include output {
              @include md\:break-before-auto
            }

            @include expect {
              @media (min-width: $__MEDIA-MD) {
                break-before: auto;
              }
            }
          }
        }

        @include it('break-before-avoid') {
          @include assert {
            @include output {
              @include md\:break-before-avoid
            }

            @include expect {
              @media (min-width: $__MEDIA-MD) {
                break-before: avoid;
              }
            }
          }
        }

        @include it('break-before-all') {
          @include assert {
            @include output {
              @include md\:break-before-all
            }

            @include expect {
              @media (min-width: $__MEDIA-MD) {
                break-before: all;
              }
            }
          }
        }

        @include it('break-before-avoid-page') {
          @include assert {
            @include output {
              @include md\:break-before-avoid-page
            }

            @include expect {
              @media (min-width: $__MEDIA-MD) {
                break-before: avoid-page;
              }
            }
          }
        }

        @include it('break-before-page') {
          @include assert {
            @include output {
              @include md\:break-before-page
            }

            @include expect {
              @media (min-width: $__MEDIA-MD) {
                break-before: page;
              }
            }
          }
        }

        @include it('break-before-left') {
          @include assert {
            @include output {
              @include md\:break-before-left
            }

            @include expect {
              @media (min-width: $__MEDIA-MD) {
                break-before: left;
              }
            }
          }
        }

        @include it('break-before-right') {
          @include assert {
            @include output {
              @include md\:break-before-right
            }

            @include expect {
              @media (min-width: $__MEDIA-MD) {
                break-before: right;
              }
            }
          }
        }

        @include it('break-before-column') {
          @include assert {
            @include output {
              @include md\:break-before-column
            }

            @include expect {
              @media (min-width: $__MEDIA-MD) {
                break-before: column;
              }
            }
          }
        }
      }

      @include describe('LG') {
        @include it('break-before-auto') {
          @include assert {
            @include output {
              @include lg\:break-before-auto
            }

            @include expect {
              @media (min-width: $__MEDIA-LG) {
                break-before: auto;
              }
            }
          }
        }

        @include it('break-before-avoid') {
          @include assert {
            @include output {
              @include lg\:break-before-avoid
            }

            @include expect {
              @media (min-width: $__MEDIA-LG) {
                break-before: avoid;
              }
            }
          }
        }

        @include it('break-before-all') {
          @include assert {
            @include output {
              @include lg\:break-before-all
            }

            @include expect {
              @media (min-width: $__MEDIA-LG) {
                break-before: all;
              }
            }
          }
        }

        @include it('break-before-avoid-page') {
          @include assert {
            @include output {
              @include lg\:break-before-avoid-page
            }

            @include expect {
              @media (min-width: $__MEDIA-LG) {
                break-before: avoid-page;
              }
            }
          }
        }

        @include it('break-before-page') {
          @include assert {
            @include output {
              @include lg\:break-before-page
            }

            @include expect {
              @media (min-width: $__MEDIA-LG) {
                break-before: page;
              }
            }
          }
        }

        @include it('break-before-left') {
          @include assert {
            @include output {
              @include lg\:break-before-left
            }

            @include expect {
              @media (min-width: $__MEDIA-LG) {
                break-before: left;
              }
            }
          }
        }

        @include it('break-before-right') {
          @include assert {
            @include output {
              @include lg\:break-before-right
            }

            @include expect {
              @media (min-width: $__MEDIA-LG) {
                break-before: right;
              }
            }
          }
        }

        @include it('break-before-column') {
          @include assert {
            @include output {
              @include lg\:break-before-column
            }

            @include expect {
              @media (min-width: $__MEDIA-LG) {
                break-before: column;
              }
            }
          }
        }
      }

      @include describe('XL') {
        @include it('break-before-auto') {
          @include assert {
            @include output {
              @include xl\:break-before-auto
            }

            @include expect {
              @media (min-width: $__MEDIA-XL) {
                break-before: auto;
              }
            }
          }
        }

        @include it('break-before-avoid') {
          @include assert {
            @include output {
              @include xl\:break-before-avoid
            }

            @include expect {
              @media (min-width: $__MEDIA-XL) {
                break-before: avoid;
              }
            }
          }
        }

        @include it('break-before-all') {
          @include assert {
            @include output {
              @include xl\:break-before-all
            }

            @include expect {
              @media (min-width: $__MEDIA-XL) {
                break-before: all;
              }
            }
          }
        }

        @include it('break-before-avoid-page') {
          @include assert {
            @include output {
              @include xl\:break-before-avoid-page
            }

            @include expect {
              @media (min-width: $__MEDIA-XL) {
                break-before: avoid-page;
              }
            }
          }
        }

        @include it('break-before-page') {
          @include assert {
            @include output {
              @include xl\:break-before-page
            }

            @include expect {
              @media (min-width: $__MEDIA-XL) {
                break-before: page;
              }
            }
          }
        }

        @include it('break-before-left') {
          @include assert {
            @include output {
              @include xl\:break-before-left
            }

            @include expect {
              @media (min-width: $__MEDIA-XL) {
                break-before: left;
              }
            }
          }
        }

        @include it('break-before-right') {
          @include assert {
            @include output {
              @include xl\:break-before-right
            }

            @include expect {
              @media (min-width: $__MEDIA-XL) {
                break-before: right;
              }
            }
          }
        }

        @include it('break-before-column') {
          @include assert {
            @include output {
              @include xl\:break-before-column
            }

            @include expect {
              @media (min-width: $__MEDIA-XL) {
                break-before: column;
              }
            }
          }
        }
      }

      @include describe('2XL') {
        @include it('break-before-auto') {
          @include assert {
            @include output {
              @include \2xl\:break-before-auto
            }

            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                break-before: auto;
              }
            }
          }
        }

        @include it('break-before-avoid') {
          @include assert {
            @include output {
              @include \2xl\:break-before-avoid
            }

            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                break-before: avoid;
              }
            }
          }
        }

        @include it('break-before-all') {
          @include assert {
            @include output {
              @include \2xl\:break-before-all
            }

            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                break-before: all;
              }
            }
          }
        }

        @include it('break-before-avoid-page') {
          @include assert {
            @include output {
              @include \2xl\:break-before-avoid-page
            }

            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                break-before: avoid-page;
              }
            }
          }
        }

        @include it('break-before-page') {
          @include assert {
            @include output {
              @include \2xl\:break-before-page
            }

            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                break-before: page;
              }
            }
          }
        }

        @include it('break-before-left') {
          @include assert {
            @include output {
              @include \2xl\:break-before-left
            }

            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                break-before: left;
              }
            }
          }
        }

        @include it('break-before-right') {
          @include assert {
            @include output {
              @include \2xl\:break-before-right
            }

            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                break-before: right;
              }
            }
          }
        }

        @include it('break-before-column') {
          @include assert {
            @include output {
              @include \2xl\:break-before-column
            }

            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                break-before: column;
              }
            }
          }
        }
      }
    }
  }

  @include describe('Break Inside') {
    @include describe('Basic') {
      @include it('break-inside-auto') {
        @include assert {
          @include output {
            @include break-inside-auto
          }

          @include expect {
            break-inside: auto;
          }
        }
      }

      @include it('break-inside-avoid') {
        @include assert {
          @include output {
            @include break-inside-avoid
          }

          @include expect {
            break-inside: avoid;
          }
        }
      }

      @include it('break-inside-avoid-page') {
        @include assert {
          @include output {
            @include break-inside-avoid-page
          }

          @include expect {
            break-inside: avoid-page;
          }
        }
      }

      @include it('break-inside-avoid-column') {
        @include assert {
          @include output {
            @include break-inside-avoid-column
          }

          @include expect {
            break-inside: avoid-column;
          }
        }
      }
    }

    @include describe('RWD') {
      @include describe('SM') {
        @include it('break-inside-auto') {
          @include assert {
            @include output {
              @include sm\:break-inside-auto
            }

            @include expect {
              @media (min-width: $__MEDIA-SM) {
                break-inside: auto;
              }
            }
          }
        }

        @include it('break-inside-avoid') {
          @include assert {
            @include output {
              @include sm\:break-inside-avoid
            }

            @include expect {
              @media (min-width: $__MEDIA-SM) {
                break-inside: avoid;
              }
            }
          }
        }

        @include it('break-inside-avoid-page') {
          @include assert {
            @include output {
              @include sm\:break-inside-avoid-page
            }

            @include expect {
              @media (min-width: $__MEDIA-SM) {
                break-inside: avoid-page;
              }
            }
          }
        }

        @include it('break-inside-avoid-column') {
          @include assert {
            @include output {
              @include sm\:break-inside-avoid-column
            }

            @include expect {
              @media (min-width: $__MEDIA-SM) {
                break-inside: avoid-column;
              }
            }
          }
        }
      }

      @include describe('MD') {
        @include it('break-inside-auto') {
          @include assert {
            @include output {
              @include md\:break-inside-auto
            }

            @include expect {
              @media (min-width: $__MEDIA-MD) {
                break-inside: auto;
              }
            }
          }
        }

        @include it('break-inside-avoid') {
          @include assert {
            @include output {
              @include md\:break-inside-avoid
            }

            @include expect {
              @media (min-width: $__MEDIA-MD) {
                break-inside: avoid;
              }
            }
          }
        }

        @include it('break-inside-avoid-page') {
          @include assert {
            @include output {
              @include md\:break-inside-avoid-page
            }

            @include expect {
              @media (min-width: $__MEDIA-MD) {
                break-inside: avoid-page;
              }
            }
          }
        }

        @include it('break-inside-avoid-column') {
          @include assert {
            @include output {
              @include md\:break-inside-avoid-column
            }

            @include expect {
              @media (min-width: $__MEDIA-MD) {
                break-inside: avoid-column;
              }
            }
          }
        }
      }

      @include describe('LG') {
        @include it('break-inside-auto') {
          @include assert {
            @include output {
              @include lg\:break-inside-auto
            }

            @include expect {
              @media (min-width: $__MEDIA-LG) {
                break-inside: auto;
              }
            }
          }
        }

        @include it('break-inside-avoid') {
          @include assert {
            @include output {
              @include lg\:break-inside-avoid
            }

            @include expect {
              @media (min-width: $__MEDIA-LG) {
                break-inside: avoid;
              }
            }
          }
        }

        @include it('break-inside-avoid-page') {
          @include assert {
            @include output {
              @include lg\:break-inside-avoid-page
            }

            @include expect {
              @media (min-width: $__MEDIA-LG) {
                break-inside: avoid-page;
              }
            }
          }
        }

        @include it('break-inside-avoid-column') {
          @include assert {
            @include output {
              @include lg\:break-inside-avoid-column
            }

            @include expect {
              @media (min-width: $__MEDIA-LG) {
                break-inside: avoid-column;
              }
            }
          }
        }
      }

      @include describe('XL') {
        @include it('break-inside-auto') {
          @include assert {
            @include output {
              @include xl\:break-inside-auto
            }

            @include expect {
              @media (min-width: $__MEDIA-XL) {
                break-inside: auto;
              }
            }
          }
        }

        @include it('break-inside-avoid') {
          @include assert {
            @include output {
              @include xl\:break-inside-avoid
            }

            @include expect {
              @media (min-width: $__MEDIA-XL) {
                break-inside: avoid;
              }
            }
          }
        }

        @include it('break-inside-avoid-page') {
          @include assert {
            @include output {
              @include xl\:break-inside-avoid-page
            }

            @include expect {
              @media (min-width: $__MEDIA-XL) {
                break-inside: avoid-page;
              }
            }
          }
        }

        @include it('break-inside-avoid-column') {
          @include assert {
            @include output {
              @include xl\:break-inside-avoid-column
            }

            @include expect {
              @media (min-width: $__MEDIA-XL) {
                break-inside: avoid-column;
              }
            }
          }
        }
      }

      @include describe('2XL') {
        @include it('break-inside-auto') {
          @include assert {
            @include output {
              @include \2xl\:break-inside-auto
            }

            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                break-inside: auto;
              }
            }
          }
        }

        @include it('break-inside-avoid') {
          @include assert {
            @include output {
              @include \2xl\:break-inside-avoid
            }

            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                break-inside: avoid;
              }
            }
          }
        }

        @include it('break-inside-avoid-page') {
          @include assert {
            @include output {
              @include \2xl\:break-inside-avoid-page
            }

            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                break-inside: avoid-page;
              }
            }
          }
        }

        @include it('break-inside-avoid-column') {
          @include assert {
            @include output {
              @include \2xl\:break-inside-avoid-column
            }

            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                break-inside: avoid-column;
              }
            }
          }
        }
      }
    }
  }

  @include describe('Box Decoration Break') {
    @include describe('Basic') {
      @include it('box-decoration-clone') {
        @include assert {
          @include output {
            @include box-decoration-clone
          }

          @include expect {
            box-decoration-break: clone;
          }
        }
      }

      @include it('box-decoration-slice') {
        @include assert {
          @include output {
            @include box-decoration-slice
          }

          @include expect {
            box-decoration-break: slice;
          }
        }
      }
    }

    @include describe('RWD') {
      @include describe('SM') {
        @include it('box-decoration-clone') {
          @include assert {
            @include output {
              @include sm\:box-decoration-clone
            }

            @include expect {
              @media (min-width: $__MEDIA-SM) {
                box-decoration-break: clone;
              }
            }
          }
        }

        @include it('box-decoration-slice') {
          @include assert {
            @include output {
              @include sm\:box-decoration-slice
            }

            @include expect {
              @media (min-width: $__MEDIA-SM) {
                box-decoration-break: slice;
              }
            }
          }
        }
      }
      @include describe('MD') {
        @include it('box-decoration-clone') {
          @include assert {
            @include output {
              @include md\:box-decoration-clone
            }

            @include expect {
              @media (min-width: $__MEDIA-MD) {
                box-decoration-break: clone;
              }
            }
          }
        }

        @include it('box-decoration-slice') {
          @include assert {
            @include output {
              @include md\:box-decoration-slice
            }

            @include expect {
              @media (min-width: $__MEDIA-MD) {
                box-decoration-break: slice;
              }
            }
          }
        }
      }
      @include describe('LG') {
        @include it('box-decoration-clone') {
          @include assert {
            @include output {
              @include lg\:box-decoration-clone
            }

            @include expect {
              @media (min-width: $__MEDIA-LG) {
                box-decoration-break: clone;
              }
            }
          }
        }

        @include it('box-decoration-slice') {
          @include assert {
            @include output {
              @include lg\:box-decoration-slice
            }

            @include expect {
              @media (min-width: $__MEDIA-LG) {
                box-decoration-break: slice;
              }
            }
          }
        }
      }
      @include describe('XL') {
        @include it('box-decoration-clone') {
          @include assert {
            @include output {
              @include xl\:box-decoration-clone
            }

            @include expect {
              @media (min-width: $__MEDIA-XL) {
                box-decoration-break: clone;
              }
            }
          }
        }

        @include it('box-decoration-slice') {
          @include assert {
            @include output {
              @include xl\:box-decoration-slice
            }

            @include expect {
              @media (min-width: $__MEDIA-XL) {
                box-decoration-break: slice;
              }
            }
          }
        }
      }
      @include describe('2XL') {
        @include it('box-decoration-clone') {
          @include assert {
            @include output {
              @include \2xl\:box-decoration-clone
            }

            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                box-decoration-break: clone;
              }
            }
          }
        }

        @include it('box-decoration-slice') {
          @include assert {
            @include output {
              @include \2xl\:box-decoration-slice
            }

            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                box-decoration-break: slice;
              }
            }
          }
        }
      }
    }
  }
}

@include report;