@use "../node_modules/sass-true" as *;
@import "./tailwind_mixin_v3.4.1.scss";

// api usage: https://www.oddbird.net/true/docs/
@include describe("Typography") {
  @include describe("Font Family") {
    @include describe("Basic") {
      @include it("font-sans") {
        @include assert {
          @include output {
            @include font-sans;
          }
  
          @include expect {
            font-family: ui-sans-serif, system-ui, sans-serif,
              "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol",
              "Noto Color Emoji";
          }
        }
      }
  
      @include it("font-serif") {
        @include assert {
          @include output {
            @include font-serif;
          }
  
          @include expect {
            font-family: ui-serif, Georgia, Cambria, "Times New Roman",
              Times, serif;
          }
        }
      }
  
      @include it("font-mono") {
        @include assert {
          @include output {
            @include font-mono;
          }
  
          @include expect {
            font-family: ui-monospace, SFMono-Regular, Menlo, Monaco,
              Consolas, "Liberation Mono", "Courier New", monospace;
          }
        }
      }
    }
  
    @include describe("RWD") {
      @include describe("SM") {
        @include it("font-family-('Open Sans')") {
          @include assert {
            @include output {
              @include sm\:font-family-('Open Sans');
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                font-family: 'Open Sans';
              }
            }
          }
        }
      }
  
      @include describe("MD") {
        @include it("font-family-('Open Sans')") {
          @include assert {
            @include output {
              @include md\:font-family-('Open Sans');
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                font-family: 'Open Sans';
              }
            }
          }
        }
      }
  
      @include describe("LG") {
        @include it("font-family-('Open Sans')") {
          @include assert {
            @include output {
              @include lg\:font-family-('Open Sans');
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                font-family: 'Open Sans';
              }
            }
          }
        }
      }
  
      @include describe("XL") {
        @include it("font-family-('Open Sans')") {
          @include assert {
            @include output {
              @include xl\:font-family-('Open Sans');
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                font-family: 'Open Sans';
              }
            }
          }
        }
      }
  
      @include describe("2XL") {
        @include it("font-family-('Open Sans')") {
          @include assert {
            @include output {
              @include \2xl\:font-family-('Open Sans');
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                font-family: 'Open Sans';
              }
            }
          }
        }
      }
    }
  
    @include describe("Custom") {
      @include it("font-family-('Open Sans')") {
        @include assert {
          @include output {
            @include font-family-('Open Sans');
          }
  
          @include expect {
            font-family: 'Open Sans';
          }
        }
      }
    }
  }
  
  @include describe("Font Size") {
    @include describe("Basic") {
      @include it("text-xs") {
        @include assert {
          @include output {
            @include text-xs;
          }
  
          @include expect {
            font-size: 0.75rem;
            line-height: 1rem;
          }
        }
      }
  
      @include it("text-sm") {
        @include assert {
          @include output {
            @include text-sm;
          }
  
          @include expect {
            font-size: 0.875rem;
            line-height: 1.25rem;
          }
        }
      }
  
      @include it("text-base") {
        @include assert {
          @include output {
            @include text-base;
          }
  
          @include expect {
            font-size: 1rem;
            line-height: 1.5rem;
          }
        }
      }
  
      @include it("text-lg") {
        @include assert {
          @include output {
            @include text-lg;
          }
  
          @include expect {
            font-size: 1.125rem;
            line-height: 1.75rem;
          }
        }
      }
  
      @include it("text-xl") {
        @include assert {
          @include output {
            @include text-xl;
          }
  
          @include expect {
            font-size: 1.25rem;
            line-height: 1.75rem;
          }
        }
      }
  
      @include it("text-2xl") {
        @include assert {
          @include output {
            @include text-2xl;
          }
  
          @include expect {
            font-size: 1.5rem;
            line-height: 2rem;
          }
        }
      }
  
      @include it("text-3xl") {
        @include assert {
          @include output {
            @include text-3xl;
          }
  
          @include expect {
            font-size: 1.875rem;
            line-height: 2.25rem;
          }
        }
      }
  
      @include it("text-4xl") {
        @include assert {
          @include output {
            @include text-4xl;
          }
  
          @include expect {
            font-size: 2.25rem;
            line-height: 2.5rem;
          }
        }
      }
  
      @include it("text-5xl") {
        @include assert {
          @include output {
            @include text-5xl;
          }
  
          @include expect {
            font-size: 3rem;
            line-height: 1;
          }
        }
      }
  
      @include it("text-6xl") {
        @include assert {
          @include output {
            @include text-6xl;
          }
  
          @include expect {
            font-size: 3.75rem;
            line-height: 1;
          }
        }
      }
  
      @include it("text-7xl") {
        @include assert {
          @include output {
            @include text-7xl;
          }
  
          @include expect {
            font-size: 4.5rem;
            line-height: 1;
          }
        }
      }
  
      @include it("text-8xl") {
        @include assert {
          @include output {
            @include text-8xl;
          }
  
          @include expect {
            font-size: 6rem;
            line-height: 1;
          }
        }
      }
  
      @include it("text-9xl") {
        @include assert {
          @include output {
            @include text-9xl;
          }
  
          @include expect {
            font-size: 8rem;
            line-height: 1;
          }
        }
      }
    }
  
    @include describe("RWD") {
      @include describe("SM") {
        @include it("text-(14px)") {
          @include assert {
            @include output {
              @include sm\:text-(14px);
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                font-size: 14px;
              }
            }
          }
        }
      }
  
      @include describe("MD") {
        @include it("text-(14px)") {
          @include assert {
            @include output {
              @include md\:text-(14px);
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                font-size: 14px;
              }
            }
          }
        }
      }
  
      @include describe("LG") {
        @include it("text-(14px)") {
          @include assert {
            @include output {
              @include lg\:text-(14px);
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                font-size: 14px;
              }
            }
          }
        }
      }
  
      @include describe("XL") {
        @include it("text-(14px)") {
          @include assert {
            @include output {
              @include xl\:text-(14px);
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                font-size: 14px;
              }
            }
          }
        }
      }
  
      @include describe("2XL") {
        @include it("text-(14px)") {
          @include assert {
            @include output {
              @include \2xl\:text-(14px);
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                font-size: 14px;
              }
            }
          }
        }
      }
    }
  
    @include describe("Custom") {
      @include it("text-(14px)") {
        @include assert {
          @include output {
            @include text-(14px);
          }
  
          @include expect {
            font-size: 14px;
          }
        }
      }
    }
  }
  
  @include describe("Font Smoothing") {
    @include describe("Basic") {
      @include it("antialiased") {
        @include assert {
          @include output {
            @include antialiased;
          }
  
          @include expect {
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
          }
        }
      }
  
      @include it("subpixel-antialiased") {
        @include assert {
          @include output {
            @include subpixel-antialiased;
          }
  
          @include expect {
            -webkit-font-smoothing: auto;
            -moz-osx-font-smoothing: auto;
          }
        }
      }
    }
  
    @include describe("RWD") {
      @include describe("SM") {
        @include it("antialiased") {
          @include assert {
            @include output {
              @include sm\:antialiased;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
              }
            }
          }
        }
  
        @include it("subpixel-antialiased") {
          @include assert {
            @include output {
              @include sm\:subpixel-antialiased;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                -webkit-font-smoothing: auto;
                -moz-osx-font-smoothing: auto;
              }
            }
          }
        }
      }
  
      @include describe("MD") {
        @include it("antialiased") {
          @include assert {
            @include output {
              @include md\:antialiased;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
              }
            }
          }
        }
  
        @include it("subpixel-antialiased") {
          @include assert {
            @include output {
              @include md\:subpixel-antialiased;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                -webkit-font-smoothing: auto;
                -moz-osx-font-smoothing: auto;
              }
            }
          }
        }
      }
  
      @include describe("LG") {
        @include it("antialiased") {
          @include assert {
            @include output {
              @include lg\:antialiased;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
              }
            }
          }
        }
  
        @include it("subpixel-antialiased") {
          @include assert {
            @include output {
              @include lg\:subpixel-antialiased;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                -webkit-font-smoothing: auto;
                -moz-osx-font-smoothing: auto;
              }
            }
          }
        }
      }
  
      @include describe("XL") {
        @include it("antialiased") {
          @include assert {
            @include output {
              @include xl\:antialiased;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
              }
            }
          }
        }
  
        @include it("subpixel-antialiased") {
          @include assert {
            @include output {
              @include xl\:subpixel-antialiased;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                -webkit-font-smoothing: auto;
                -moz-osx-font-smoothing: auto;
              }
            }
          }
        }
      }
  
      @include describe("2XL") {
        @include it("antialiased") {
          @include assert {
            @include output {
              @include \2xl\:antialiased;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
              }
            }
          }
        }
  
        @include it("subpixel-antialiased") {
          @include assert {
            @include output {
              @include \2xl\:subpixel-antialiased;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                -webkit-font-smoothing: auto;
                -moz-osx-font-smoothing: auto;
              }
            }
          }
        }
      }
    }
  }
  
  @include describe("Font Style") {
    @include describe("Basic") {
      @include it("italic") {
        @include assert {
          @include output {
            @include italic;
          }
  
          @include expect {
            font-style: italic;
          }
        }
      }
  
      @include it("not-italic") {
        @include assert {
          @include output {
            @include not-italic;
          }
  
          @include expect {
            font-style: normal;
          }
        }
      }
    }
  
    @include describe("RWD") {
      @include describe("SM") {
        @include it("italic") {
          @include assert {
            @include output {
              @include sm\:italic;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                font-style: italic;
              }
            }
          }
        }
  
        @include it("not-italic") {
          @include assert {
            @include output {
              @include sm\:not-italic;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                font-style: normal;
              }
            }
          }
        }
      }
  
      @include describe("MD") {
        @include it("italic") {
          @include assert {
            @include output {
              @include md\:italic;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                font-style: italic;
              }
            }
          }
        }
  
        @include it("not-italic") {
          @include assert {
            @include output {
              @include md\:not-italic;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                font-style: normal;
              }
            }
          }
        }
      }
  
      @include describe("LG") {
        @include it("italic") {
          @include assert {
            @include output {
              @include lg\:italic;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                font-style: italic;
              }
            }
          }
        }
  
        @include it("not-italic") {
          @include assert {
            @include output {
              @include lg\:not-italic;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                font-style: normal;
              }
            }
          }
        }
      }
  
      @include describe("XL") {
        @include it("italic") {
          @include assert {
            @include output {
              @include xl\:italic;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                font-style: italic;
              }
            }
          }
        }
  
        @include it("not-italic") {
          @include assert {
            @include output {
              @include xl\:not-italic;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                font-style: normal;
              }
            }
          }
        }
      }
  
      @include describe("2XL") {
        @include it("italic") {
          @include assert {
            @include output {
              @include \2xl\:italic;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                font-style: italic;
              }
            }
          }
        }
  
        @include it("not-italic") {
          @include assert {
            @include output {
              @include \2xl\:not-italic;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                font-style: normal;
              }
            }
          }
        }
      }
    }
  }
  
  @include describe("Font Weight") {
    @include describe("Basic") {
      @include it("font-thin") {
        @include assert {
          @include output {
            @include font-thin;
          }
  
          @include expect {
            font-weight: 100;
          }
        }
      }
  
      @include it("font-extralight") {
        @include assert {
          @include output {
            @include font-extralight;
          }
  
          @include expect {
            font-weight: 200;
          }
        }
      }
  
      @include it("font-light") {
        @include assert {
          @include output {
            @include font-light;
          }
  
          @include expect {
            font-weight: 300;
          }
        }
      }
  
      @include it("font-normal") {
        @include assert {
          @include output {
            @include font-normal;
          }
  
          @include expect {
            font-weight: 400;
          }
        }
      }
  
      @include it("font-medium") {
        @include assert {
          @include output {
            @include font-medium;
          }
  
          @include expect {
            font-weight: 500;
          }
        }
      }
  
      @include it("font-semibold") {
        @include assert {
          @include output {
            @include font-semibold;
          }
  
          @include expect {
            font-weight: 600;
          }
        }
      }
  
      @include it("font-bold") {
        @include assert {
          @include output {
            @include font-bold;
          }
  
          @include expect {
            font-weight: 700;
          }
        }
      }
  
      @include it("font-extrabold") {
        @include assert {
          @include output {
            @include font-extrabold;
          }
  
          @include expect {
            font-weight: 800;
          }
        }
      }
  
      @include it("font-black") {
        @include assert {
          @include output {
            @include font-black;
          }
  
          @include expect {
            font-weight: 900;
          }
        }
      }
    }
  
    @include describe("RWD") {
      @include describe("SM") {
        @include it("font-thin") {
          @include assert {
            @include output {
              @include sm\:font-thin;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                font-weight: 100;
              }
            }
          }
        }
  
        @include it("font-extralight") {
          @include assert {
            @include output {
              @include sm\:font-extralight;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                font-weight: 200;
              }
            }
          }
        }
  
        @include it("font-light") {
          @include assert {
            @include output {
              @include sm\:font-light;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                font-weight: 300;
              }
            }
          }
        }
  
        @include it("font-normal") {
          @include assert {
            @include output {
              @include sm\:font-normal;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                font-weight: 400;
              }
            }
          }
        }
        
        @include it("font-medium") {
          @include assert {
            @include output {
              @include sm\:font-medium;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                font-weight: 500;
              }
            }
          }
        }
  
        @include it("font-semibold") {
          @include assert {
            @include output {
              @include sm\:font-semibold;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                font-weight: 600;
              }
            }
          }
        }
  
        @include it("font-bold") {
          @include assert {
            @include output {
              @include sm\:font-bold;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                font-weight: 700;
              }
            }
          }
        }
  
        @include it("font-extrabold") {
          @include assert {
            @include output {
              @include sm\:font-extrabold;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                font-weight: 800;
              }
            }
          }
        }
  
        @include it("font-black") {
          @include assert {
            @include output {
              @include sm\:font-black;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                font-weight: 900;
              }
            }
          }
        }
        // 
      }
  
      @include describe("MD") {
        @include it("font-thin") {
          @include assert {
            @include output {
              @include md\:font-thin;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                font-weight: 100;
              }
            }
          }
        }
  
        @include it("font-extralight") {
          @include assert {
            @include output {
              @include md\:font-extralight;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                font-weight: 200;
              }
            }
          }
        }
  
        @include it("font-light") {
          @include assert {
            @include output {
              @include md\:font-light;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                font-weight: 300;
              }
            }
          }
        }
  
        @include it("font-normal") {
          @include assert {
            @include output {
              @include md\:font-normal;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                font-weight: 400;
              }
            }
          }
        }
        
        @include it("font-medium") {
          @include assert {
            @include output {
              @include md\:font-medium;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                font-weight: 500;
              }
            }
          }
        }
  
        @include it("font-semibold") {
          @include assert {
            @include output {
              @include md\:font-semibold;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                font-weight: 600;
              }
            }
          }
        }
  
        @include it("font-bold") {
          @include assert {
            @include output {
              @include md\:font-bold;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                font-weight: 700;
              }
            }
          }
        }
  
        @include it("font-extrabold") {
          @include assert {
            @include output {
              @include md\:font-extrabold;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                font-weight: 800;
              }
            }
          }
        }
  
        @include it("font-black") {
          @include assert {
            @include output {
              @include md\:font-black;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                font-weight: 900;
              }
            }
          }
        }
      }
  
      @include describe("LG") {
        @include it("font-thin") {
          @include assert {
            @include output {
              @include lg\:font-thin;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                font-weight: 100;
              }
            }
          }
        }
  
        @include it("font-extralight") {
          @include assert {
            @include output {
              @include lg\:font-extralight;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                font-weight: 200;
              }
            }
          }
        }
  
        @include it("font-light") {
          @include assert {
            @include output {
              @include lg\:font-light;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                font-weight: 300;
              }
            }
          }
        }
  
        @include it("font-normal") {
          @include assert {
            @include output {
              @include lg\:font-normal;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                font-weight: 400;
              }
            }
          }
        }
        
        @include it("font-medium") {
          @include assert {
            @include output {
              @include lg\:font-medium;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                font-weight: 500;
              }
            }
          }
        }
  
        @include it("font-semibold") {
          @include assert {
            @include output {
              @include lg\:font-semibold;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                font-weight: 600;
              }
            }
          }
        }
  
        @include it("font-bold") {
          @include assert {
            @include output {
              @include lg\:font-bold;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                font-weight: 700;
              }
            }
          }
        }
  
        @include it("font-extrabold") {
          @include assert {
            @include output {
              @include lg\:font-extrabold;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                font-weight: 800;
              }
            }
          }
        }
  
        @include it("font-black") {
          @include assert {
            @include output {
              @include lg\:font-black;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                font-weight: 900;
              }
            }
          }
        }
      }
  
      @include describe("XL") {
        @include it("font-thin") {
          @include assert {
            @include output {
              @include xl\:font-thin;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                font-weight: 100;
              }
            }
          }
        }
  
        @include it("font-extralight") {
          @include assert {
            @include output {
              @include xl\:font-extralight;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                font-weight: 200;
              }
            }
          }
        }
  
        @include it("font-light") {
          @include assert {
            @include output {
              @include xl\:font-light;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                font-weight: 300;
              }
            }
          }
        }
  
        @include it("font-normal") {
          @include assert {
            @include output {
              @include xl\:font-normal;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                font-weight: 400;
              }
            }
          }
        }
        
        @include it("font-medium") {
          @include assert {
            @include output {
              @include xl\:font-medium;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                font-weight: 500;
              }
            }
          }
        }
  
        @include it("font-semibold") {
          @include assert {
            @include output {
              @include xl\:font-semibold;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                font-weight: 600;
              }
            }
          }
        }
  
        @include it("font-bold") {
          @include assert {
            @include output {
              @include xl\:font-bold;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                font-weight: 700;
              }
            }
          }
        }
  
        @include it("font-extrabold") {
          @include assert {
            @include output {
              @include xl\:font-extrabold;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                font-weight: 800;
              }
            }
          }
        }
  
        @include it("font-black") {
          @include assert {
            @include output {
              @include xl\:font-black;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                font-weight: 900;
              }
            }
          }
        }
      }
  
      @include describe("2XL") {
        @include it("font-thin") {
          @include assert {
            @include output {
              @include \2xl\:font-thin;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                font-weight: 100;
              }
            }
          }
        }
  
        @include it("font-extralight") {
          @include assert {
            @include output {
              @include \2xl\:font-extralight;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                font-weight: 200;
              }
            }
          }
        }
  
        @include it("font-light") {
          @include assert {
            @include output {
              @include \2xl\:font-light;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                font-weight: 300;
              }
            }
          }
        }
  
        @include it("font-normal") {
          @include assert {
            @include output {
              @include \2xl\:font-normal;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                font-weight: 400;
              }
            }
          }
        }
        
        @include it("font-medium") {
          @include assert {
            @include output {
              @include \2xl\:font-medium;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                font-weight: 500;
              }
            }
          }
        }
  
        @include it("font-semibold") {
          @include assert {
            @include output {
              @include \2xl\:font-semibold;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                font-weight: 600;
              }
            }
          }
        }
  
        @include it("font-bold") {
          @include assert {
            @include output {
              @include \2xl\:font-bold;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                font-weight: 700;
              }
            }
          }
        }
  
        @include it("font-extrabold") {
          @include assert {
            @include output {
              @include \2xl\:font-extrabold;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                font-weight: 800;
              }
            }
          }
        }
  
        @include it("font-black") {
          @include assert {
            @include output {
              @include \2xl\:font-black;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                font-weight: 900;
              }
            }
          }
        }
      }
    }
  }
  
  @include describe("Font Variant Numeric") {
    @include describe("Basic") {
      @include it("normal-nums") {
        @include assert {
          @include output {
            @include normal-nums;
          }
  
          @include expect {
            font-variant-numeric: normal;
          }
        }
      }
  
      @include it("ordinal") {
        @include assert {
          @include output {
            @include ordinal;
          }
  
          @include expect {
            font-variant-numeric: ordinal;
          }
        }
      }
  
      @include it("slashed-zero") {
        @include assert {
          @include output {
            @include slashed-zero;
          }
  
          @include expect {
            font-variant-numeric: slashed-zero;
          }
        }
      }
  
      @include it("lining-nums") {
        @include assert {
          @include output {
            @include lining-nums;
          }
  
          @include expect {
            font-variant-numeric: lining-nums;
          }
        }
      }
  
      @include it("oldstyle-nums") {
        @include assert {
          @include output {
            @include oldstyle-nums;
          }
  
          @include expect {
            font-variant-numeric: oldstyle-nums;
          }
        }
      }
  
      @include it("proportional-nums") {
        @include assert {
          @include output {
            @include proportional-nums;
          }
  
          @include expect {
            font-variant-numeric: proportional-nums;
          }
        }
      }
  
      @include it("tabular-nums") {
        @include assert {
          @include output {
            @include tabular-nums;
          }
  
          @include expect {
            font-variant-numeric: tabular-nums;
          }
        }
      }
  
      @include it("diagonal-fractions") {
        @include assert {
          @include output {
            @include diagonal-fractions;
          }
  
          @include expect {
            font-variant-numeric: diagonal-fractions;
          }
        }
      }
  
      @include it("stacked-fractions") {
        @include assert {
          @include output {
            @include stacked-fractions;
          }
  
          @include expect {
            font-variant-numeric: stacked-fractions;
          }
        }
      }
    }
  
    @include describe("RWD") {
      @include describe("SM") {
        @include it("normal-nums") {
          @include assert {
            @include output {
              @include sm\:normal-nums;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                font-variant-numeric: normal;
              }
            }
          }
        }
  
        @include it("ordinal") {
          @include assert {
            @include output {
              @include sm\:ordinal;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                font-variant-numeric: ordinal;
              }
            }
          }
        }
  
        @include it("slashed-zero") {
          @include assert {
            @include output {
              @include sm\:slashed-zero;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                font-variant-numeric: slashed-zero;
              }
            }
          }
        }
  
        @include it("lining-nums") {
          @include assert {
            @include output {
              @include sm\:lining-nums;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                font-variant-numeric: lining-nums;
              }
            }
          }
        }
  
        @include it("oldstyle-nums") {
          @include assert {
            @include output {
              @include sm\:oldstyle-nums;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                font-variant-numeric: oldstyle-nums;
              }
            }
          }
        }
  
        @include it("proportional-nums") {
          @include assert {
            @include output {
              @include sm\:proportional-nums;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                font-variant-numeric: proportional-nums;
              }
            }
          }
        }
  
        @include it("tabular-nums") {
          @include assert {
            @include output {
              @include sm\:tabular-nums;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                font-variant-numeric: tabular-nums;
              }
            }
          }
        }
  
        @include it("diagonal-fractions") {
          @include assert {
            @include output {
              @include sm\:diagonal-fractions;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                font-variant-numeric: diagonal-fractions;
              }
            }
          }
        }
  
        @include it("stacked-fractions") {
          @include assert {
            @include output {
              @include sm\:stacked-fractions;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                font-variant-numeric: stacked-fractions;
              }
            }
          }
        }
      }
  
      @include describe("MD") {
        @include it("normal-nums") {
          @include assert {
            @include output {
              @include md\:normal-nums;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                font-variant-numeric: normal;
              }
            }
          }
        }
  
        @include it("ordinal") {
          @include assert {
            @include output {
              @include md\:ordinal;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                font-variant-numeric: ordinal;
              }
            }
          }
        }
  
        @include it("slashed-zero") {
          @include assert {
            @include output {
              @include md\:slashed-zero;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                font-variant-numeric: slashed-zero;
              }
            }
          }
        }
  
        @include it("lining-nums") {
          @include assert {
            @include output {
              @include md\:lining-nums;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                font-variant-numeric: lining-nums;
              }
            }
          }
        }
  
        @include it("oldstyle-nums") {
          @include assert {
            @include output {
              @include md\:oldstyle-nums;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                font-variant-numeric: oldstyle-nums;
              }
            }
          }
        }
  
        @include it("proportional-nums") {
          @include assert {
            @include output {
              @include md\:proportional-nums;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                font-variant-numeric: proportional-nums;
              }
            }
          }
        }
  
        @include it("tabular-nums") {
          @include assert {
            @include output {
              @include md\:tabular-nums;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                font-variant-numeric: tabular-nums;
              }
            }
          }
        }
  
        @include it("diagonal-fractions") {
          @include assert {
            @include output {
              @include md\:diagonal-fractions;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                font-variant-numeric: diagonal-fractions;
              }
            }
          }
        }
  
        @include it("stacked-fractions") {
          @include assert {
            @include output {
              @include md\:stacked-fractions;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                font-variant-numeric: stacked-fractions;
              }
            }
          }
        }
      }
  
      @include describe("LG") {
        @include it("normal-nums") {
          @include assert {
            @include output {
              @include lg\:normal-nums;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                font-variant-numeric: normal;
              }
            }
          }
        }
  
        @include it("ordinal") {
          @include assert {
            @include output {
              @include lg\:ordinal;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                font-variant-numeric: ordinal;
              }
            }
          }
        }
  
        @include it("slashed-zero") {
          @include assert {
            @include output {
              @include lg\:slashed-zero;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                font-variant-numeric: slashed-zero;
              }
            }
          }
        }
  
        @include it("lining-nums") {
          @include assert {
            @include output {
              @include lg\:lining-nums;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                font-variant-numeric: lining-nums;
              }
            }
          }
        }
  
        @include it("oldstyle-nums") {
          @include assert {
            @include output {
              @include lg\:oldstyle-nums;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                font-variant-numeric: oldstyle-nums;
              }
            }
          }
        }
  
        @include it("proportional-nums") {
          @include assert {
            @include output {
              @include lg\:proportional-nums;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                font-variant-numeric: proportional-nums;
              }
            }
          }
        }
  
        @include it("tabular-nums") {
          @include assert {
            @include output {
              @include lg\:tabular-nums;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                font-variant-numeric: tabular-nums;
              }
            }
          }
        }
  
        @include it("diagonal-fractions") {
          @include assert {
            @include output {
              @include lg\:diagonal-fractions;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                font-variant-numeric: diagonal-fractions;
              }
            }
          }
        }
  
        @include it("stacked-fractions") {
          @include assert {
            @include output {
              @include lg\:stacked-fractions;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                font-variant-numeric: stacked-fractions;
              }
            }
          }
        }
      }
  
      @include describe("XL") {
        @include it("normal-nums") {
          @include assert {
            @include output {
              @include xl\:normal-nums;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                font-variant-numeric: normal;
              }
            }
          }
        }
  
        @include it("ordinal") {
          @include assert {
            @include output {
              @include xl\:ordinal;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                font-variant-numeric: ordinal;
              }
            }
          }
        }
  
        @include it("slashed-zero") {
          @include assert {
            @include output {
              @include xl\:slashed-zero;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                font-variant-numeric: slashed-zero;
              }
            }
          }
        }
  
        @include it("lining-nums") {
          @include assert {
            @include output {
              @include xl\:lining-nums;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                font-variant-numeric: lining-nums;
              }
            }
          }
        }
  
        @include it("oldstyle-nums") {
          @include assert {
            @include output {
              @include xl\:oldstyle-nums;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                font-variant-numeric: oldstyle-nums;
              }
            }
          }
        }
  
        @include it("proportional-nums") {
          @include assert {
            @include output {
              @include xl\:proportional-nums;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                font-variant-numeric: proportional-nums;
              }
            }
          }
        }
  
        @include it("tabular-nums") {
          @include assert {
            @include output {
              @include xl\:tabular-nums;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                font-variant-numeric: tabular-nums;
              }
            }
          }
        }
  
        @include it("diagonal-fractions") {
          @include assert {
            @include output {
              @include xl\:diagonal-fractions;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                font-variant-numeric: diagonal-fractions;
              }
            }
          }
        }
  
        @include it("stacked-fractions") {
          @include assert {
            @include output {
              @include xl\:stacked-fractions;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                font-variant-numeric: stacked-fractions;
              }
            }
          }
        }
      }
  
      @include describe("2XL") {
        @include it("normal-nums") {
          @include assert {
            @include output {
              @include \2xl\:normal-nums;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                font-variant-numeric: normal;
              }
            }
          }
        }
  
        @include it("ordinal") {
          @include assert {
            @include output {
              @include \2xl\:ordinal;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                font-variant-numeric: ordinal;
              }
            }
          }
        }
  
        @include it("slashed-zero") {
          @include assert {
            @include output {
              @include \2xl\:slashed-zero;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                font-variant-numeric: slashed-zero;
              }
            }
          }
        }
  
        @include it("lining-nums") {
          @include assert {
            @include output {
              @include \2xl\:lining-nums;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                font-variant-numeric: lining-nums;
              }
            }
          }
        }
  
        @include it("oldstyle-nums") {
          @include assert {
            @include output {
              @include \2xl\:oldstyle-nums;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                font-variant-numeric: oldstyle-nums;
              }
            }
          }
        }
  
        @include it("proportional-nums") {
          @include assert {
            @include output {
              @include \2xl\:proportional-nums;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                font-variant-numeric: proportional-nums;
              }
            }
          }
        }
  
        @include it("tabular-nums") {
          @include assert {
            @include output {
              @include \2xl\:tabular-nums;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                font-variant-numeric: tabular-nums;
              }
            }
          }
        }
  
        @include it("diagonal-fractions") {
          @include assert {
            @include output {
              @include \2xl\:diagonal-fractions;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                font-variant-numeric: diagonal-fractions;
              }
            }
          }
        }
  
        @include it("stacked-fractions") {
          @include assert {
            @include output {
              @include \2xl\:stacked-fractions;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                font-variant-numeric: stacked-fractions;
              }
            }
          }
        }
      }
    }
  }
  
  @include describe("Letter Spacing") {
    @include describe("Basic") {
      @include it("tracking-tighter") {
        @include assert {
          @include output {
            @include tracking-tighter;
          }
  
          @include expect {
            letter-spacing: -0.05em;
          }
        }
      }
  
      @include it("tracking-tight") {
        @include assert {
          @include output {
            @include tracking-tight;
          }
  
          @include expect {
            letter-spacing: -0.025em;
          }
        }
      }
  
      @include it("tracking-normal") {
        @include assert {
          @include output {
            @include tracking-normal;
          }
  
          @include expect {
            letter-spacing: 0em;
          }
        }
      }
  
      @include it("tracking-wide") {
        @include assert {
          @include output {
            @include tracking-wide;
          }
  
          @include expect {
            letter-spacing: 0.025em;
          }
        }
      }
  
      @include it("tracking-wider") {
        @include assert {
          @include output {
            @include tracking-wider;
          }
  
          @include expect {
            letter-spacing: 0.05em;
          }
        }
      }
  
      @include it("tracking-widest") {
        @include assert {
          @include output {
            @include tracking-widest;
          }
  
          @include expect {
            letter-spacing: 0.1em;
          }
        }
      }
    }
  
    @include describe("RWD") {
      @include describe("SM") {
        @include it("tracking-(.25em)") {
          @include assert {
            @include output {
              @include sm\:tracking-(.25em);
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                letter-spacing: .25em;
              }
            }
          }
        }
      }
  
      @include describe("MD") {
        @include it("tracking-(.25em)") {
          @include assert {
            @include output {
              @include md\:tracking-(.25em);
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                letter-spacing: .25em;
              }
            }
          }
        }
      }
  
      @include describe("LG") {
        @include it("tracking-(.25em)") {
          @include assert {
            @include output {
              @include lg\:tracking-(.25em);
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                letter-spacing: .25em;
              }
            }
          }
        }
      }
  
      @include describe("XL") {
        @include it("tracking-(.25em)") {
          @include assert {
            @include output {
              @include xl\:tracking-(.25em);
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                letter-spacing: .25em;
              }
            }
          }
        }
      }
  
      @include describe("2XL") {
        @include it("tracking-(.25em)") {
          @include assert {
            @include output {
              @include \2xl\:tracking-(.25em);
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                letter-spacing: .25em;
              }
            }
          }
        }
      }
    }
  
    @include describe("Custom") {
      @include it("tracking-(.25em)") {
        @include assert {
          @include output {
            @include tracking-(.25em);
          }
  
          @include expect {
            letter-spacing: .25em;
          }
        }
      }
    }
  }
  
  @include describe("Line Clamp") {
    @include describe("Basic") {
      @include it("line-clamp-1") {
        @include assert {
          @include output {
            @include line-clamp-1;
          }
  
          @include expect {
            overflow: hidden;
            display: -webkit-box;
            -webkit-box-orient: vertical;
            -webkit-line-clamp: 1;
          }
        }
      }
  
      @include it("line-clamp-2") {
        @include assert {
          @include output {
            @include line-clamp-2;
          }
  
          @include expect {
            overflow: hidden;
            display: -webkit-box;
            -webkit-box-orient: vertical;
            -webkit-line-clamp: 2;
          }
        }
      }
  
      @include it("line-clamp-3") {
        @include assert {
          @include output {
            @include line-clamp-3;
          }
  
          @include expect {
            overflow: hidden;
            display: -webkit-box;
            -webkit-box-orient: vertical;
            -webkit-line-clamp: 3;
          }
        }
      }
  
      @include it("line-clamp-4") {
        @include assert {
          @include output {
            @include line-clamp-4;
          }
  
          @include expect {
            overflow: hidden;
            display: -webkit-box;
            -webkit-box-orient: vertical;
            -webkit-line-clamp: 4;
          }
        }
      }
  
      @include it("line-clamp-5") {
        @include assert {
          @include output {
            @include line-clamp-5;
          }
  
          @include expect {
            overflow: hidden;
            display: -webkit-box;
            -webkit-box-orient: vertical;
            -webkit-line-clamp: 5;
          }
        }
      }
  
      @include it("line-clamp-6") {
        @include assert {
          @include output {
            @include line-clamp-6;
          }
  
          @include expect {
            overflow: hidden;
            display: -webkit-box;
            -webkit-box-orient: vertical;
            -webkit-line-clamp: 6;
          }
        }
      }
  
      @include it("line-clamp-none") {
        @include assert {
          @include output {
            @include line-clamp-none;
          }
  
          @include expect {
            overflow: visible;
            display: block;
            -webkit-box-orient: horizontal;
            -webkit-line-clamp: none;
          }
        }
      }
  
      @include it("line-clamp-1") {
        @include assert {
          @include output {
            @include line-clamp-1;
          }
  
          @include expect {
            overflow: hidden;
            display: -webkit-box;
            -webkit-box-orient: vertical;
            -webkit-line-clamp: 1;
          }
        }
      }
    }
  
    @include describe("RWD") {
      @include describe("SM") {
        @include it("line-clamp-(7)") {
          @include assert {
            @include output {
              @include sm\:line-clamp-(7);
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                overflow: hidden;
                display: -webkit-box;
                -webkit-box-orient: vertical;
                -webkit-line-clamp: 7;
              }
            }
          }
        }
      }
  
      @include describe("MD") {
        @include it("line-clamp-(7)") {
          @include assert {
            @include output {
              @include md\:line-clamp-(7);
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                overflow: hidden;
                display: -webkit-box;
                -webkit-box-orient: vertical;
                -webkit-line-clamp: 7;
              }
            }
          }
        }
      }
  
      @include describe("LG") {
        @include it("line-clamp-(7)") {
          @include assert {
            @include output {
              @include lg\:line-clamp-(7);
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                overflow: hidden;
                display: -webkit-box;
                -webkit-box-orient: vertical;
                -webkit-line-clamp: 7;
              }
            }
          }
        }
      }
  
      @include describe("XL") {
        @include it("line-clamp-(7)") {
          @include assert {
            @include output {
              @include xl\:line-clamp-(7);
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                overflow: hidden;
                display: -webkit-box;
                -webkit-box-orient: vertical;
                -webkit-line-clamp: 7;
              }
            }
          }
        }
      }
  
      @include describe("2XL") {
        @include it("line-clamp-(7)") {
          @include assert {
            @include output {
              @include \2xl\:line-clamp-(7);
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                overflow: hidden;
                display: -webkit-box;
                -webkit-box-orient: vertical;
                -webkit-line-clamp: 7;
              }
            }
          }
        }
      }
    }
  
    @include describe("Custom") {
      @include it("line-clamp-(7)") {
        @include assert {
          @include output {
            @include line-clamp-(7);
          }
  
          @include expect {
            overflow: hidden;
            display: -webkit-box;
            -webkit-box-orient: vertical;
            -webkit-line-clamp: 7;
          }
        }
      }
    }
  }

  @include describe("Line Height") {
    @include describe("Basic") {
      @include it("leading-3") {
        @include assert {
          @include output {
            @include leading-3;
          }
  
          @include expect {
            line-height: 0.75rem;
          }
        }
      }
  
      @include it("leading-4") {
        @include assert {
          @include output {
            @include leading-4;
          }
  
          @include expect {
            line-height: 1rem;
          }
        }
      }
  
      @include it("leading-5") {
        @include assert {
          @include output {
            @include leading-5;
          }
  
          @include expect {
            line-height: 1.25rem;
          }
        }
      }
  
      @include it("leading-6") {
        @include assert {
          @include output {
            @include leading-6;
          }
  
          @include expect {
            line-height: 1.5rem;
          }
        }
      }
  
      @include it("leading-7") {
        @include assert {
          @include output {
            @include leading-7;
          }
  
          @include expect {
            line-height: 1.75rem;
          }
        }
      }
  
      @include it("leading-8") {
        @include assert {
          @include output {
            @include leading-8;
          }
  
          @include expect {
            line-height: 2rem;
          }
        }
      }
  
      @include it("leading-9") {
        @include assert {
          @include output {
            @include leading-9;
          }
  
          @include expect {
            line-height: 2.25rem;
          }
        }
      }
  
      @include it("leading-10") {
        @include assert {
          @include output {
            @include leading-10;
          }
  
          @include expect {
            line-height: 2.5rem;
          }
        }
      }
  
      @include it("leading-none") {
        @include assert {
          @include output {
            @include leading-none;
          }
  
          @include expect {
            line-height: 1;
          }
        }
      }
  
      @include it("leading-tight") {
        @include assert {
          @include output {
            @include leading-tight;
          }
  
          @include expect {
            line-height: 1.25;
          }
        }
      }
  
      @include it("leading-snug") {
        @include assert {
          @include output {
            @include leading-snug;
          }
  
          @include expect {
            line-height: 1.375;
          }
        }
      }
  
      @include it("leading-normal") {
        @include assert {
          @include output {
            @include leading-normal;
          }
  
          @include expect {
            line-height: 1.5;
          }
        }
      }
  
      @include it("leading-relaxed") {
        @include assert {
          @include output {
            @include leading-relaxed;
          }
  
          @include expect {
            line-height: 1.625;
          }
        }
      }
  
      @include it("leading-loose") {
        @include assert {
          @include output {
            @include leading-loose;
          }
  
          @include expect {
            line-height: 2;
          }
        }
      }
    }
  
    @include describe("RWD") {
      @include describe("SM") {
        @include it("leading-(3rem)") {
          @include assert {
            @include output {
              @include sm\:leading-(3rem);
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                line-height: 3rem;
              }
            }
          }
        }
      }
  
      @include describe("MD") {
        @include it("leading-(3rem)") {
          @include assert {
            @include output {
              @include md\:leading-(3rem);
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                line-height: 3rem;
              }
            }
          }
        }
      }
  
      @include describe("LG") {
        @include it("leading-(3rem)") {
          @include assert {
            @include output {
              @include lg\:leading-(3rem);
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                line-height: 3rem;
              }
            }
          }
        }
      }
  
      @include describe("XL") {
        @include it("leading-(3rem)") {
          @include assert {
            @include output {
              @include xl\:leading-(3rem);
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                line-height: 3rem;
              }
            }
          }
        }
      }
  
      @include describe("2XL") {
        @include it("leading-(3rem)") {
          @include assert {
            @include output {
              @include \2xl\:leading-(3rem);
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                line-height: 3rem;
              }
            }
          }
        }
      }
    }
  
    @include describe("Custom") {
      @include it("leading-(3rem)") {
        @include assert {
          @include output {
            @include leading-(3rem);
          }
  
          @include expect {
            line-height: 3rem;
          }
        }
      }
    }
  }
  
  @include describe("List Style Image") {
    @include describe("Basic") {
      @include it("list-image-none") {
        @include assert {
          @include output {
            @include list-image-none;
          }
  
          @include expect {
            list-style-image: none;
          }
        }
      }
    }
  
    @include describe("RWD") {
      @include describe("SM") {
        @include it("list-image-(url(checkmark.png))") {
          @include assert {
            @include output {
              @include sm\:list-image-(url(checkmark.png));
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                list-style-image: url(checkmark.png);
              }
            }
          }
        }
      }
  
      @include describe("MD") {
        @include it("list-image-(url(checkmark.png))") {
          @include assert {
            @include output {
              @include md\:list-image-(url(checkmark.png));
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                list-style-image: url(checkmark.png);
              }
            }
          }
        }
      }
  
      @include describe("LG") {
        @include it("list-image-(url(checkmark.png))") {
          @include assert {
            @include output {
              @include lg\:list-image-(url(checkmark.png));
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                list-style-image: url(checkmark.png);
              }
            }
          }
        }
      }
  
      @include describe("XL") {
        @include it("list-image-(url(checkmark.png))") {
          @include assert {
            @include output {
              @include xl\:list-image-(url(checkmark.png));
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                list-style-image: url(checkmark.png);
              }
            }
          }
        }
      }
  
      @include describe("2XL") {
        @include it("list-image-(url(checkmark.png))") {
          @include assert {
            @include output {
              @include \2xl\:list-image-(url(checkmark.png));
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                list-style-image: url(checkmark.png);
              }
            }
          }
        }
      }
    }
  
    @include describe("Custom") {
      @include it("list-image-(url(checkmark.png))") {
        @include assert {
          @include output {
            @include list-image-(url(checkmark.png));
          }
  
          @include expect {
            list-style-image: url(checkmark.png);
          }
        }
      }
    }
  }
  
  @include describe("List Style Position") {
    @include describe("Basic") {
      @include it("list-inside") {
        @include assert {
          @include output {
            @include list-inside;
          }
  
          @include expect {
            list-style-position: inside;
          }
        }
      }
  
      @include it("list-outside") {
        @include assert {
          @include output {
            @include list-outside;
          }
  
          @include expect {
            list-style-position: outside;
          }
        }
      }
    }
  
    @include describe("RWD") {
      @include describe("SM") {
        @include it("list-inside") {
          @include assert {
            @include output {
              @include sm\:list-inside;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                list-style-position: inside;
              }
            }
          }
        }
  
        @include it("list-outside") {
          @include assert {
            @include output {
              @include sm\:list-outside;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                list-style-position: outside;
              }
            }
          }
        }
      }
  
      @include describe("MD") {
        @include it("list-inside") {
          @include assert {
            @include output {
              @include md\:list-inside;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                list-style-position: inside;
              }
            }
          }
        }
  
        @include it("list-outside") {
          @include assert {
            @include output {
              @include md\:list-outside;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                list-style-position: outside;
              }
            }
          }
        }
      }
  
      @include describe("LG") {
        @include it("list-inside") {
          @include assert {
            @include output {
              @include lg\:list-inside;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                list-style-position: inside;
              }
            }
          }
        }
  
        @include it("list-outside") {
          @include assert {
            @include output {
              @include lg\:list-outside;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                list-style-position: outside;
              }
            }
          }
        }
      }
  
      @include describe("XL") {
        @include it("list-inside") {
          @include assert {
            @include output {
              @include xl\:list-inside;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                list-style-position: inside;
              }
            }
          }
        }
  
        @include it("list-outside") {
          @include assert {
            @include output {
              @include xl\:list-outside;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                list-style-position: outside;
              }
            }
          }
        }
      }
  
      @include describe("2XL") {
        @include it("list-inside") {
          @include assert {
            @include output {
              @include \2xl\:list-inside;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                list-style-position: inside;
              }
            }
          }
        }
  
        @include it("list-outside") {
          @include assert {
            @include output {
              @include \2xl\:list-outside;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                list-style-position: outside;
              }
            }
          }
        }
      }
    }
  }
  
  @include describe("List Style Type") {
    @include describe("Basic") {
      @include it("list-none") {
        @include assert {
          @include output {
            @include list-none;
          }
  
          @include expect {
            list-style-type: none;
          }
        }
      }
  
      @include it("list-disc") {
        @include assert {
          @include output {
            @include list-disc;
          }
  
          @include expect {
            list-style-type: disc;
          }
        }
      }
  
      @include it("list-decimal") {
        @include assert {
          @include output {
            @include list-decimal;
          }
  
          @include expect {
            list-style-type: decimal;
          }
        }
      }
    }
  
    @include describe("RWD") {
      @include describe("SM") {
        @include it("list-(upper-roman)") {
          @include assert {
            @include output {
              @include sm\:list-(upper-roman);
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                list-style-type: upper-roman;
              }
            }
          }
        }
      }
  
      @include describe("MD") {
        @include it("list-(upper-roman)") {
          @include assert {
            @include output {
              @include md\:list-(upper-roman);
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                list-style-type: upper-roman;
              }
            }
          }
        }
      }
  
      @include describe("LG") {
        @include it("list-(upper-roman)") {
          @include assert {
            @include output {
              @include lg\:list-(upper-roman);
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                list-style-type: upper-roman;
              }
            }
          }
        }
      }
  
      @include describe("XL") {
        @include it("list-(upper-roman)") {
          @include assert {
            @include output {
              @include xl\:list-(upper-roman);
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                list-style-type: upper-roman;
              }
            }
          }
        }
      }
  
      @include describe("2XL") {
        @include it("list-(upper-roman)") {
          @include assert {
            @include output {
              @include \2xl\:list-(upper-roman);
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                list-style-type: upper-roman;
              }
            }
          }
        }
      }
    }
  
    @include describe("Custom") {
      @include it("list-(upper-roman)") {
        @include assert {
          @include output {
            @include list-(upper-roman);
          }
  
          @include expect {
            list-style-type: upper-roman;
          }
        }
      }
    }
  }
  
  @include describe("Text Align") {
    @include describe("Basic") {
      @include it("text-left") {
        @include assert {
          @include output {
            @include text-left;
          }
  
          @include expect {
            text-align: left;
          }
        }
      }
  
      @include it("text-center") {
        @include assert {
          @include output {
            @include text-center;
          }
  
          @include expect {
            text-align: center;
          }
        }
      }
  
      @include it("text-right") {
        @include assert {
          @include output {
            @include text-right;
          }
  
          @include expect {
            text-align: right;
          }
        }
      }
  
      @include it("text-justify") {
        @include assert {
          @include output {
            @include text-justify;
          }
  
          @include expect {
            text-align: justify;
          }
        }
      }
  
      @include it("text-start") {
        @include assert {
          @include output {
            @include text-start;
          }
  
          @include expect {
            text-align: start;
          }
        }
      }
  
      @include it("text-end") {
        @include assert {
          @include output {
            @include text-end;
          }
  
          @include expect {
            text-align: end;
          }
        }
      }
    }
  
    @include describe("RWD") {
      @include describe("SM") {
        @include it("text-left") {
          @include assert {
            @include output {
              @include sm\:text-left;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                text-align: left;
              }
            }
          }
        }
  
        @include it("text-center") {
          @include assert {
            @include output {
              @include sm\:text-center;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                text-align: center;
              }
            }
          }
        }
  
        @include it("text-right") {
          @include assert {
            @include output {
              @include sm\:text-right;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                text-align: right;
              }
            }
          }
        }
  
        @include it("text-justify") {
          @include assert {
            @include output {
              @include sm\:text-justify;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                text-align: justify;
              }
            }
          }
        }
  
        @include it("text-start") {
          @include assert {
            @include output {
              @include sm\:text-start;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                text-align: start;
              }
            }
          }
        }
  
        @include it("text-end") {
          @include assert {
            @include output {
              @include sm\:text-end;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-SM) {
                text-align: end;
              }
            }
          }
        }
      }
  
      @include describe("MD") {
        @include it("text-left") {
          @include assert {
            @include output {
              @include md\:text-left;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                text-align: left;
              }
            }
          }
        }
  
        @include it("text-center") {
          @include assert {
            @include output {
              @include md\:text-center;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                text-align: center;
              }
            }
          }
        }
  
        @include it("text-right") {
          @include assert {
            @include output {
              @include md\:text-right;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                text-align: right;
              }
            }
          }
        }
  
        @include it("text-justify") {
          @include assert {
            @include output {
              @include md\:text-justify;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                text-align: justify;
              }
            }
          }
        }
  
        @include it("text-start") {
          @include assert {
            @include output {
              @include md\:text-start;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                text-align: start;
              }
            }
          }
        }
  
        @include it("text-end") {
          @include assert {
            @include output {
              @include md\:text-end;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-MD) {
                text-align: end;
              }
            }
          }
        }
      }
  
      @include describe("LG") {
        @include it("text-left") {
          @include assert {
            @include output {
              @include lg\:text-left;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                text-align: left;
              }
            }
          }
        }
  
        @include it("text-center") {
          @include assert {
            @include output {
              @include lg\:text-center;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                text-align: center;
              }
            }
          }
        }
  
        @include it("text-right") {
          @include assert {
            @include output {
              @include lg\:text-right;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                text-align: right;
              }
            }
          }
        }
  
        @include it("text-justify") {
          @include assert {
            @include output {
              @include lg\:text-justify;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                text-align: justify;
              }
            }
          }
        }
  
        @include it("text-start") {
          @include assert {
            @include output {
              @include lg\:text-start;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                text-align: start;
              }
            }
          }
        }
  
        @include it("text-end") {
          @include assert {
            @include output {
              @include lg\:text-end;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-LG) {
                text-align: end;
              }
            }
          }
        }
      }
  
      @include describe("XL") {
        @include it("text-left") {
          @include assert {
            @include output {
              @include xl\:text-left;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                text-align: left;
              }
            }
          }
        }
  
        @include it("text-center") {
          @include assert {
            @include output {
              @include xl\:text-center;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                text-align: center;
              }
            }
          }
        }
  
        @include it("text-right") {
          @include assert {
            @include output {
              @include xl\:text-right;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                text-align: right;
              }
            }
          }
        }
  
        @include it("text-justify") {
          @include assert {
            @include output {
              @include xl\:text-justify;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                text-align: justify;
              }
            }
          }
        }
  
        @include it("text-start") {
          @include assert {
            @include output {
              @include xl\:text-start;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                text-align: start;
              }
            }
          }
        }
  
        @include it("text-end") {
          @include assert {
            @include output {
              @include xl\:text-end;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-XL) {
                text-align: end;
              }
            }
          }
        }
      }
  
      @include describe("2XL") {
        @include it("text-left") {
          @include assert {
            @include output {
              @include \2xl\:text-left;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                text-align: left;
              }
            }
          }
        }
  
        @include it("text-center") {
          @include assert {
            @include output {
              @include \2xl\:text-center;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                text-align: center;
              }
            }
          }
        }
  
        @include it("text-right") {
          @include assert {
            @include output {
              @include \2xl\:text-right;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                text-align: right;
              }
            }
          }
        }
  
        @include it("text-justify") {
          @include assert {
            @include output {
              @include \2xl\:text-justify;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                text-align: justify;
              }
            }
          }
        }
  
        @include it("text-start") {
          @include assert {
            @include output {
              @include \2xl\:text-start;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                text-align: start;
              }
            }
          }
        }
  
        @include it("text-end") {
          @include assert {
            @include output {
              @include \2xl\:text-end;
            }
  
            @include expect {
              @media (min-width: $__MEDIA-2XL) {
                text-align: end;
              }
            }
          }
        }
      }
    }
  }
}

@include describe("Text Color") {
	@include describe("Basic") {
		@include it("text-inherit") {
			@include assert {
				@include output {
					@include text-inherit;
				}

				@include expect {
          color: inherit;
				}
			}
		}

    @include it("text-current") {
			@include assert {
				@include output {
					@include text-current;
				}

				@include expect {
          color: currentColor;
				}
			}
		}

    @include it("text-transparent") {
			@include assert {
				@include output {
					@include text-transparent;
				}

				@include expect {
          color: transparent;
				}
			}
		}

    @include it("text-black") {
			@include assert {
				@include output {
					@include text-black;
				}

				@include expect {
          color: black;
				}
			}
		}

    @include it("text-white") {
			@include assert {
				@include output {
					@include text-white;
				}

				@include expect {
          color: white;
				}
			}
		}

    // 
	}

	@include describe("RWD") {
		@include describe("SM") {
			@include it("群組二") {
				@include assert {
					@include output {
						@include sm\:群組二;
					}

					@include expect {
						@media (min-width: $__MEDIA-SM) {
							群組二: 1.3333333333;
						}
					}
				}
			}
		}
	}

	@include describe("Custom") {
		@include it("群組二") {
			@include assert {
				@include output {
					@include 群組二;
				}

				@include expect {
					群組二: 1.3333333333;
				}
			}
		}
	}
}




