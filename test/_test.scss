@use "../node_modules/sass-true" as *;
@import "./tailwind_mixin_v3.4.1.scss";

// api usage: https://www.oddbird.net/true/docs/
@include describe("Typography") {
	@include describe("Font Family") {
		@include describe("Basic") {
			@include it("font-sans") {
				@include assert {
					@include output {
						@include font-sans;
					}

					@include expect {
						font-family: ui-sans-serif, system-ui, sans-serif,
							"Apple Color Emoji", "Segoe UI Emoji",
							"Segoe UI Symbol", "Noto Color Emoji";
					}
				}
			}

			@include it("font-serif") {
				@include assert {
					@include output {
						@include font-serif;
					}

					@include expect {
						font-family: ui-serif, Georgia, Cambria,
							"Times New Roman", Times, serif;
					}
				}
			}

			@include it("font-mono") {
				@include assert {
					@include output {
						@include font-mono;
					}

					@include expect {
						font-family: ui-monospace, SFMono-Regular, Menlo, Monaco,
							Consolas, "Liberation Mono", "Courier New",
							monospace;
					}
				}
			}
		}

		@include describe("RWD") {
			@include describe("SM") {
				@include it("font-family-('Open Sans')") {
					@include assert {
						@include output {
							@include sm\:font-family-("Open Sans");
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								font-family: "Open Sans";
							}
						}
					}
				}
			}

			@include describe("MD") {
				@include it("font-family-('Open Sans')") {
					@include assert {
						@include output {
							@include md\:font-family-("Open Sans");
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								font-family: "Open Sans";
							}
						}
					}
				}
			}

			@include describe("LG") {
				@include it("font-family-('Open Sans')") {
					@include assert {
						@include output {
							@include lg\:font-family-("Open Sans");
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								font-family: "Open Sans";
							}
						}
					}
				}
			}

			@include describe("XL") {
				@include it("font-family-('Open Sans')") {
					@include assert {
						@include output {
							@include xl\:font-family-("Open Sans");
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								font-family: "Open Sans";
							}
						}
					}
				}
			}

			@include describe("2XL") {
				@include it("font-family-('Open Sans')") {
					@include assert {
						@include output {
							@include \2xl\:font-family-("Open Sans");
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								font-family: "Open Sans";
							}
						}
					}
				}
			}
		}

		@include describe("Custom") {
			@include it("font-family-('Open Sans')") {
				@include assert {
					@include output {
						@include font-family-("Open Sans");
					}

					@include expect {
						font-family: "Open Sans";
					}
				}
			}
		}
	}

	@include describe("Font Size") {
		@include describe("Basic") {
			@include it("text-xs") {
				@include assert {
					@include output {
						@include text-xs;
					}

					@include expect {
						font-size: 0.75rem;
						line-height: 1rem;
					}
				}
			}

			@include it("text-sm") {
				@include assert {
					@include output {
						@include text-sm;
					}

					@include expect {
						font-size: 0.875rem;
						line-height: 1.25rem;
					}
				}
			}

			@include it("text-base") {
				@include assert {
					@include output {
						@include text-base;
					}

					@include expect {
						font-size: 1rem;
						line-height: 1.5rem;
					}
				}
			}

			@include it("text-lg") {
				@include assert {
					@include output {
						@include text-lg;
					}

					@include expect {
						font-size: 1.125rem;
						line-height: 1.75rem;
					}
				}
			}

			@include it("text-xl") {
				@include assert {
					@include output {
						@include text-xl;
					}

					@include expect {
						font-size: 1.25rem;
						line-height: 1.75rem;
					}
				}
			}

			@include it("text-2xl") {
				@include assert {
					@include output {
						@include text-2xl;
					}

					@include expect {
						font-size: 1.5rem;
						line-height: 2rem;
					}
				}
			}

			@include it("text-3xl") {
				@include assert {
					@include output {
						@include text-3xl;
					}

					@include expect {
						font-size: 1.875rem;
						line-height: 2.25rem;
					}
				}
			}

			@include it("text-4xl") {
				@include assert {
					@include output {
						@include text-4xl;
					}

					@include expect {
						font-size: 2.25rem;
						line-height: 2.5rem;
					}
				}
			}

			@include it("text-5xl") {
				@include assert {
					@include output {
						@include text-5xl;
					}

					@include expect {
						font-size: 3rem;
						line-height: 1;
					}
				}
			}

			@include it("text-6xl") {
				@include assert {
					@include output {
						@include text-6xl;
					}

					@include expect {
						font-size: 3.75rem;
						line-height: 1;
					}
				}
			}

			@include it("text-7xl") {
				@include assert {
					@include output {
						@include text-7xl;
					}

					@include expect {
						font-size: 4.5rem;
						line-height: 1;
					}
				}
			}

			@include it("text-8xl") {
				@include assert {
					@include output {
						@include text-8xl;
					}

					@include expect {
						font-size: 6rem;
						line-height: 1;
					}
				}
			}

			@include it("text-9xl") {
				@include assert {
					@include output {
						@include text-9xl;
					}

					@include expect {
						font-size: 8rem;
						line-height: 1;
					}
				}
			}
		}

		@include describe("RWD") {
			@include describe("SM") {
				@include it("text-(14px)") {
					@include assert {
						@include output {
							@include sm\:text-(14px);
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								font-size: 14px;
							}
						}
					}
				}
			}

			@include describe("MD") {
				@include it("text-(14px)") {
					@include assert {
						@include output {
							@include md\:text-(14px);
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								font-size: 14px;
							}
						}
					}
				}
			}

			@include describe("LG") {
				@include it("text-(14px)") {
					@include assert {
						@include output {
							@include lg\:text-(14px);
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								font-size: 14px;
							}
						}
					}
				}
			}

			@include describe("XL") {
				@include it("text-(14px)") {
					@include assert {
						@include output {
							@include xl\:text-(14px);
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								font-size: 14px;
							}
						}
					}
				}
			}

			@include describe("2XL") {
				@include it("text-(14px)") {
					@include assert {
						@include output {
							@include \2xl\:text-(14px);
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								font-size: 14px;
							}
						}
					}
				}
			}
		}

		@include describe("Custom") {
			@include it("text-(14px)") {
				@include assert {
					@include output {
						@include text-(14px);
					}

					@include expect {
						font-size: 14px;
					}
				}
			}
		}
	}

	@include describe("Font Smoothing") {
		@include describe("Basic") {
			@include it("antialiased") {
				@include assert {
					@include output {
						@include antialiased;
					}

					@include expect {
						-webkit-font-smoothing: antialiased;
						-moz-osx-font-smoothing: grayscale;
					}
				}
			}

			@include it("subpixel-antialiased") {
				@include assert {
					@include output {
						@include subpixel-antialiased;
					}

					@include expect {
						-webkit-font-smoothing: auto;
						-moz-osx-font-smoothing: auto;
					}
				}
			}
		}

		@include describe("RWD") {
			@include describe("SM") {
				@include it("antialiased") {
					@include assert {
						@include output {
							@include sm\:antialiased;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								-webkit-font-smoothing: antialiased;
								-moz-osx-font-smoothing: grayscale;
							}
						}
					}
				}

				@include it("subpixel-antialiased") {
					@include assert {
						@include output {
							@include sm\:subpixel-antialiased;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								-webkit-font-smoothing: auto;
								-moz-osx-font-smoothing: auto;
							}
						}
					}
				}
			}

			@include describe("MD") {
				@include it("antialiased") {
					@include assert {
						@include output {
							@include md\:antialiased;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								-webkit-font-smoothing: antialiased;
								-moz-osx-font-smoothing: grayscale;
							}
						}
					}
				}

				@include it("subpixel-antialiased") {
					@include assert {
						@include output {
							@include md\:subpixel-antialiased;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								-webkit-font-smoothing: auto;
								-moz-osx-font-smoothing: auto;
							}
						}
					}
				}
			}

			@include describe("LG") {
				@include it("antialiased") {
					@include assert {
						@include output {
							@include lg\:antialiased;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								-webkit-font-smoothing: antialiased;
								-moz-osx-font-smoothing: grayscale;
							}
						}
					}
				}

				@include it("subpixel-antialiased") {
					@include assert {
						@include output {
							@include lg\:subpixel-antialiased;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								-webkit-font-smoothing: auto;
								-moz-osx-font-smoothing: auto;
							}
						}
					}
				}
			}

			@include describe("XL") {
				@include it("antialiased") {
					@include assert {
						@include output {
							@include xl\:antialiased;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								-webkit-font-smoothing: antialiased;
								-moz-osx-font-smoothing: grayscale;
							}
						}
					}
				}

				@include it("subpixel-antialiased") {
					@include assert {
						@include output {
							@include xl\:subpixel-antialiased;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								-webkit-font-smoothing: auto;
								-moz-osx-font-smoothing: auto;
							}
						}
					}
				}
			}

			@include describe("2XL") {
				@include it("antialiased") {
					@include assert {
						@include output {
							@include \2xl\:antialiased;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								-webkit-font-smoothing: antialiased;
								-moz-osx-font-smoothing: grayscale;
							}
						}
					}
				}

				@include it("subpixel-antialiased") {
					@include assert {
						@include output {
							@include \2xl\:subpixel-antialiased;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								-webkit-font-smoothing: auto;
								-moz-osx-font-smoothing: auto;
							}
						}
					}
				}
			}
		}
	}

	@include describe("Font Style") {
		@include describe("Basic") {
			@include it("italic") {
				@include assert {
					@include output {
						@include italic;
					}

					@include expect {
						font-style: italic;
					}
				}
			}

			@include it("not-italic") {
				@include assert {
					@include output {
						@include not-italic;
					}

					@include expect {
						font-style: normal;
					}
				}
			}
		}

		@include describe("RWD") {
			@include describe("SM") {
				@include it("italic") {
					@include assert {
						@include output {
							@include sm\:italic;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								font-style: italic;
							}
						}
					}
				}

				@include it("not-italic") {
					@include assert {
						@include output {
							@include sm\:not-italic;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								font-style: normal;
							}
						}
					}
				}
			}

			@include describe("MD") {
				@include it("italic") {
					@include assert {
						@include output {
							@include md\:italic;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								font-style: italic;
							}
						}
					}
				}

				@include it("not-italic") {
					@include assert {
						@include output {
							@include md\:not-italic;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								font-style: normal;
							}
						}
					}
				}
			}

			@include describe("LG") {
				@include it("italic") {
					@include assert {
						@include output {
							@include lg\:italic;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								font-style: italic;
							}
						}
					}
				}

				@include it("not-italic") {
					@include assert {
						@include output {
							@include lg\:not-italic;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								font-style: normal;
							}
						}
					}
				}
			}

			@include describe("XL") {
				@include it("italic") {
					@include assert {
						@include output {
							@include xl\:italic;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								font-style: italic;
							}
						}
					}
				}

				@include it("not-italic") {
					@include assert {
						@include output {
							@include xl\:not-italic;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								font-style: normal;
							}
						}
					}
				}
			}

			@include describe("2XL") {
				@include it("italic") {
					@include assert {
						@include output {
							@include \2xl\:italic;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								font-style: italic;
							}
						}
					}
				}

				@include it("not-italic") {
					@include assert {
						@include output {
							@include \2xl\:not-italic;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								font-style: normal;
							}
						}
					}
				}
			}
		}
	}

	@include describe("Font Weight") {
		@include describe("Basic") {
			@include it("font-thin") {
				@include assert {
					@include output {
						@include font-thin;
					}

					@include expect {
						font-weight: 100;
					}
				}
			}

			@include it("font-extralight") {
				@include assert {
					@include output {
						@include font-extralight;
					}

					@include expect {
						font-weight: 200;
					}
				}
			}

			@include it("font-light") {
				@include assert {
					@include output {
						@include font-light;
					}

					@include expect {
						font-weight: 300;
					}
				}
			}

			@include it("font-normal") {
				@include assert {
					@include output {
						@include font-normal;
					}

					@include expect {
						font-weight: 400;
					}
				}
			}

			@include it("font-medium") {
				@include assert {
					@include output {
						@include font-medium;
					}

					@include expect {
						font-weight: 500;
					}
				}
			}

			@include it("font-semibold") {
				@include assert {
					@include output {
						@include font-semibold;
					}

					@include expect {
						font-weight: 600;
					}
				}
			}

			@include it("font-bold") {
				@include assert {
					@include output {
						@include font-bold;
					}

					@include expect {
						font-weight: 700;
					}
				}
			}

			@include it("font-extrabold") {
				@include assert {
					@include output {
						@include font-extrabold;
					}

					@include expect {
						font-weight: 800;
					}
				}
			}

			@include it("font-black") {
				@include assert {
					@include output {
						@include font-black;
					}

					@include expect {
						font-weight: 900;
					}
				}
			}
		}

		@include describe("RWD") {
			@include describe("SM") {
				@include it("font-thin") {
					@include assert {
						@include output {
							@include sm\:font-thin;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								font-weight: 100;
							}
						}
					}
				}

				@include it("font-extralight") {
					@include assert {
						@include output {
							@include sm\:font-extralight;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								font-weight: 200;
							}
						}
					}
				}

				@include it("font-light") {
					@include assert {
						@include output {
							@include sm\:font-light;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								font-weight: 300;
							}
						}
					}
				}

				@include it("font-normal") {
					@include assert {
						@include output {
							@include sm\:font-normal;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								font-weight: 400;
							}
						}
					}
				}

				@include it("font-medium") {
					@include assert {
						@include output {
							@include sm\:font-medium;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								font-weight: 500;
							}
						}
					}
				}

				@include it("font-semibold") {
					@include assert {
						@include output {
							@include sm\:font-semibold;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								font-weight: 600;
							}
						}
					}
				}

				@include it("font-bold") {
					@include assert {
						@include output {
							@include sm\:font-bold;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								font-weight: 700;
							}
						}
					}
				}

				@include it("font-extrabold") {
					@include assert {
						@include output {
							@include sm\:font-extrabold;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								font-weight: 800;
							}
						}
					}
				}

				@include it("font-black") {
					@include assert {
						@include output {
							@include sm\:font-black;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								font-weight: 900;
							}
						}
					}
				}

				//
			}

			@include describe("MD") {
				@include it("font-thin") {
					@include assert {
						@include output {
							@include md\:font-thin;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								font-weight: 100;
							}
						}
					}
				}

				@include it("font-extralight") {
					@include assert {
						@include output {
							@include md\:font-extralight;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								font-weight: 200;
							}
						}
					}
				}

				@include it("font-light") {
					@include assert {
						@include output {
							@include md\:font-light;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								font-weight: 300;
							}
						}
					}
				}

				@include it("font-normal") {
					@include assert {
						@include output {
							@include md\:font-normal;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								font-weight: 400;
							}
						}
					}
				}

				@include it("font-medium") {
					@include assert {
						@include output {
							@include md\:font-medium;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								font-weight: 500;
							}
						}
					}
				}

				@include it("font-semibold") {
					@include assert {
						@include output {
							@include md\:font-semibold;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								font-weight: 600;
							}
						}
					}
				}

				@include it("font-bold") {
					@include assert {
						@include output {
							@include md\:font-bold;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								font-weight: 700;
							}
						}
					}
				}

				@include it("font-extrabold") {
					@include assert {
						@include output {
							@include md\:font-extrabold;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								font-weight: 800;
							}
						}
					}
				}

				@include it("font-black") {
					@include assert {
						@include output {
							@include md\:font-black;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								font-weight: 900;
							}
						}
					}
				}
			}

			@include describe("LG") {
				@include it("font-thin") {
					@include assert {
						@include output {
							@include lg\:font-thin;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								font-weight: 100;
							}
						}
					}
				}

				@include it("font-extralight") {
					@include assert {
						@include output {
							@include lg\:font-extralight;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								font-weight: 200;
							}
						}
					}
				}

				@include it("font-light") {
					@include assert {
						@include output {
							@include lg\:font-light;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								font-weight: 300;
							}
						}
					}
				}

				@include it("font-normal") {
					@include assert {
						@include output {
							@include lg\:font-normal;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								font-weight: 400;
							}
						}
					}
				}

				@include it("font-medium") {
					@include assert {
						@include output {
							@include lg\:font-medium;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								font-weight: 500;
							}
						}
					}
				}

				@include it("font-semibold") {
					@include assert {
						@include output {
							@include lg\:font-semibold;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								font-weight: 600;
							}
						}
					}
				}

				@include it("font-bold") {
					@include assert {
						@include output {
							@include lg\:font-bold;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								font-weight: 700;
							}
						}
					}
				}

				@include it("font-extrabold") {
					@include assert {
						@include output {
							@include lg\:font-extrabold;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								font-weight: 800;
							}
						}
					}
				}

				@include it("font-black") {
					@include assert {
						@include output {
							@include lg\:font-black;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								font-weight: 900;
							}
						}
					}
				}
			}

			@include describe("XL") {
				@include it("font-thin") {
					@include assert {
						@include output {
							@include xl\:font-thin;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								font-weight: 100;
							}
						}
					}
				}

				@include it("font-extralight") {
					@include assert {
						@include output {
							@include xl\:font-extralight;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								font-weight: 200;
							}
						}
					}
				}

				@include it("font-light") {
					@include assert {
						@include output {
							@include xl\:font-light;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								font-weight: 300;
							}
						}
					}
				}

				@include it("font-normal") {
					@include assert {
						@include output {
							@include xl\:font-normal;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								font-weight: 400;
							}
						}
					}
				}

				@include it("font-medium") {
					@include assert {
						@include output {
							@include xl\:font-medium;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								font-weight: 500;
							}
						}
					}
				}

				@include it("font-semibold") {
					@include assert {
						@include output {
							@include xl\:font-semibold;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								font-weight: 600;
							}
						}
					}
				}

				@include it("font-bold") {
					@include assert {
						@include output {
							@include xl\:font-bold;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								font-weight: 700;
							}
						}
					}
				}

				@include it("font-extrabold") {
					@include assert {
						@include output {
							@include xl\:font-extrabold;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								font-weight: 800;
							}
						}
					}
				}

				@include it("font-black") {
					@include assert {
						@include output {
							@include xl\:font-black;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								font-weight: 900;
							}
						}
					}
				}
			}

			@include describe("2XL") {
				@include it("font-thin") {
					@include assert {
						@include output {
							@include \2xl\:font-thin;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								font-weight: 100;
							}
						}
					}
				}

				@include it("font-extralight") {
					@include assert {
						@include output {
							@include \2xl\:font-extralight;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								font-weight: 200;
							}
						}
					}
				}

				@include it("font-light") {
					@include assert {
						@include output {
							@include \2xl\:font-light;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								font-weight: 300;
							}
						}
					}
				}

				@include it("font-normal") {
					@include assert {
						@include output {
							@include \2xl\:font-normal;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								font-weight: 400;
							}
						}
					}
				}

				@include it("font-medium") {
					@include assert {
						@include output {
							@include \2xl\:font-medium;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								font-weight: 500;
							}
						}
					}
				}

				@include it("font-semibold") {
					@include assert {
						@include output {
							@include \2xl\:font-semibold;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								font-weight: 600;
							}
						}
					}
				}

				@include it("font-bold") {
					@include assert {
						@include output {
							@include \2xl\:font-bold;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								font-weight: 700;
							}
						}
					}
				}

				@include it("font-extrabold") {
					@include assert {
						@include output {
							@include \2xl\:font-extrabold;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								font-weight: 800;
							}
						}
					}
				}

				@include it("font-black") {
					@include assert {
						@include output {
							@include \2xl\:font-black;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								font-weight: 900;
							}
						}
					}
				}
			}
		}
	}

	@include describe("Font Variant Numeric") {
		@include describe("Basic") {
			@include it("normal-nums") {
				@include assert {
					@include output {
						@include normal-nums;
					}

					@include expect {
						font-variant-numeric: normal;
					}
				}
			}

			@include it("ordinal") {
				@include assert {
					@include output {
						@include ordinal;
					}

					@include expect {
						font-variant-numeric: ordinal;
					}
				}
			}

			@include it("slashed-zero") {
				@include assert {
					@include output {
						@include slashed-zero;
					}

					@include expect {
						font-variant-numeric: slashed-zero;
					}
				}
			}

			@include it("lining-nums") {
				@include assert {
					@include output {
						@include lining-nums;
					}

					@include expect {
						font-variant-numeric: lining-nums;
					}
				}
			}

			@include it("oldstyle-nums") {
				@include assert {
					@include output {
						@include oldstyle-nums;
					}

					@include expect {
						font-variant-numeric: oldstyle-nums;
					}
				}
			}

			@include it("proportional-nums") {
				@include assert {
					@include output {
						@include proportional-nums;
					}

					@include expect {
						font-variant-numeric: proportional-nums;
					}
				}
			}

			@include it("tabular-nums") {
				@include assert {
					@include output {
						@include tabular-nums;
					}

					@include expect {
						font-variant-numeric: tabular-nums;
					}
				}
			}

			@include it("diagonal-fractions") {
				@include assert {
					@include output {
						@include diagonal-fractions;
					}

					@include expect {
						font-variant-numeric: diagonal-fractions;
					}
				}
			}

			@include it("stacked-fractions") {
				@include assert {
					@include output {
						@include stacked-fractions;
					}

					@include expect {
						font-variant-numeric: stacked-fractions;
					}
				}
			}
		}

		@include describe("RWD") {
			@include describe("SM") {
				@include it("normal-nums") {
					@include assert {
						@include output {
							@include sm\:normal-nums;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								font-variant-numeric: normal;
							}
						}
					}
				}

				@include it("ordinal") {
					@include assert {
						@include output {
							@include sm\:ordinal;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								font-variant-numeric: ordinal;
							}
						}
					}
				}

				@include it("slashed-zero") {
					@include assert {
						@include output {
							@include sm\:slashed-zero;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								font-variant-numeric: slashed-zero;
							}
						}
					}
				}

				@include it("lining-nums") {
					@include assert {
						@include output {
							@include sm\:lining-nums;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								font-variant-numeric: lining-nums;
							}
						}
					}
				}

				@include it("oldstyle-nums") {
					@include assert {
						@include output {
							@include sm\:oldstyle-nums;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								font-variant-numeric: oldstyle-nums;
							}
						}
					}
				}

				@include it("proportional-nums") {
					@include assert {
						@include output {
							@include sm\:proportional-nums;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								font-variant-numeric: proportional-nums;
							}
						}
					}
				}

				@include it("tabular-nums") {
					@include assert {
						@include output {
							@include sm\:tabular-nums;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								font-variant-numeric: tabular-nums;
							}
						}
					}
				}

				@include it("diagonal-fractions") {
					@include assert {
						@include output {
							@include sm\:diagonal-fractions;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								font-variant-numeric: diagonal-fractions;
							}
						}
					}
				}

				@include it("stacked-fractions") {
					@include assert {
						@include output {
							@include sm\:stacked-fractions;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								font-variant-numeric: stacked-fractions;
							}
						}
					}
				}
			}

			@include describe("MD") {
				@include it("normal-nums") {
					@include assert {
						@include output {
							@include md\:normal-nums;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								font-variant-numeric: normal;
							}
						}
					}
				}

				@include it("ordinal") {
					@include assert {
						@include output {
							@include md\:ordinal;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								font-variant-numeric: ordinal;
							}
						}
					}
				}

				@include it("slashed-zero") {
					@include assert {
						@include output {
							@include md\:slashed-zero;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								font-variant-numeric: slashed-zero;
							}
						}
					}
				}

				@include it("lining-nums") {
					@include assert {
						@include output {
							@include md\:lining-nums;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								font-variant-numeric: lining-nums;
							}
						}
					}
				}

				@include it("oldstyle-nums") {
					@include assert {
						@include output {
							@include md\:oldstyle-nums;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								font-variant-numeric: oldstyle-nums;
							}
						}
					}
				}

				@include it("proportional-nums") {
					@include assert {
						@include output {
							@include md\:proportional-nums;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								font-variant-numeric: proportional-nums;
							}
						}
					}
				}

				@include it("tabular-nums") {
					@include assert {
						@include output {
							@include md\:tabular-nums;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								font-variant-numeric: tabular-nums;
							}
						}
					}
				}

				@include it("diagonal-fractions") {
					@include assert {
						@include output {
							@include md\:diagonal-fractions;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								font-variant-numeric: diagonal-fractions;
							}
						}
					}
				}

				@include it("stacked-fractions") {
					@include assert {
						@include output {
							@include md\:stacked-fractions;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								font-variant-numeric: stacked-fractions;
							}
						}
					}
				}
			}

			@include describe("LG") {
				@include it("normal-nums") {
					@include assert {
						@include output {
							@include lg\:normal-nums;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								font-variant-numeric: normal;
							}
						}
					}
				}

				@include it("ordinal") {
					@include assert {
						@include output {
							@include lg\:ordinal;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								font-variant-numeric: ordinal;
							}
						}
					}
				}

				@include it("slashed-zero") {
					@include assert {
						@include output {
							@include lg\:slashed-zero;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								font-variant-numeric: slashed-zero;
							}
						}
					}
				}

				@include it("lining-nums") {
					@include assert {
						@include output {
							@include lg\:lining-nums;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								font-variant-numeric: lining-nums;
							}
						}
					}
				}

				@include it("oldstyle-nums") {
					@include assert {
						@include output {
							@include lg\:oldstyle-nums;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								font-variant-numeric: oldstyle-nums;
							}
						}
					}
				}

				@include it("proportional-nums") {
					@include assert {
						@include output {
							@include lg\:proportional-nums;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								font-variant-numeric: proportional-nums;
							}
						}
					}
				}

				@include it("tabular-nums") {
					@include assert {
						@include output {
							@include lg\:tabular-nums;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								font-variant-numeric: tabular-nums;
							}
						}
					}
				}

				@include it("diagonal-fractions") {
					@include assert {
						@include output {
							@include lg\:diagonal-fractions;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								font-variant-numeric: diagonal-fractions;
							}
						}
					}
				}

				@include it("stacked-fractions") {
					@include assert {
						@include output {
							@include lg\:stacked-fractions;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								font-variant-numeric: stacked-fractions;
							}
						}
					}
				}
			}

			@include describe("XL") {
				@include it("normal-nums") {
					@include assert {
						@include output {
							@include xl\:normal-nums;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								font-variant-numeric: normal;
							}
						}
					}
				}

				@include it("ordinal") {
					@include assert {
						@include output {
							@include xl\:ordinal;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								font-variant-numeric: ordinal;
							}
						}
					}
				}

				@include it("slashed-zero") {
					@include assert {
						@include output {
							@include xl\:slashed-zero;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								font-variant-numeric: slashed-zero;
							}
						}
					}
				}

				@include it("lining-nums") {
					@include assert {
						@include output {
							@include xl\:lining-nums;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								font-variant-numeric: lining-nums;
							}
						}
					}
				}

				@include it("oldstyle-nums") {
					@include assert {
						@include output {
							@include xl\:oldstyle-nums;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								font-variant-numeric: oldstyle-nums;
							}
						}
					}
				}

				@include it("proportional-nums") {
					@include assert {
						@include output {
							@include xl\:proportional-nums;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								font-variant-numeric: proportional-nums;
							}
						}
					}
				}

				@include it("tabular-nums") {
					@include assert {
						@include output {
							@include xl\:tabular-nums;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								font-variant-numeric: tabular-nums;
							}
						}
					}
				}

				@include it("diagonal-fractions") {
					@include assert {
						@include output {
							@include xl\:diagonal-fractions;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								font-variant-numeric: diagonal-fractions;
							}
						}
					}
				}

				@include it("stacked-fractions") {
					@include assert {
						@include output {
							@include xl\:stacked-fractions;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								font-variant-numeric: stacked-fractions;
							}
						}
					}
				}
			}

			@include describe("2XL") {
				@include it("normal-nums") {
					@include assert {
						@include output {
							@include \2xl\:normal-nums;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								font-variant-numeric: normal;
							}
						}
					}
				}

				@include it("ordinal") {
					@include assert {
						@include output {
							@include \2xl\:ordinal;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								font-variant-numeric: ordinal;
							}
						}
					}
				}

				@include it("slashed-zero") {
					@include assert {
						@include output {
							@include \2xl\:slashed-zero;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								font-variant-numeric: slashed-zero;
							}
						}
					}
				}

				@include it("lining-nums") {
					@include assert {
						@include output {
							@include \2xl\:lining-nums;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								font-variant-numeric: lining-nums;
							}
						}
					}
				}

				@include it("oldstyle-nums") {
					@include assert {
						@include output {
							@include \2xl\:oldstyle-nums;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								font-variant-numeric: oldstyle-nums;
							}
						}
					}
				}

				@include it("proportional-nums") {
					@include assert {
						@include output {
							@include \2xl\:proportional-nums;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								font-variant-numeric: proportional-nums;
							}
						}
					}
				}

				@include it("tabular-nums") {
					@include assert {
						@include output {
							@include \2xl\:tabular-nums;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								font-variant-numeric: tabular-nums;
							}
						}
					}
				}

				@include it("diagonal-fractions") {
					@include assert {
						@include output {
							@include \2xl\:diagonal-fractions;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								font-variant-numeric: diagonal-fractions;
							}
						}
					}
				}

				@include it("stacked-fractions") {
					@include assert {
						@include output {
							@include \2xl\:stacked-fractions;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								font-variant-numeric: stacked-fractions;
							}
						}
					}
				}
			}
		}
	}

	@include describe("Letter Spacing") {
		@include describe("Basic") {
			@include it("tracking-tighter") {
				@include assert {
					@include output {
						@include tracking-tighter;
					}

					@include expect {
						letter-spacing: -0.05em;
					}
				}
			}

			@include it("tracking-tight") {
				@include assert {
					@include output {
						@include tracking-tight;
					}

					@include expect {
						letter-spacing: -0.025em;
					}
				}
			}

			@include it("tracking-normal") {
				@include assert {
					@include output {
						@include tracking-normal;
					}

					@include expect {
						letter-spacing: 0em;
					}
				}
			}

			@include it("tracking-wide") {
				@include assert {
					@include output {
						@include tracking-wide;
					}

					@include expect {
						letter-spacing: 0.025em;
					}
				}
			}

			@include it("tracking-wider") {
				@include assert {
					@include output {
						@include tracking-wider;
					}

					@include expect {
						letter-spacing: 0.05em;
					}
				}
			}

			@include it("tracking-widest") {
				@include assert {
					@include output {
						@include tracking-widest;
					}

					@include expect {
						letter-spacing: 0.1em;
					}
				}
			}
		}

		@include describe("RWD") {
			@include describe("SM") {
				@include it("tracking-(.25em)") {
					@include assert {
						@include output {
							@include sm\:tracking-(0.25em);
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								letter-spacing: 0.25em;
							}
						}
					}
				}
			}

			@include describe("MD") {
				@include it("tracking-(.25em)") {
					@include assert {
						@include output {
							@include md\:tracking-(0.25em);
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								letter-spacing: 0.25em;
							}
						}
					}
				}
			}

			@include describe("LG") {
				@include it("tracking-(.25em)") {
					@include assert {
						@include output {
							@include lg\:tracking-(0.25em);
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								letter-spacing: 0.25em;
							}
						}
					}
				}
			}

			@include describe("XL") {
				@include it("tracking-(.25em)") {
					@include assert {
						@include output {
							@include xl\:tracking-(0.25em);
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								letter-spacing: 0.25em;
							}
						}
					}
				}
			}

			@include describe("2XL") {
				@include it("tracking-(.25em)") {
					@include assert {
						@include output {
							@include \2xl\:tracking-(0.25em);
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								letter-spacing: 0.25em;
							}
						}
					}
				}
			}
		}

		@include describe("Custom") {
			@include it("tracking-(.25em)") {
				@include assert {
					@include output {
						@include tracking-(0.25em);
					}

					@include expect {
						letter-spacing: 0.25em;
					}
				}
			}
		}
	}

	@include describe("Line Clamp") {
		@include describe("Basic") {
			@include it("line-clamp-1") {
				@include assert {
					@include output {
						@include line-clamp-1;
					}

					@include expect {
						overflow: hidden;
						display: -webkit-box;
						-webkit-box-orient: vertical;
						-webkit-line-clamp: 1;
					}
				}
			}

			@include it("line-clamp-2") {
				@include assert {
					@include output {
						@include line-clamp-2;
					}

					@include expect {
						overflow: hidden;
						display: -webkit-box;
						-webkit-box-orient: vertical;
						-webkit-line-clamp: 2;
					}
				}
			}

			@include it("line-clamp-3") {
				@include assert {
					@include output {
						@include line-clamp-3;
					}

					@include expect {
						overflow: hidden;
						display: -webkit-box;
						-webkit-box-orient: vertical;
						-webkit-line-clamp: 3;
					}
				}
			}

			@include it("line-clamp-4") {
				@include assert {
					@include output {
						@include line-clamp-4;
					}

					@include expect {
						overflow: hidden;
						display: -webkit-box;
						-webkit-box-orient: vertical;
						-webkit-line-clamp: 4;
					}
				}
			}

			@include it("line-clamp-5") {
				@include assert {
					@include output {
						@include line-clamp-5;
					}

					@include expect {
						overflow: hidden;
						display: -webkit-box;
						-webkit-box-orient: vertical;
						-webkit-line-clamp: 5;
					}
				}
			}

			@include it("line-clamp-6") {
				@include assert {
					@include output {
						@include line-clamp-6;
					}

					@include expect {
						overflow: hidden;
						display: -webkit-box;
						-webkit-box-orient: vertical;
						-webkit-line-clamp: 6;
					}
				}
			}

			@include it("line-clamp-none") {
				@include assert {
					@include output {
						@include line-clamp-none;
					}

					@include expect {
						overflow: visible;
						display: block;
						-webkit-box-orient: horizontal;
						-webkit-line-clamp: none;
					}
				}
			}

			@include it("line-clamp-1") {
				@include assert {
					@include output {
						@include line-clamp-1;
					}

					@include expect {
						overflow: hidden;
						display: -webkit-box;
						-webkit-box-orient: vertical;
						-webkit-line-clamp: 1;
					}
				}
			}
		}

		@include describe("RWD") {
			@include describe("SM") {
				@include it("line-clamp-(7)") {
					@include assert {
						@include output {
							@include sm\:line-clamp-(7);
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								overflow: hidden;
								display: -webkit-box;
								-webkit-box-orient: vertical;
								-webkit-line-clamp: 7;
							}
						}
					}
				}
			}

			@include describe("MD") {
				@include it("line-clamp-(7)") {
					@include assert {
						@include output {
							@include md\:line-clamp-(7);
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								overflow: hidden;
								display: -webkit-box;
								-webkit-box-orient: vertical;
								-webkit-line-clamp: 7;
							}
						}
					}
				}
			}

			@include describe("LG") {
				@include it("line-clamp-(7)") {
					@include assert {
						@include output {
							@include lg\:line-clamp-(7);
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								overflow: hidden;
								display: -webkit-box;
								-webkit-box-orient: vertical;
								-webkit-line-clamp: 7;
							}
						}
					}
				}
			}

			@include describe("XL") {
				@include it("line-clamp-(7)") {
					@include assert {
						@include output {
							@include xl\:line-clamp-(7);
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								overflow: hidden;
								display: -webkit-box;
								-webkit-box-orient: vertical;
								-webkit-line-clamp: 7;
							}
						}
					}
				}
			}

			@include describe("2XL") {
				@include it("line-clamp-(7)") {
					@include assert {
						@include output {
							@include \2xl\:line-clamp-(7);
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								overflow: hidden;
								display: -webkit-box;
								-webkit-box-orient: vertical;
								-webkit-line-clamp: 7;
							}
						}
					}
				}
			}
		}

		@include describe("Custom") {
			@include it("line-clamp-(7)") {
				@include assert {
					@include output {
						@include line-clamp-(7);
					}

					@include expect {
						overflow: hidden;
						display: -webkit-box;
						-webkit-box-orient: vertical;
						-webkit-line-clamp: 7;
					}
				}
			}
		}
	}

	@include describe("Line Height") {
		@include describe("Basic") {
			@include it("leading-3") {
				@include assert {
					@include output {
						@include leading-3;
					}

					@include expect {
						line-height: 0.75rem;
					}
				}
			}

			@include it("leading-4") {
				@include assert {
					@include output {
						@include leading-4;
					}

					@include expect {
						line-height: 1rem;
					}
				}
			}

			@include it("leading-5") {
				@include assert {
					@include output {
						@include leading-5;
					}

					@include expect {
						line-height: 1.25rem;
					}
				}
			}

			@include it("leading-6") {
				@include assert {
					@include output {
						@include leading-6;
					}

					@include expect {
						line-height: 1.5rem;
					}
				}
			}

			@include it("leading-7") {
				@include assert {
					@include output {
						@include leading-7;
					}

					@include expect {
						line-height: 1.75rem;
					}
				}
			}

			@include it("leading-8") {
				@include assert {
					@include output {
						@include leading-8;
					}

					@include expect {
						line-height: 2rem;
					}
				}
			}

			@include it("leading-9") {
				@include assert {
					@include output {
						@include leading-9;
					}

					@include expect {
						line-height: 2.25rem;
					}
				}
			}

			@include it("leading-10") {
				@include assert {
					@include output {
						@include leading-10;
					}

					@include expect {
						line-height: 2.5rem;
					}
				}
			}

			@include it("leading-none") {
				@include assert {
					@include output {
						@include leading-none;
					}

					@include expect {
						line-height: 1;
					}
				}
			}

			@include it("leading-tight") {
				@include assert {
					@include output {
						@include leading-tight;
					}

					@include expect {
						line-height: 1.25;
					}
				}
			}

			@include it("leading-snug") {
				@include assert {
					@include output {
						@include leading-snug;
					}

					@include expect {
						line-height: 1.375;
					}
				}
			}

			@include it("leading-normal") {
				@include assert {
					@include output {
						@include leading-normal;
					}

					@include expect {
						line-height: 1.5;
					}
				}
			}

			@include it("leading-relaxed") {
				@include assert {
					@include output {
						@include leading-relaxed;
					}

					@include expect {
						line-height: 1.625;
					}
				}
			}

			@include it("leading-loose") {
				@include assert {
					@include output {
						@include leading-loose;
					}

					@include expect {
						line-height: 2;
					}
				}
			}
		}

		@include describe("RWD") {
			@include describe("SM") {
				@include it("leading-(3rem)") {
					@include assert {
						@include output {
							@include sm\:leading-(3rem);
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								line-height: 3rem;
							}
						}
					}
				}
			}

			@include describe("MD") {
				@include it("leading-(3rem)") {
					@include assert {
						@include output {
							@include md\:leading-(3rem);
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								line-height: 3rem;
							}
						}
					}
				}
			}

			@include describe("LG") {
				@include it("leading-(3rem)") {
					@include assert {
						@include output {
							@include lg\:leading-(3rem);
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								line-height: 3rem;
							}
						}
					}
				}
			}

			@include describe("XL") {
				@include it("leading-(3rem)") {
					@include assert {
						@include output {
							@include xl\:leading-(3rem);
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								line-height: 3rem;
							}
						}
					}
				}
			}

			@include describe("2XL") {
				@include it("leading-(3rem)") {
					@include assert {
						@include output {
							@include \2xl\:leading-(3rem);
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								line-height: 3rem;
							}
						}
					}
				}
			}
		}

		@include describe("Custom") {
			@include it("leading-(3rem)") {
				@include assert {
					@include output {
						@include leading-(3rem);
					}

					@include expect {
						line-height: 3rem;
					}
				}
			}
		}
	}

	@include describe("List Style Image") {
		@include describe("Basic") {
			@include it("list-image-none") {
				@include assert {
					@include output {
						@include list-image-none;
					}

					@include expect {
						list-style-image: none;
					}
				}
			}
		}

		@include describe("RWD") {
			@include describe("SM") {
				@include it("list-image-(url(checkmark.png))") {
					@include assert {
						@include output {
							@include sm\:list-image-(url(checkmark.png));
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								list-style-image: url(checkmark.png);
							}
						}
					}
				}
			}

			@include describe("MD") {
				@include it("list-image-(url(checkmark.png))") {
					@include assert {
						@include output {
							@include md\:list-image-(url(checkmark.png));
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								list-style-image: url(checkmark.png);
							}
						}
					}
				}
			}

			@include describe("LG") {
				@include it("list-image-(url(checkmark.png))") {
					@include assert {
						@include output {
							@include lg\:list-image-(url(checkmark.png));
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								list-style-image: url(checkmark.png);
							}
						}
					}
				}
			}

			@include describe("XL") {
				@include it("list-image-(url(checkmark.png))") {
					@include assert {
						@include output {
							@include xl\:list-image-(url(checkmark.png));
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								list-style-image: url(checkmark.png);
							}
						}
					}
				}
			}

			@include describe("2XL") {
				@include it("list-image-(url(checkmark.png))") {
					@include assert {
						@include output {
							@include \2xl\:list-image-(url(checkmark.png));
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								list-style-image: url(checkmark.png);
							}
						}
					}
				}
			}
		}

		@include describe("Custom") {
			@include it("list-image-(url(checkmark.png))") {
				@include assert {
					@include output {
						@include list-image-(url(checkmark.png));
					}

					@include expect {
						list-style-image: url(checkmark.png);
					}
				}
			}
		}
	}

	@include describe("List Style Position") {
		@include describe("Basic") {
			@include it("list-inside") {
				@include assert {
					@include output {
						@include list-inside;
					}

					@include expect {
						list-style-position: inside;
					}
				}
			}

			@include it("list-outside") {
				@include assert {
					@include output {
						@include list-outside;
					}

					@include expect {
						list-style-position: outside;
					}
				}
			}
		}

		@include describe("RWD") {
			@include describe("SM") {
				@include it("list-inside") {
					@include assert {
						@include output {
							@include sm\:list-inside;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								list-style-position: inside;
							}
						}
					}
				}

				@include it("list-outside") {
					@include assert {
						@include output {
							@include sm\:list-outside;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								list-style-position: outside;
							}
						}
					}
				}
			}

			@include describe("MD") {
				@include it("list-inside") {
					@include assert {
						@include output {
							@include md\:list-inside;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								list-style-position: inside;
							}
						}
					}
				}

				@include it("list-outside") {
					@include assert {
						@include output {
							@include md\:list-outside;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								list-style-position: outside;
							}
						}
					}
				}
			}

			@include describe("LG") {
				@include it("list-inside") {
					@include assert {
						@include output {
							@include lg\:list-inside;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								list-style-position: inside;
							}
						}
					}
				}

				@include it("list-outside") {
					@include assert {
						@include output {
							@include lg\:list-outside;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								list-style-position: outside;
							}
						}
					}
				}
			}

			@include describe("XL") {
				@include it("list-inside") {
					@include assert {
						@include output {
							@include xl\:list-inside;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								list-style-position: inside;
							}
						}
					}
				}

				@include it("list-outside") {
					@include assert {
						@include output {
							@include xl\:list-outside;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								list-style-position: outside;
							}
						}
					}
				}
			}

			@include describe("2XL") {
				@include it("list-inside") {
					@include assert {
						@include output {
							@include \2xl\:list-inside;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								list-style-position: inside;
							}
						}
					}
				}

				@include it("list-outside") {
					@include assert {
						@include output {
							@include \2xl\:list-outside;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								list-style-position: outside;
							}
						}
					}
				}
			}
		}
	}

	@include describe("List Style Type") {
		@include describe("Basic") {
			@include it("list-none") {
				@include assert {
					@include output {
						@include list-none;
					}

					@include expect {
						list-style-type: none;
					}
				}
			}

			@include it("list-disc") {
				@include assert {
					@include output {
						@include list-disc;
					}

					@include expect {
						list-style-type: disc;
					}
				}
			}

			@include it("list-decimal") {
				@include assert {
					@include output {
						@include list-decimal;
					}

					@include expect {
						list-style-type: decimal;
					}
				}
			}
		}

		@include describe("RWD") {
			@include describe("SM") {
				@include it("list-(upper-roman)") {
					@include assert {
						@include output {
							@include sm\:list-(upper-roman);
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								list-style-type: upper-roman;
							}
						}
					}
				}
			}

			@include describe("MD") {
				@include it("list-(upper-roman)") {
					@include assert {
						@include output {
							@include md\:list-(upper-roman);
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								list-style-type: upper-roman;
							}
						}
					}
				}
			}

			@include describe("LG") {
				@include it("list-(upper-roman)") {
					@include assert {
						@include output {
							@include lg\:list-(upper-roman);
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								list-style-type: upper-roman;
							}
						}
					}
				}
			}

			@include describe("XL") {
				@include it("list-(upper-roman)") {
					@include assert {
						@include output {
							@include xl\:list-(upper-roman);
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								list-style-type: upper-roman;
							}
						}
					}
				}
			}

			@include describe("2XL") {
				@include it("list-(upper-roman)") {
					@include assert {
						@include output {
							@include \2xl\:list-(upper-roman);
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								list-style-type: upper-roman;
							}
						}
					}
				}
			}
		}

		@include describe("Custom") {
			@include it("list-(upper-roman)") {
				@include assert {
					@include output {
						@include list-(upper-roman);
					}

					@include expect {
						list-style-type: upper-roman;
					}
				}
			}
		}
	}

	@include describe("Text Align") {
		@include describe("Basic") {
			@include it("text-left") {
				@include assert {
					@include output {
						@include text-left;
					}

					@include expect {
						text-align: left;
					}
				}
			}

			@include it("text-center") {
				@include assert {
					@include output {
						@include text-center;
					}

					@include expect {
						text-align: center;
					}
				}
			}

			@include it("text-right") {
				@include assert {
					@include output {
						@include text-right;
					}

					@include expect {
						text-align: right;
					}
				}
			}

			@include it("text-justify") {
				@include assert {
					@include output {
						@include text-justify;
					}

					@include expect {
						text-align: justify;
					}
				}
			}

			@include it("text-start") {
				@include assert {
					@include output {
						@include text-start;
					}

					@include expect {
						text-align: start;
					}
				}
			}

			@include it("text-end") {
				@include assert {
					@include output {
						@include text-end;
					}

					@include expect {
						text-align: end;
					}
				}
			}
		}

		@include describe("RWD") {
			@include describe("SM") {
				@include it("text-left") {
					@include assert {
						@include output {
							@include sm\:text-left;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								text-align: left;
							}
						}
					}
				}

				@include it("text-center") {
					@include assert {
						@include output {
							@include sm\:text-center;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								text-align: center;
							}
						}
					}
				}

				@include it("text-right") {
					@include assert {
						@include output {
							@include sm\:text-right;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								text-align: right;
							}
						}
					}
				}

				@include it("text-justify") {
					@include assert {
						@include output {
							@include sm\:text-justify;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								text-align: justify;
							}
						}
					}
				}

				@include it("text-start") {
					@include assert {
						@include output {
							@include sm\:text-start;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								text-align: start;
							}
						}
					}
				}

				@include it("text-end") {
					@include assert {
						@include output {
							@include sm\:text-end;
						}

						@include expect {
							@media (min-width: $__MEDIA-SM) {
								text-align: end;
							}
						}
					}
				}
			}

			@include describe("MD") {
				@include it("text-left") {
					@include assert {
						@include output {
							@include md\:text-left;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								text-align: left;
							}
						}
					}
				}

				@include it("text-center") {
					@include assert {
						@include output {
							@include md\:text-center;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								text-align: center;
							}
						}
					}
				}

				@include it("text-right") {
					@include assert {
						@include output {
							@include md\:text-right;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								text-align: right;
							}
						}
					}
				}

				@include it("text-justify") {
					@include assert {
						@include output {
							@include md\:text-justify;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								text-align: justify;
							}
						}
					}
				}

				@include it("text-start") {
					@include assert {
						@include output {
							@include md\:text-start;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								text-align: start;
							}
						}
					}
				}

				@include it("text-end") {
					@include assert {
						@include output {
							@include md\:text-end;
						}

						@include expect {
							@media (min-width: $__MEDIA-MD) {
								text-align: end;
							}
						}
					}
				}
			}

			@include describe("LG") {
				@include it("text-left") {
					@include assert {
						@include output {
							@include lg\:text-left;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								text-align: left;
							}
						}
					}
				}

				@include it("text-center") {
					@include assert {
						@include output {
							@include lg\:text-center;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								text-align: center;
							}
						}
					}
				}

				@include it("text-right") {
					@include assert {
						@include output {
							@include lg\:text-right;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								text-align: right;
							}
						}
					}
				}

				@include it("text-justify") {
					@include assert {
						@include output {
							@include lg\:text-justify;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								text-align: justify;
							}
						}
					}
				}

				@include it("text-start") {
					@include assert {
						@include output {
							@include lg\:text-start;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								text-align: start;
							}
						}
					}
				}

				@include it("text-end") {
					@include assert {
						@include output {
							@include lg\:text-end;
						}

						@include expect {
							@media (min-width: $__MEDIA-LG) {
								text-align: end;
							}
						}
					}
				}
			}

			@include describe("XL") {
				@include it("text-left") {
					@include assert {
						@include output {
							@include xl\:text-left;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								text-align: left;
							}
						}
					}
				}

				@include it("text-center") {
					@include assert {
						@include output {
							@include xl\:text-center;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								text-align: center;
							}
						}
					}
				}

				@include it("text-right") {
					@include assert {
						@include output {
							@include xl\:text-right;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								text-align: right;
							}
						}
					}
				}

				@include it("text-justify") {
					@include assert {
						@include output {
							@include xl\:text-justify;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								text-align: justify;
							}
						}
					}
				}

				@include it("text-start") {
					@include assert {
						@include output {
							@include xl\:text-start;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								text-align: start;
							}
						}
					}
				}

				@include it("text-end") {
					@include assert {
						@include output {
							@include xl\:text-end;
						}

						@include expect {
							@media (min-width: $__MEDIA-XL) {
								text-align: end;
							}
						}
					}
				}
			}

			@include describe("2XL") {
				@include it("text-left") {
					@include assert {
						@include output {
							@include \2xl\:text-left;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								text-align: left;
							}
						}
					}
				}

				@include it("text-center") {
					@include assert {
						@include output {
							@include \2xl\:text-center;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								text-align: center;
							}
						}
					}
				}

				@include it("text-right") {
					@include assert {
						@include output {
							@include \2xl\:text-right;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								text-align: right;
							}
						}
					}
				}

				@include it("text-justify") {
					@include assert {
						@include output {
							@include \2xl\:text-justify;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								text-align: justify;
							}
						}
					}
				}

				@include it("text-start") {
					@include assert {
						@include output {
							@include \2xl\:text-start;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								text-align: start;
							}
						}
					}
				}

				@include it("text-end") {
					@include assert {
						@include output {
							@include \2xl\:text-end;
						}

						@include expect {
							@media (min-width: $__MEDIA-2XL) {
								text-align: end;
							}
						}
					}
				}
			}
		}
	}
}

@include describe("Text Color") {
	@include describe("Basic") {
		@include it("text-inherit") {
			@include assert {
				@include output {
					@include text-inherit;
				}

				@include expect {
					color: inherit;
				}
			}
		}

		@include it("text-current") {
			@include assert {
				@include output {
					@include text-current;
				}

				@include expect {
					color: currentColor;
				}
			}
		}

		@include it("text-transparent") {
			@include assert {
				@include output {
					@include text-transparent;
				}

				@include expect {
					color: transparent;
				}
			}
		}

		@include it("text-black") {
			@include assert {
				@include output {
					@include text-black;
				}

				@include expect {
					color: rgb(0 0 0);
				}
			}
		}

		@include it("text-white") {
			@include assert {
				@include output {
					@include text-white;
				}

				@include expect {
					color: rgb(255 255 255);
				}
			}
		}

		@include describe("slate") {
			@include it("50") {
				@include assert {
					@include output {
						@include text-slate-50;
					}

					@include expect {
						color: rgb(248 250 252);
					}
				}
			}

			@include it("100") {
				@include assert {
					@include output {
						@include text-slate-100;
					}

					@include expect {
						color: rgb(241 245 249);
					}
				}
			}

			@include it("200") {
				@include assert {
					@include output {
						@include text-slate-200;
					}

					@include expect {
						color: rgb(226 232 240);
					}
				}
			}

			@include it("300") {
				@include assert {
					@include output {
						@include text-slate-300;
					}

					@include expect {
						color: rgb(203 213 225);
					}
				}
			}

			@include it("400") {
				@include assert {
					@include output {
						@include text-slate-400;
					}

					@include expect {
						color: rgb(148 163 184);
					}
				}
			}

			@include it("500") {
				@include assert {
					@include output {
						@include text-slate-500;
					}

					@include expect {
						color: rgb(100 116 139);
					}
				}
			}

			@include it("600") {
				@include assert {
					@include output {
						@include text-slate-600;
					}

					@include expect {
						color: rgb(71 85 105);
					}
				}
			}

			@include it("700") {
				@include assert {
					@include output {
						@include text-slate-700;
					}

					@include expect {
						color: rgb(51 65 85);
					}
				}
			}

			@include it("800") {
				@include assert {
					@include output {
						@include text-slate-800;
					}

					@include expect {
						color: rgb(30 41 59);
					}
				}
			}

			@include it("900") {
				@include assert {
					@include output {
						@include text-slate-900;
					}

					@include expect {
						color: rgb(15 23 42);
					}
				}
			}

			@include it("950") {
				@include assert {
					@include output {
						@include text-slate-950;
					}

					@include expect {
						color: rgb(2 6 23);
					}
				}
			}
		}

		@include describe("gray") {
			@include it("50") {
				@include assert {
					@include output {
						@include text-gray-50;
					}

					@include expect {
						color: rgb(249 250 251);
					}
				}
			}

			@include it("100") {
				@include assert {
					@include output {
						@include text-gray-100;
					}

					@include expect {
						color: rgb(243 244 246);
					}
				}
			}

			@include it("200") {
				@include assert {
					@include output {
						@include text-gray-200;
					}

					@include expect {
						color: rgb(229 231 235);
					}
				}
			}

			@include it("300") {
				@include assert {
					@include output {
						@include text-gray-300;
					}

					@include expect {
						color: rgb(209 213 219);
					}
				}
			}

			@include it("400") {
				@include assert {
					@include output {
						@include text-gray-400;
					}

					@include expect {
						color: rgb(156 163 175);
					}
				}
			}

			@include it("500") {
				@include assert {
					@include output {
						@include text-gray-500;
					}

					@include expect {
						color: rgb(107 114 128);
					}
				}
			}

			@include it("600") {
				@include assert {
					@include output {
						@include text-gray-600;
					}

					@include expect {
						color: rgb(75 85 99);
					}
				}
			}

			@include it("700") {
				@include assert {
					@include output {
						@include text-gray-700;
					}

					@include expect {
						color: rgb(55 65 81);
					}
				}
			}

			@include it("800") {
				@include assert {
					@include output {
						@include text-gray-800;
					}

					@include expect {
						color: rgb(31 41 55);
					}
				}
			}

			@include it("900") {
				@include assert {
					@include output {
						@include text-gray-900;
					}

					@include expect {
						color: rgb(17 24 39);
					}
				}
			}

			@include it("950") {
				@include assert {
					@include output {
						@include text-gray-950;
					}

					@include expect {
						color: rgb(3 7 18);
					}
				}
			}
		}

		@include describe("zinc") {
			@include it("50") {
				@include assert {
					@include output {
						@include text-zinc-50;
					}

					@include expect {
						color: rgb(250 250 250);
					}
				}
			}

			@include it("100") {
				@include assert {
					@include output {
						@include text-zinc-100;
					}

					@include expect {
						color: rgb(244 244 245);
					}
				}
			}

			@include it("200") {
				@include assert {
					@include output {
						@include text-zinc-200;
					}

					@include expect {
						color: rgb(228 228 231);
					}
				}
			}

			@include it("300") {
				@include assert {
					@include output {
						@include text-zinc-300;
					}

					@include expect {
						color: rgb(212 212 216);
					}
				}
			}

			@include it("400") {
				@include assert {
					@include output {
						@include text-zinc-400;
					}

					@include expect {
						color: rgb(161 161 170);
					}
				}
			}

			@include it("500") {
				@include assert {
					@include output {
						@include text-zinc-500;
					}

					@include expect {
						color: rgb(113 113 122);
					}
				}
			}

			@include it("600") {
				@include assert {
					@include output {
						@include text-zinc-600;
					}

					@include expect {
						color: rgb(82 82 91);
					}
				}
			}

			@include it("700") {
				@include assert {
					@include output {
						@include text-zinc-700;
					}

					@include expect {
						color: rgb(63 63 70);
					}
				}
			}

			@include it("800") {
				@include assert {
					@include output {
						@include text-zinc-800;
					}

					@include expect {
						color: rgb(39 39 42);
					}
				}
			}

			@include it("900") {
				@include assert {
					@include output {
						@include text-zinc-900;
					}

					@include expect {
						color: rgb(24 24 27);
					}
				}
			}

			@include it("950") {
				@include assert {
					@include output {
						@include text-zinc-950;
					}

					@include expect {
						color: rgb(9 9 11);
					}
				}
			}
		}

		@include describe("neutral") {
			@include it("50") {
				@include assert {
					@include output {
						@include text-neutral-50;
					}

					@include expect {
						color: rgb(250 250 250);
					}
				}
			}

			@include it("100") {
				@include assert {
					@include output {
						@include text-neutral-100;
					}

					@include expect {
						color: rgb(245 245 245);
					}
				}
			}

			@include it("200") {
				@include assert {
					@include output {
						@include text-neutral-200;
					}

					@include expect {
						color: rgb(229 229 229);
					}
				}
			}

			@include it("300") {
				@include assert {
					@include output {
						@include text-neutral-300;
					}

					@include expect {
						color: rgb(212 212 212);
					}
				}
			}

			@include it("400") {
				@include assert {
					@include output {
						@include text-neutral-400;
					}

					@include expect {
						color: rgb(163 163 163);
					}
				}
			}

			@include it("500") {
				@include assert {
					@include output {
						@include text-neutral-500;
					}

					@include expect {
						color: rgb(115 115 115);
					}
				}
			}

			@include it("600") {
				@include assert {
					@include output {
						@include text-neutral-600;
					}

					@include expect {
						color: rgb(82 82 82);
					}
				}
			}

			@include it("700") {
				@include assert {
					@include output {
						@include text-neutral-700;
					}

					@include expect {
						color: rgb(64 64 64);
					}
				}
			}

			@include it("800") {
				@include assert {
					@include output {
						@include text-neutral-800;
					}

					@include expect {
						color: rgb(38 38 38);
					}
				}
			}

			@include it("900") {
				@include assert {
					@include output {
						@include text-neutral-900;
					}

					@include expect {
						color: rgb(23 23 23);
					}
				}
			}

			@include it("950") {
				@include assert {
					@include output {
						@include text-neutral-950;
					}

					@include expect {
						color: rgb(10 10 10);
					}
				}
			}
		}

		@include describe("stone") {
			@include it("50") {
				@include assert {
					@include output {
						@include text-stone-50;
					}

					@include expect {
						color: rgb(250 250 249);
					}
				}
			}

			@include it("100") {
				@include assert {
					@include output {
						@include text-stone-100;
					}

					@include expect {
						color: rgb(245 245 244);
					}
				}
			}

			@include it("200") {
				@include assert {
					@include output {
						@include text-stone-200;
					}

					@include expect {
						color: rgb(231 229 228);
					}
				}
			}

			@include it("300") {
				@include assert {
					@include output {
						@include text-stone-300;
					}

					@include expect {
						color: rgb(214 211 209);
					}
				}
			}

			@include it("400") {
				@include assert {
					@include output {
						@include text-stone-400;
					}

					@include expect {
						color: rgb(168 162 158);
					}
				}
			}

			@include it("500") {
				@include assert {
					@include output {
						@include text-stone-500;
					}

					@include expect {
						color: rgb(120 113 108);
					}
				}
			}

			@include it("600") {
				@include assert {
					@include output {
						@include text-stone-600;
					}

					@include expect {
						color: rgb(87 83 78);
					}
				}
			}

			@include it("700") {
				@include assert {
					@include output {
						@include text-stone-700;
					}

					@include expect {
						color: rgb(68 64 60);
					}
				}
			}

			@include it("800") {
				@include assert {
					@include output {
						@include text-stone-800;
					}

					@include expect {
						color: rgb(41 37 36);
					}
				}
			}

			@include it("900") {
				@include assert {
					@include output {
						@include text-stone-900;
					}

					@include expect {
						color: rgb(28 25 23);
					}
				}
			}

			@include it("950") {
				@include assert {
					@include output {
						@include text-stone-950;
					}

					@include expect {
						color: rgb(12 10 9);
					}
				}
			}
		}

		@include describe("red") {
			@include it("50") {
				@include assert {
					@include output {
						@include text-red-50;
					}

					@include expect {
						color: rgb(254 242 242);
					}
				}
			}

			@include it("100") {
				@include assert {
					@include output {
						@include text-red-100;
					}

					@include expect {
						color: rgb(254 226 226);
					}
				}
			}

			@include it("200") {
				@include assert {
					@include output {
						@include text-red-200;
					}

					@include expect {
						color: rgb(254 202 202);
					}
				}
			}

			@include it("300") {
				@include assert {
					@include output {
						@include text-red-300;
					}

					@include expect {
						color: rgb(252 165 165);
					}
				}
			}

			@include it("400") {
				@include assert {
					@include output {
						@include text-red-400;
					}

					@include expect {
						color: rgb(248 113 113);
					}
				}
			}

			@include it("500") {
				@include assert {
					@include output {
						@include text-red-500;
					}

					@include expect {
						color: rgb(239 68 68);
					}
				}
			}

			@include it("600") {
				@include assert {
					@include output {
						@include text-red-600;
					}

					@include expect {
						color: rgb(220 38 38);
					}
				}
			}

			@include it("700") {
				@include assert {
					@include output {
						@include text-red-700;
					}

					@include expect {
						color: rgb(185 28 28);
					}
				}
			}

			@include it("800") {
				@include assert {
					@include output {
						@include text-red-800;
					}

					@include expect {
						color: rgb(153 27 27);
					}
				}
			}

			@include it("900") {
				@include assert {
					@include output {
						@include text-red-900;
					}

					@include expect {
						color: rgb(127 29 29);
					}
				}
			}

			@include it("950") {
				@include assert {
					@include output {
						@include text-red-950;
					}

					@include expect {
						color: rgb(69 10 10);
					}
				}
			}
		}

		@include describe("orange") {
			@include it("50") {
				@include assert {
					@include output {
						@include text-orange-50;
					}

					@include expect {
						color: rgb(255 247 237);
					}
				}
			}

			@include it("100") {
				@include assert {
					@include output {
						@include text-orange-100;
					}

					@include expect {
						color: rgb(255 237 213);
					}
				}
			}

			@include it("200") {
				@include assert {
					@include output {
						@include text-orange-200;
					}

					@include expect {
						color: rgb(254 215 170);
					}
				}
			}

			@include it("300") {
				@include assert {
					@include output {
						@include text-orange-300;
					}

					@include expect {
						color: rgb(253 186 116);
					}
				}
			}

			@include it("400") {
				@include assert {
					@include output {
						@include text-orange-400;
					}

					@include expect {
						color: rgb(251 146 60);
					}
				}
			}

			@include it("500") {
				@include assert {
					@include output {
						@include text-orange-500;
					}

					@include expect {
						color: rgb(249 115 22);
					}
				}
			}

			@include it("600") {
				@include assert {
					@include output {
						@include text-orange-600;
					}

					@include expect {
						color: rgb(234 88 12);
					}
				}
			}

			@include it("700") {
				@include assert {
					@include output {
						@include text-orange-700;
					}

					@include expect {
						color: rgb(194 65 12);
					}
				}
			}

			@include it("800") {
				@include assert {
					@include output {
						@include text-orange-800;
					}

					@include expect {
						color: rgb(154 52 18);
					}
				}
			}

			@include it("900") {
				@include assert {
					@include output {
						@include text-orange-900;
					}

					@include expect {
						color: rgb(124 45 18);
					}
				}
			}

			@include it("950") {
				@include assert {
					@include output {
						@include text-orange-950;
					}

					@include expect {
						color: rgb(67 20 7);
					}
				}
			}
		}

		@include describe("amber") {
			@include it("50") {
				@include assert {
					@include output {
						@include text-amber-50;
					}

					@include expect {
						color: rgb(255 251 235);
					}
				}
			}

			@include it("100") {
				@include assert {
					@include output {
						@include text-amber-100;
					}

					@include expect {
						color: rgb(254 243 199);
					}
				}
			}

			@include it("200") {
				@include assert {
					@include output {
						@include text-amber-200;
					}

					@include expect {
						color: rgb(253 230 138);
					}
				}
			}

			@include it("300") {
				@include assert {
					@include output {
						@include text-amber-300;
					}

					@include expect {
						color: rgb(252 211 77);
					}
				}
			}

			@include it("400") {
				@include assert {
					@include output {
						@include text-amber-400;
					}

					@include expect {
						color: rgb(251 191 36);
					}
				}
			}

			@include it("500") {
				@include assert {
					@include output {
						@include text-amber-500;
					}

					@include expect {
						color: rgb(245 158 11);
					}
				}
			}

			@include it("600") {
				@include assert {
					@include output {
						@include text-amber-600;
					}

					@include expect {
						color: rgb(217 119 6);
					}
				}
			}

			@include it("700") {
				@include assert {
					@include output {
						@include text-amber-700;
					}

					@include expect {
						color: rgb(180 83 9);
					}
				}
			}

			@include it("800") {
				@include assert {
					@include output {
						@include text-amber-800;
					}

					@include expect {
						color: rgb(146 64 14);
					}
				}
			}

			@include it("900") {
				@include assert {
					@include output {
						@include text-amber-900;
					}

					@include expect {
						color: rgb(120 53 15);
					}
				}
			}

			@include it("950") {
				@include assert {
					@include output {
						@include text-amber-950;
					}

					@include expect {
						color: rgb(69 26 3);
					}
				}
			}
		}

		@include describe("yellow") {
			@include it("50") {
				@include assert {
					@include output {
						@include text-yellow-50;
					}

					@include expect {
						color: rgb(254 252 232);
					}
				}
			}

			@include it("100") {
				@include assert {
					@include output {
						@include text-yellow-100;
					}

					@include expect {
						color: rgb(254 249 195);
					}
				}
			}

			@include it("200") {
				@include assert {
					@include output {
						@include text-yellow-200;
					}

					@include expect {
						color: rgb(254 240 138);
					}
				}
			}

			@include it("300") {
				@include assert {
					@include output {
						@include text-yellow-300;
					}

					@include expect {
						color: rgb(253 224 71);
					}
				}
			}

			@include it("400") {
				@include assert {
					@include output {
						@include text-yellow-400;
					}

					@include expect {
						color: rgb(250 204 21);
					}
				}
			}

			@include it("500") {
				@include assert {
					@include output {
						@include text-yellow-500;
					}

					@include expect {
						color: rgb(234 179 8);
					}
				}
			}

			@include it("600") {
				@include assert {
					@include output {
						@include text-yellow-600;
					}

					@include expect {
						color: rgb(202 138 4);
					}
				}
			}

			@include it("700") {
				@include assert {
					@include output {
						@include text-yellow-700;
					}

					@include expect {
						color: rgb(161 98 7);
					}
				}
			}

			@include it("800") {
				@include assert {
					@include output {
						@include text-yellow-800;
					}

					@include expect {
						color: rgb(133 77 14);
					}
				}
			}

			@include it("900") {
				@include assert {
					@include output {
						@include text-yellow-900;
					}

					@include expect {
						color: rgb(113 63 18);
					}
				}
			}

			@include it("950") {
				@include assert {
					@include output {
						@include text-yellow-950;
					}

					@include expect {
						color: rgb(66 32 6);
					}
				}
			}
		}

		@include describe("lime") {
			@include it("50") {
				@include assert {
					@include output {
						@include text-lime-50;
					}

					@include expect {
						color: rgb(247 254 231);
					}
				}
			}

			@include it("100") {
				@include assert {
					@include output {
						@include text-lime-100;
					}

					@include expect {
						color: rgb(236 252 203);
					}
				}
			}

			@include it("200") {
				@include assert {
					@include output {
						@include text-lime-200;
					}

					@include expect {
						color: rgb(217 249 157);
					}
				}
			}

			@include it("300") {
				@include assert {
					@include output {
						@include text-lime-300;
					}

					@include expect {
						color: rgb(190 242 100);
					}
				}
			}

			@include it("400") {
				@include assert {
					@include output {
						@include text-lime-400;
					}

					@include expect {
						color: rgb(163 230 53);
					}
				}
			}

			@include it("500") {
				@include assert {
					@include output {
						@include text-lime-500;
					}

					@include expect {
						color: rgb(132 204 22);
					}
				}
			}

			@include it("600") {
				@include assert {
					@include output {
						@include text-lime-600;
					}

					@include expect {
						color: rgb(101 163 13);
					}
				}
			}

			@include it("700") {
				@include assert {
					@include output {
						@include text-lime-700;
					}

					@include expect {
						color: rgb(77 124 15);
					}
				}
			}

			@include it("800") {
				@include assert {
					@include output {
						@include text-lime-800;
					}

					@include expect {
						color: rgb(63 98 18);
					}
				}
			}

			@include it("900") {
				@include assert {
					@include output {
						@include text-lime-900;
					}

					@include expect {
						color: rgb(54 83 20);
					}
				}
			}

			@include it("950") {
				@include assert {
					@include output {
						@include text-lime-950;
					}

					@include expect {
						color: rgb(26 46 5);
					}
				}
			}
		}

		@include describe("green") {
			@include it("50") {
				@include assert {
					@include output {
						@include text-green-50;
					}

					@include expect {
						color: rgb(240 253 244);
					}
				}
			}

			@include it("100") {
				@include assert {
					@include output {
						@include text-green-100;
					}

					@include expect {
						color: rgb(220 252 231);
					}
				}
			}

			@include it("200") {
				@include assert {
					@include output {
						@include text-green-200;
					}

					@include expect {
						color: rgb(187 247 208);
					}
				}
			}

			@include it("300") {
				@include assert {
					@include output {
						@include text-green-300;
					}

					@include expect {
						color: rgb(134 239 172);
					}
				}
			}

			@include it("400") {
				@include assert {
					@include output {
						@include text-green-400;
					}

					@include expect {
						color: rgb(74 222 128);
					}
				}
			}

			@include it("500") {
				@include assert {
					@include output {
						@include text-green-500;
					}

					@include expect {
						color: rgb(34 197 94);
					}
				}
			}

			@include it("600") {
				@include assert {
					@include output {
						@include text-green-600;
					}

					@include expect {
						color: rgb(22 163 74);
					}
				}
			}

			@include it("700") {
				@include assert {
					@include output {
						@include text-green-700;
					}

					@include expect {
						color: rgb(21 128 61);
					}
				}
			}

			@include it("800") {
				@include assert {
					@include output {
						@include text-green-800;
					}

					@include expect {
						color: rgb(22 101 52);
					}
				}
			}

			@include it("900") {
				@include assert {
					@include output {
						@include text-green-900;
					}

					@include expect {
						color: rgb(20 83 45);
					}
				}
			}

			@include it("950") {
				@include assert {
					@include output {
						@include text-green-950;
					}

					@include expect {
						color: rgb(5 46 22);
					}
				}
			}
		}

		@include describe("emerald") {
			@include it("50") {
				@include assert {
					@include output {
						@include text-emerald-50;
					}

					@include expect {
						color: rgb(236 253 245);
					}
				}
			}

			@include it("100") {
				@include assert {
					@include output {
						@include text-emerald-100;
					}

					@include expect {
						color: rgb(209 250 229);
					}
				}
			}

			@include it("200") {
				@include assert {
					@include output {
						@include text-emerald-200;
					}

					@include expect {
						color: rgb(167 243 208);
					}
				}
			}

			@include it("300") {
				@include assert {
					@include output {
						@include text-emerald-300;
					}

					@include expect {
						color: rgb(110 231 183);
					}
				}
			}

			@include it("400") {
				@include assert {
					@include output {
						@include text-emerald-400;
					}

					@include expect {
						color: rgb(52 211 153);
					}
				}
			}

			@include it("500") {
				@include assert {
					@include output {
						@include text-emerald-500;
					}

					@include expect {
						color: rgb(16 185 129);
					}
				}
			}

			@include it("600") {
				@include assert {
					@include output {
						@include text-emerald-600;
					}

					@include expect {
						color: rgb(5 150 105);
					}
				}
			}

			@include it("700") {
				@include assert {
					@include output {
						@include text-emerald-700;
					}

					@include expect {
						color: rgb(4 120 87);
					}
				}
			}

			@include it("800") {
				@include assert {
					@include output {
						@include text-emerald-800;
					}

					@include expect {
						color: rgb(6 95 70);
					}
				}
			}

			@include it("900") {
				@include assert {
					@include output {
						@include text-emerald-900;
					}

					@include expect {
						color: rgb(6 78 59);
					}
				}
			}

			@include it("950") {
				@include assert {
					@include output {
						@include text-emerald-950;
					}

					@include expect {
						color: rgb(2 44 34);
					}
				}
			}
		}

		@include describe("teal") {
			@include it("50") {
				@include assert {
					@include output {
						@include text-teal-50;
					}

					@include expect {
						color: rgb(240 253 250);
					}
				}
			}

			@include it("100") {
				@include assert {
					@include output {
						@include text-teal-100;
					}

					@include expect {
						color: rgb(204 251 241);
					}
				}
			}

			@include it("200") {
				@include assert {
					@include output {
						@include text-teal-200;
					}

					@include expect {
						color: rgb(153 246 228);
					}
				}
			}

			@include it("300") {
				@include assert {
					@include output {
						@include text-teal-300;
					}

					@include expect {
						color: rgb(94 234 212);
					}
				}
			}

			@include it("400") {
				@include assert {
					@include output {
						@include text-teal-400;
					}

					@include expect {
						color: rgb(45 212 191);
					}
				}
			}

			@include it("500") {
				@include assert {
					@include output {
						@include text-teal-500;
					}

					@include expect {
						color: rgb(20 184 166);
					}
				}
			}

			@include it("600") {
				@include assert {
					@include output {
						@include text-teal-600;
					}

					@include expect {
						color: rgb(13 148 136);
					}
				}
			}

			@include it("700") {
				@include assert {
					@include output {
						@include text-teal-700;
					}

					@include expect {
						color: rgb(15 118 110);
					}
				}
			}

			@include it("800") {
				@include assert {
					@include output {
						@include text-teal-800;
					}

					@include expect {
						color: rgb(17 94 89);
					}
				}
			}

			@include it("900") {
				@include assert {
					@include output {
						@include text-teal-900;
					}

					@include expect {
						color: rgb(19 78 74);
					}
				}
			}

			@include it("950") {
				@include assert {
					@include output {
						@include text-teal-950;
					}

					@include expect {
						color: rgb(4 47 46);
					}
				}
			}
		}

		@include describe("cyan") {
			@include it("50") {
				@include assert {
					@include output {
						@include text-cyan-50;
					}

					@include expect {
						color: rgb(236 254 255);
					}
				}
			}

			@include it("100") {
				@include assert {
					@include output {
						@include text-cyan-100;
					}

					@include expect {
						color: rgb(207 250 254);
					}
				}
			}

			@include it("200") {
				@include assert {
					@include output {
						@include text-cyan-200;
					}

					@include expect {
						color: rgb(165 243 252);
					}
				}
			}

			@include it("300") {
				@include assert {
					@include output {
						@include text-cyan-300;
					}

					@include expect {
						color: rgb(103 232 249);
					}
				}
			}

			@include it("400") {
				@include assert {
					@include output {
						@include text-cyan-400;
					}

					@include expect {
						color: rgb(34 211 238);
					}
				}
			}

			@include it("500") {
				@include assert {
					@include output {
						@include text-cyan-500;
					}

					@include expect {
						color: rgb(6 182 212);
					}
				}
			}

			@include it("600") {
				@include assert {
					@include output {
						@include text-cyan-600;
					}

					@include expect {
						color: rgb(8 145 178);
					}
				}
			}

			@include it("700") {
				@include assert {
					@include output {
						@include text-cyan-700;
					}

					@include expect {
						color: rgb(14 116 144);
					}
				}
			}

			@include it("800") {
				@include assert {
					@include output {
						@include text-cyan-800;
					}

					@include expect {
						color: rgb(21 94 117);
					}
				}
			}

			@include it("900") {
				@include assert {
					@include output {
						@include text-cyan-900;
					}

					@include expect {
						color: rgb(22 78 99);
					}
				}
			}

			@include it("950") {
				@include assert {
					@include output {
						@include text-cyan-950;
					}

					@include expect {
						color: rgb(8 51 68);
					}
				}
			}
		}

		@include describe("sky") {
			@include it("50") {
				@include assert {
					@include output {
						@include text-sky-50;
					}

					@include expect {
						color: rgb(240 249 255);
					}
				}
			}

			@include it("100") {
				@include assert {
					@include output {
						@include text-sky-100;
					}

					@include expect {
						color: rgb(224 242 254);
					}
				}
			}

			@include it("200") {
				@include assert {
					@include output {
						@include text-sky-200;
					}

					@include expect {
						color: rgb(186 230 253);
					}
				}
			}

			@include it("300") {
				@include assert {
					@include output {
						@include text-sky-300;
					}

					@include expect {
						color: rgb(125 211 252);
					}
				}
			}

			@include it("400") {
				@include assert {
					@include output {
						@include text-sky-400;
					}

					@include expect {
						color: rgb(56 189 248);
					}
				}
			}

			@include it("500") {
				@include assert {
					@include output {
						@include text-sky-500;
					}

					@include expect {
						color: rgb(14 165 233);
					}
				}
			}

			@include it("600") {
				@include assert {
					@include output {
						@include text-sky-600;
					}

					@include expect {
						color: rgb(2 132 199);
					}
				}
			}

			@include it("700") {
				@include assert {
					@include output {
						@include text-sky-700;
					}

					@include expect {
						color: rgb(3 105 161);
					}
				}
			}

			@include it("800") {
				@include assert {
					@include output {
						@include text-sky-800;
					}

					@include expect {
						color: rgb(7 89 133);
					}
				}
			}

			@include it("900") {
				@include assert {
					@include output {
						@include text-sky-900;
					}

					@include expect {
						color: rgb(12 74 110);
					}
				}
			}

			@include it("950") {
				@include assert {
					@include output {
						@include text-sky-950;
					}

					@include expect {
						color: rgb(8 47 73);
					}
				}
			}
		}

		@include describe("blue") {
			@include it("50") {
				@include assert {
					@include output {
						@include text-blue-50;
					}

					@include expect {
						color: rgb(239 246 255);
					}
				}
			}

			@include it("100") {
				@include assert {
					@include output {
						@include text-blue-100;
					}

					@include expect {
						color: rgb(219 234 254);
					}
				}
			}

			@include it("200") {
				@include assert {
					@include output {
						@include text-blue-200;
					}

					@include expect {
						color: rgb(191 219 254);
					}
				}
			}

			@include it("300") {
				@include assert {
					@include output {
						@include text-blue-300;
					}

					@include expect {
						color: rgb(147 197 253);
					}
				}
			}

			@include it("400") {
				@include assert {
					@include output {
						@include text-blue-400;
					}

					@include expect {
						color: rgb(96 165 250);
					}
				}
			}

			@include it("500") {
				@include assert {
					@include output {
						@include text-blue-500;
					}

					@include expect {
						color: rgb(59 130 246);
					}
				}
			}

			@include it("600") {
				@include assert {
					@include output {
						@include text-blue-600;
					}

					@include expect {
						color: rgb(37 99 235);
					}
				}
			}

			@include it("700") {
				@include assert {
					@include output {
						@include text-blue-700;
					}

					@include expect {
						color: rgb(29 78 216);
					}
				}
			}

			@include it("800") {
				@include assert {
					@include output {
						@include text-blue-800;
					}

					@include expect {
						color: rgb(30 64 175);
					}
				}
			}

			@include it("900") {
				@include assert {
					@include output {
						@include text-blue-900;
					}

					@include expect {
						color: rgb(30 58 138);
					}
				}
			}

			@include it("950") {
				@include assert {
					@include output {
						@include text-blue-950;
					}

					@include expect {
						color: rgb(23 37 84);
					}
				}
			}
		}

		@include describe("indigo") {
			@include it("50") {
				@include assert {
					@include output {
						@include text-indigo-50;
					}

					@include expect {
						color: rgb(238 242 255);
					}
				}
			}

			@include it("100") {
				@include assert {
					@include output {
						@include text-indigo-100;
					}

					@include expect {
						color: rgb(224 231 255);
					}
				}
			}

			@include it("200") {
				@include assert {
					@include output {
						@include text-indigo-200;
					}

					@include expect {
						color: rgb(199 210 254);
					}
				}
			}

			@include it("300") {
				@include assert {
					@include output {
						@include text-indigo-300;
					}

					@include expect {
						color: rgb(165 180 252);
					}
				}
			}

			@include it("400") {
				@include assert {
					@include output {
						@include text-indigo-400;
					}

					@include expect {
						color: rgb(129 140 248);
					}
				}
			}

			@include it("500") {
				@include assert {
					@include output {
						@include text-indigo-500;
					}

					@include expect {
						color: rgb(99 102 241);
					}
				}
			}

			@include it("600") {
				@include assert {
					@include output {
						@include text-indigo-600;
					}

					@include expect {
						color: rgb(79 70 229);
					}
				}
			}

			@include it("700") {
				@include assert {
					@include output {
						@include text-indigo-700;
					}

					@include expect {
						color: rgb(67 56 202);
					}
				}
			}

			@include it("800") {
				@include assert {
					@include output {
						@include text-indigo-800;
					}

					@include expect {
						color: rgb(55 48 163);
					}
				}
			}

			@include it("900") {
				@include assert {
					@include output {
						@include text-indigo-900;
					}

					@include expect {
						color: rgb(49 46 129);
					}
				}
			}

			@include it("950") {
				@include assert {
					@include output {
						@include text-indigo-950;
					}

					@include expect {
						color: rgb(30 27 75);
					}
				}
			}
		}

		@include describe("violet") {
			@include it("50") {
				@include assert {
					@include output {
						@include text-violet-50;
					}

					@include expect {
						color: rgb(245 243 255);
					}
				}
			}

			@include it("100") {
				@include assert {
					@include output {
						@include text-violet-100;
					}

					@include expect {
						color: rgb(237 233 254);
					}
				}
			}

			@include it("200") {
				@include assert {
					@include output {
						@include text-violet-200;
					}

					@include expect {
						color: rgb(221 214 254);
					}
				}
			}

			@include it("300") {
				@include assert {
					@include output {
						@include text-violet-300;
					}

					@include expect {
						color: rgb(196 181 253);
					}
				}
			}

			@include it("400") {
				@include assert {
					@include output {
						@include text-violet-400;
					}

					@include expect {
						color: rgb(167 139 250);
					}
				}
			}

			@include it("500") {
				@include assert {
					@include output {
						@include text-violet-500;
					}

					@include expect {
						color: rgb(139 92 246);
					}
				}
			}

			@include it("600") {
				@include assert {
					@include output {
						@include text-violet-600;
					}

					@include expect {
						color: rgb(124 58 237);
					}
				}
			}

			@include it("700") {
				@include assert {
					@include output {
						@include text-violet-700;
					}

					@include expect {
						color: rgb(109 40 217);
					}
				}
			}

			@include it("800") {
				@include assert {
					@include output {
						@include text-violet-800;
					}

					@include expect {
						color: rgb(91 33 182);
					}
				}
			}

			@include it("900") {
				@include assert {
					@include output {
						@include text-violet-900;
					}

					@include expect {
						color: rgb(76 29 149);
					}
				}
			}

			@include it("950") {
				@include assert {
					@include output {
						@include text-violet-950;
					}

					@include expect {
						color: rgb(46 16 101);
					}
				}
			}
		}

		@include describe("purple") {
			@include it("50") {
				@include assert {
					@include output {
						@include text-purple-50;
					}

					@include expect {
						color: rgb(250 245 255);
					}
				}
			}

			@include it("100") {
				@include assert {
					@include output {
						@include text-purple-100;
					}

					@include expect {
						color: rgb(243 232 255);
					}
				}
			}

			@include it("200") {
				@include assert {
					@include output {
						@include text-purple-200;
					}

					@include expect {
						color: rgb(233 213 255);
					}
				}
			}

			@include it("300") {
				@include assert {
					@include output {
						@include text-purple-300;
					}

					@include expect {
						color: rgb(216 180 254);
					}
				}
			}

			@include it("400") {
				@include assert {
					@include output {
						@include text-purple-400;
					}

					@include expect {
						color: rgb(192 132 252);
					}
				}
			}

			@include it("500") {
				@include assert {
					@include output {
						@include text-purple-500;
					}

					@include expect {
						color: rgb(168 85 247);
					}
				}
			}

			@include it("600") {
				@include assert {
					@include output {
						@include text-purple-600;
					}

					@include expect {
						color: rgb(147 51 234);
					}
				}
			}

			@include it("700") {
				@include assert {
					@include output {
						@include text-purple-700;
					}

					@include expect {
						color: rgb(126 34 206);
					}
				}
			}

			@include it("800") {
				@include assert {
					@include output {
						@include text-purple-800;
					}

					@include expect {
						color: rgb(107 33 168);
					}
				}
			}

			@include it("900") {
				@include assert {
					@include output {
						@include text-purple-900;
					}

					@include expect {
						color: rgb(88 28 135);
					}
				}
			}

			@include it("950") {
				@include assert {
					@include output {
						@include text-purple-950;
					}

					@include expect {
						color: rgb(59 7 100);
					}
				}
			}
		}

		@include describe("fuchsia") {
			@include it("50") {
				@include assert {
					@include output {
						@include text-fuchsia-50;
					}

					@include expect {
						color: rgb(253 244 255);
					}
				}
			}

			@include it("100") {
				@include assert {
					@include output {
						@include text-fuchsia-100;
					}

					@include expect {
						color: rgb(250 232 255);
					}
				}
			}

			@include it("200") {
				@include assert {
					@include output {
						@include text-fuchsia-200;
					}

					@include expect {
						color: rgb(245 208 254);
					}
				}
			}

			@include it("300") {
				@include assert {
					@include output {
						@include text-fuchsia-300;
					}

					@include expect {
						color: rgb(240 171 252);
					}
				}
			}

			@include it("400") {
				@include assert {
					@include output {
						@include text-fuchsia-400;
					}

					@include expect {
						color: rgb(232 121 249);
					}
				}
			}

			@include it("500") {
				@include assert {
					@include output {
						@include text-fuchsia-500;
					}

					@include expect {
						color: rgb(217 70 239);
					}
				}
			}

			@include it("600") {
				@include assert {
					@include output {
						@include text-fuchsia-600;
					}

					@include expect {
						color: rgb(192 38 211);
					}
				}
			}

			@include it("700") {
				@include assert {
					@include output {
						@include text-fuchsia-700;
					}

					@include expect {
						color: rgb(162 28 175);
					}
				}
			}

			@include it("800") {
				@include assert {
					@include output {
						@include text-fuchsia-800;
					}

					@include expect {
						color: rgb(134 25 143);
					}
				}
			}

			@include it("900") {
				@include assert {
					@include output {
						@include text-fuchsia-900;
					}

					@include expect {
						color: rgb(112 26 117);
					}
				}
			}

			@include it("950") {
				@include assert {
					@include output {
						@include text-fuchsia-950;
					}

					@include expect {
						color: rgb(74 4 78);
					}
				}
			}
		}

    @include describe("pink") {
      @include it("50") {
        @include assert {
          @include output {
            @include text-pink-50;
          }
    
          @include expect {
            color: rgb(253 242 248);
          }
        }
      }
    
      @include it("100") {
        @include assert {
          @include output {
            @include text-pink-100;
          }
    
          @include expect {
            color: rgb(252 231 243);
          }
        }
      }
    
      @include it("200") {
        @include assert {
          @include output {
            @include text-pink-200;
          }
    
          @include expect {
            color: rgb(251 207 232);
          }
        }
      }
    
      @include it("300") {
        @include assert {
          @include output {
            @include text-pink-300;
          }
    
          @include expect {
            color: rgb(249 168 212);
          }
        }
      }
    
      @include it("400") {
        @include assert {
          @include output {
            @include text-pink-400;
          }
    
          @include expect {
            color:rgb(244 114 182);
          }
        }
      }
    
      @include it("500") {
        @include assert {
          @include output {
            @include text-pink-500;
          }
    
          @include expect {
            color: rgb(236 72 153);
          }
        }
      }
    
      @include it("600") {
        @include assert {
          @include output {
            @include text-pink-600;
          }
    
          @include expect {
            color: rgb(219 39 119);
          }
        }
      }
    
      @include it("700") {
        @include assert {
          @include output {
            @include text-pink-700;
          }
    
          @include expect {
            color: rgb(190 24 93);
          }
        }
      }
    
      @include it("800") {
        @include assert {
          @include output {
            @include text-pink-800;
          }
    
          @include expect {
            color: rgb(157 23 77);
          }
        }
      }
    
      @include it("900") {
        @include assert {
          @include output {
            @include text-pink-900;
          }
    
          @include expect {
            color:rgb(131 24 67);
          }
        }
      }
    
      @include it("950") {
        @include assert {
          @include output {
            @include text-pink-950;
          }
    
          @include expect {
            color: rgb(80 7 36);
          }
        }
      }
    }

    @include describe("rose") {
      @include it("50") {
        @include assert {
          @include output {
            @include text-rose-50;
          }
    
          @include expect {
            color: rgb(255 241 242);
          }
        }
      }
    
      @include it("100") {
        @include assert {
          @include output {
            @include text-rose-100;
          }
    
          @include expect {
            color: rgb(255 228 230);
          }
        }
      }
    
      @include it("200") {
        @include assert {
          @include output {
            @include text-rose-200;
          }
    
          @include expect {
            color: rgb(254 205 211);
          }
        }
      }
    
      @include it("300") {
        @include assert {
          @include output {
            @include text-rose-300;
          }
    
          @include expect {
            color: rgb(253 164 175);
          }
        }
      }
    
      @include it("400") {
        @include assert {
          @include output {
            @include text-rose-400;
          }
    
          @include expect {
            color:rgb(251 113 133);
          }
        }
      }
    
      @include it("500") {
        @include assert {
          @include output {
            @include text-rose-500;
          }
    
          @include expect {
            color: rgb(244 63 94);
          }
        }
      }
    
      @include it("600") {
        @include assert {
          @include output {
            @include text-rose-600;
          }
    
          @include expect {
            color: rgb(225 29 72);
          }
        }
      }
    
      @include it("700") {
        @include assert {
          @include output {
            @include text-rose-700;
          }
    
          @include expect {
            color: rgb(190 18 60);
          }
        }
      }
    
      @include it("800") {
        @include assert {
          @include output {
            @include text-rose-800;
          }
    
          @include expect {
            color: rgb(159 18 57);
          }
        }
      }
    
      @include it("900") {
        @include assert {
          @include output {
            @include text-rose-900;
          }
    
          @include expect {
            color: rgb(136 19 55);
          }
        }
      }
    
      @include it("950") {
        @include assert {
          @include output {
            @include text-rose-950;
          }
    
          @include expect {
            color: rgb(76 5 25);
          }
        }
      }
    }
	}

	// @include describe("RWD") {
	// 	@include describe("SM") {
	// 		@include it("群組二") {
	// 			@include assert {
	// 				@include output {
	// 					@include sm\:群組二;
	// 				}

	// 				@include expect {
	// 					@media (min-width: $__MEDIA-SM) {
	// 						群組二: 1.3333333333;
	// 					}
	// 				}
	// 			}
	// 		}
	// 	}
	// }

	// @include describe("Custom") {
	// 	@include it("群組二") {
	// 		@include assert {
	// 			@include output {
	// 				@include 群組二;
	// 			}

	// 			@include expect {
	// 				群組二: 1.3333333333;
	// 			}
	// 		}
	// 	}
	// }
}
