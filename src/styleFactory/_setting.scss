// true: faster updating speed <1.66 MB>. arbitrary classes in RWD.
// false: slow <? MB>. every classes in RWD.
$isLiteMode: true;

// controlling render output
$Basic: true;
$Rwd: true;
$Custom: true;

// render output
/*x
// Using Built-In Modules
@use "sass:meta";
@use "sass:math";
@use "sass:list";

// Breakpoints
$rwd-sm: 640px;
$rwd-md: 768px;
$rwd-lg: 1024px;
$rwd-xl: 1280px;
$rwd-2xl: 1536px;

// Gradient Color Stops
$--gradient-direction: "NO-DIRECTION"; // Display purpose
$--tw-gradient-from: "NO-FROM-COLOR"; // Display purpose
$--tw-gradient-via: null; // detects the use of 2 or 3 gradient stops
$--tw-gradient-to: transparent;
$--tw-gradient-from-position: null;
$--tw-gradient-via-position: null;
$--tw-gradient-to-position: null;

// Space Between
$--space-current-value: 0; 
$--tw-space-x-reverse: 0;
$--tw-space-y-reverse: 0;

// Divide Width
$--divide-current-value: 0;
$--tw-divide-x-reverse: 0;
$--tw-divide-y-reverse: 0;

// Box Shadow
$--tw-ring-offset-width: 0;
$--tw-ring-offset-color: #fff; 
$--tw-ring-inset: null;
$--ring-width: 0;
$--tw-ring-color: rgb(59 130 246 / 0.5); // default ring color
$-shadow-token: null;
$--shadow-length: 0 0 0 0;
$--tw-shadow-color: #fff;

// Scroll Snap Type
$--tw-scroll-snap-strictness: proximity;

// Transforms
$--tw-translate-x: 0;
$--tw-translate-y: 0;
$--tw-rotate: 0; 
$--tw-skew-x: 0; 
$--tw-skew-y: 0;
$--tw-scale-x: 1;
$--tw-scale-y: 1;

// Filters
$--tw-blur: null;
$--tw-brightness: null;
$--tw-contrast: null;
$--tw-grayscale: null;
$--tw-hue-rotate: null;
$--tw-invert: null;
$--tw-saturate: null;
$--tw-sepia: null;
$--tw-drop-shadow: null;
$--tw-backdrop-blur: null;
$--tw-backdrop-brightness: null;
$--tw-backdrop-contrast: null;
$--tw-backdrop-grayscale: null;
$--tw-backdrop-hue-rotate: null;
$--tw-backdrop-invert: null;
$--tw-backdrop-opacity: null;
$--tw-backdrop-saturate: null;
$--tw-backdrop-sepia: null;

// Helper Function
@function get_Opa($value) {
  $temp: null;

  // 5、10、15...100
  @if $v >1 and math.is-unitless($v) {
    @if not($v % 5==0 and $v <=100) {
      @error "This @mixin combines tailwind /value & /[value] into one(file size concerns). Try: 0, 5, 10...100 or 0.05, 47%... see https://tailwindcss.com/docs/opacity";
    }

    $temp: #{$v / 100};
  }

  // 0、0.35、35%
  @else {
    $temp: #{$v};
  }

  @return $temp;
}

@function get_BgImg() {
  @if $--tw-gradient-via==null {
    @return linear-gradient($--gradient-direction,
      $--tw-gradient-from $--tw-gradient-from-position,
      $--tw-gradient-to $--tw-gradient-to-position);
  }

  @else {
    @return linear-gradient($--gradient-direction,
      $--tw-gradient-from $--tw-gradient-from-position,
      $--tw-gradient-via $--tw-gradient-via-position,
      $--tw-gradient-to $--tw-gradient-to-position);
  }
}


@mixin get_SpaceX($value: $--space-current-value) {
  $--space-current-value: $value !global; // update to global;

  >*~* {
    margin-left: $--space-current-value * (1 - $--tw-space-x-reverse);
    margin-right: $--space-current-value * $--tw-space-x-reverse;
  }
}

@mixin get_SpaceY($value: $--space-current-value) {
  $--space-current-value: $value !global; // update to global;

  >*~* {
    margin-top: $--space-current-value * (1 - $--tw-space-y-reverse);
    margin-bottom: $--space-current-value * $--tw-space-y-reverse;
  }
}

@function get_LineHeight($value) {
  $temp: null;

  @if meta.type-of($value)==number {

    // no unit: 3、4... 10
    @if math.is-unitless($value) {
      @if not ($value>=3 and $value <=10) {
        @error "Only 3 ~ 10, see in tailwind play";
      }

      $temp: math.floor($value) * 0.25rem;
    }

    // has unit: 1.5px、1rem、3%...
    @else {
      $temp: $value;
    }
  }

  @else if meta.type-of($value)==string {
    @if $value==none {
      $temp: 1;
    }

    @else if $value==tight {
      $temp: 1.25;
    }

    @else if $value==snug {
      $temp: 1.375;
    }

    @else if $value==normal {
      $temp: 1.5;
    }

    @else if $value==relax {
      $temp: 1.625;
    }

    @else if $value==loose {
      $temp: 2;
    }

    @else {
      @error "Parameter does not exist, see in tailwind play";
    }
  }

  @return $temp;
}

@mixin get_BoxShadow {
  $--tw-ring-offset-shadow: $--tw-ring-inset 0 0 0 $--tw-ring-offset-width $--tw-ring-offset-color;
  $--tw-ring-shadow: $--tw-ring-inset 0 0 0 $--ring-width $--tw-ring-color;
  $--tw-shadow: null;


  @if list.index(shadow md lg xl, $-shadow-token) {
    $--tw-shadow: list.nth($--shadow-length, 1) $--tw-shadow-color,
      list.nth($--shadow-length, 2) $--tw-shadow-color;
  }

  @else if $-shadow-token ==inner {
    $--tw-shadow: inset $--shadow-length $--tw-shadow-color;
  }

  @else {
    $--tw-shadow: $--shadow-length $--tw-shadow-color;
  }

  box-shadow: $--tw-ring-offset-shadow,
  $--tw-ring-shadow,
  $--tw-shadow;
}

@mixin get_DivideX($value: $--divide-current-value) {
  $--divide-current-value: $value !global; // update to global;

  >*~* {
    border-left-width: $--divide-current-value * (1 - $--tw-divide-x-reverse);
    border-right-width: $--divide-current-value * $--tw-divide-x-reverse;
  }
}


@mixin get_DivideY($value: $--divide-current-value) {
  $--divide-current-value: $value !global; // update to global;

  >*~* {
    border-top-width: $--divide-current-value * (1 - $--tw-divide-y-reverse);
    border-bottom-width: $--divide-current-value * $--tw-divide-y-reverse;
  }
}


@mixin get_Transform {
  transform: translate($--tw-translate-x, $--tw-translate-y) rotate($--tw-rotate) skewX($--tw-skew-x) skewY($--tw-skew-y) scaleX($--tw-scale-x) scaleY($--tw-scale-y);
}

@mixin get_Filter {
  filter: $--tw-blur $--tw-brightness $--tw-contrast $--tw-grayscale $--tw-hue-rotate $--tw-invert $--tw-saturate $--tw-sepia $--tw-drop-shadow;
}

@mixin get_BackdropFilter {
  backdrop-filter: $--tw-backdrop-blur $--tw-backdrop-brightness $--tw-backdrop-contrast $--tw-backdrop-grayscale $--tw-backdrop-hue-rotate $--tw-backdrop-invert $--tw-backdrop-opacity $--tw-backdrop-saturate $--tw-backdrop-sepia;
}
x*/
