// true: faster updating speed <1.66 MB>. arbitrary classes in RWD.
// false: slow <? MB>. every classes in RWD.
$isLiteMode: true;

// controlling render output
$Basic: true;
$Rwd: true;
$Custom: true;

// render output
/*x
// Using Built-In Modules
@use "sass:meta";
@use "sass:math";
@use "sass:list";

// Breakpoints
$rwd-sm: 640px;
$rwd-md: 768px;
$rwd-lg: 1024px;
$rwd-xl: 1280px;
$rwd-2xl: 1536px;

// Gradient Color Stops
$-gradient-direction: "NO-DIRECTION"; // Display purpose
$--tw-gradient-from: "NO-FROM-COLOR"; // Display purpose
$--tw-gradient-via: null; // @function get_BgImg() detects the use of 2 or 3 gradient stops
$--tw-gradient-to: transparent;
$--tw-gradient-from-position: null;
$--tw-gradient-via-position: null;
$--tw-gradient-to-position: null;

// Space Between
$-space-value: 0; // let space-x/y-reverse to know what the current value is
$--tw-space-x-reverse: 0;
$--tw-space-y-reverse: 0;


// Helper Function
@function get_Opacity($value) {
  $temp: null;

  // 5、10、15...100
  @if $value >1 and math.is-unitless($value) {
    @if not ($value % 5==0 and $value <=100) {
      @error "only 5、10、15...100, https://tailwindcss.com/docs/opacity";
    }

    $temp: calc(#/*x{$value} /100);
  }
  // 0、0.35、35%
  @else {
    $temp: #/*x{$value};
  }

  @return $temp;
}

@function get_BgImg() {
  @if $--tw-gradient-via==null {
    @return linear-gradient($-gradient-direction,
      $--tw-gradient-from $--tw-gradient-from-position,
      $--tw-gradient-to $--tw-gradient-to-position);
  }
  @else {
    @return linear-gradient($-gradient-direction,
      $--tw-gradient-from $--tw-gradient-from-position,
      $--tw-gradient-via $--tw-gradient-via-position,
      $--tw-gradient-to $--tw-gradient-to-position);
  }
}

@mixin get_SpaceY($value: $-space-value) {
  $-space-value: $value !global;
  > * + * {
    margin-top: $-space-value * (1 - $--tw-space-y-reverse);
    margin-bottom: $-space-value * $--tw-space-y-reverse;
  }
}

@mixin get_SpaceX($value: $-space-value) {
  $-space-value: $value !global;
  > * + * {
    margin-left: $-space-value * (1 - $--tw-space-x-reverse);
    margin-right: $-space-value * $--tw-space-x-reverse;
  }
}


@function get_LineHeight($value) {
  $temp: null;

  @if meta.type-of($value)==number {

    // no unit: 3、4... 10
    @if math.is-unitless($value) {
      @if not ($value>=3 and $value <=10) {
        @error "Only 3 ~ 10, see in tailwind play";
      }

      $temp: math.floor($value) * 0.25rem;
    }

    // has unit: 1.5px、1rem、3%...
    @else {
      $temp: $value;
    }
  }

  @else if meta.type-of($value)==string {
    @if $value==none {
      $temp: 1;
    }

    @else if $value==tight {
      $temp: 1.25;
    }

    @else if $value==snug {
      $temp: 1.375;
    }

    @else if $value==normal {
      $temp: 1.5;
    }

    @else if $value==relax {
      $temp: 1.625;
    }

    @else if $value==loose {
      $temp: 2;
    }

    @else {
      @error "Parameter does not exist, see in tailwind play";
    }
  }

  @return $temp;
}



x*/
