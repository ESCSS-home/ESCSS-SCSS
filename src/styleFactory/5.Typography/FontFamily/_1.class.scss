@use "../../setting" as *;

/* Font Family */
@if $Basic {
  // /*x
  @mixin font-sans {
    font-family: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji",
      "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
  }

  @mixin font-serif {
    font-family: ui-serif, Georgia, Cambria, "Times New Roman", Times, serif;
  }

  @mixin font-mono {
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
      "Liberation Mono", "Courier New", monospace;
  }

  // x*/
}

@if $Rwd {
  @if $sizeMode == 0 or $sizeMode == 1 {
    // /*x
    @mixin sm\:font-sans {
      @media (min-width: map.get($RWD, sm)) {
        font-family: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji",
          "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
      }
    }

    @mixin sm\:font-serif {
      @media (min-width: map.get($RWD, sm)) {
        font-family: ui-serif, Georgia, Cambria, "Times New Roman", Times, serif;
      }
    }

    @mixin sm\:font-mono {
      @media (min-width: map.get($RWD, sm)) {
        font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
          "Liberation Mono", "Courier New", monospace;
      }
    }

    @mixin md\:font-sans {
      @media (min-width: map.get($RWD, md)) {
        font-family: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji",
          "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
      }
    }

    @mixin md\:font-serif {
      @media (min-width: map.get($RWD, md)) {
        font-family: ui-serif, Georgia, Cambria, "Times New Roman", Times, serif;
      }
    }

    @mixin md\:font-mono {
      @media (min-width: map.get($RWD, md)) {
        font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
          "Liberation Mono", "Courier New", monospace;
      }
    }

    @mixin lg\:font-sans {
      @media (min-width: map.get($RWD, lg)) {
        font-family: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji",
          "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
      }
    }

    @mixin lg\:font-serif {
      @media (min-width: map.get($RWD, lg)) {
        font-family: ui-serif, Georgia, Cambria, "Times New Roman", Times, serif;
      }
    }

    @mixin lg\:font-mono {
      @media (min-width: map.get($RWD, lg)) {
        font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
          "Liberation Mono", "Courier New", monospace;
      }
    }

    @mixin xl\:font-sans {
      @media (min-width: map.get($RWD, xl)) {
        font-family: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji",
          "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
      }
    }

    @mixin xl\:font-serif {
      @media (min-width: map.get($RWD, xl)) {
        font-family: ui-serif, Georgia, Cambria, "Times New Roman", Times, serif;
      }
    }

    @mixin xl\:font-mono {
      @media (min-width: map.get($RWD, xl)) {
        font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
          "Liberation Mono", "Courier New", monospace;
      }
    }

    @mixin \2xl\:font-sans {
      @media (min-width: map.get($RWD, 2xl)) {
        font-family: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji",
          "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
      }
    }

    @mixin \2xl\:font-serif {
      @media (min-width: map.get($RWD, 2xl)) {
        font-family: ui-serif, Georgia, Cambria, "Times New Roman", Times, serif;
      }
    }

    @mixin \2xl\:font-mono {
      @media (min-width: map.get($RWD, 2xl)) {
        font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas,
          "Liberation Mono", "Courier New", monospace;
      }
    }

    // x*/
  }
}
@if $Custom {
  // /*x
  @mixin font-($v) {
    @if meta.type-of($value) ==string {
      font-family: $v;
    } @else {
      font-weight: $v;
    }
  }

  @mixin sm\:font-($v) {
    @if meta.type-of($value) ==string {
      @include r(sm, font-family, $v);
    } @else {
      @include r(sm, font-weight, $v);
    }
  }

  @mixin md\:font-($v) {
    @if meta.type-of($value) ==string {
      @include r(md, font-family, $v);
    } @else {
      @include r(md, font-weight, $v);
    }
  }

  @mixin lg\:font-($v) {
    @if meta.type-of($value) ==string {
      @include r(lg, font-family, $v);
    } @else {
      @include r(lg, font-weight, $v);
    }
  }

  @mixin xl\:font-($v) {
    @if meta.type-of($value) ==string {
      @include r(xl, font-family, $v);
    } @else {
      @include r(xl, font-weight, $v);
    }
  }

  @mixin \2xl\:font-($v) {
    @if meta.type-of($value) ==string {
      @include r(2xl, font-family, $v);
    } @else {
      @include r(2xl, font-weight, $v);
    }
  }

  // x*/
}
