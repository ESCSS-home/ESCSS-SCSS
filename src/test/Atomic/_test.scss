@use "../mode0" as *;
@use "true" as *;

@include describe("Atomic") {
  @include describe("Basic") {
    @include it("aspect-ratio(0)") {
      @include assert {
        @include output {
          @include aspect-ratio(0);
          @include reset;
        }

        @include expect {
          aspect-ratio: 0;
        }
      }
    }

    @include it("columns(0)") {
      @include assert {
        @include output {
          @include columns(0);
          @include reset;
        }

        @include expect {
          columns: 0;
        }
      }
    }

    @include it("object-position(0)") {
      @include assert {
        @include output {
          @include object-position(0);
          @include reset;
        }

        @include expect {
          object-position: 0;
        }
      }
    }

    @include it("inset(0)") {
      @include assert {
        @include output {
          @include inset(0);
          @include reset;
        }

        @include expect {
          inset: 0;
        }
      }
    }

    @include it("inset-inline-start(0)") {
      @include assert {
        @include output {
          @include inset-inline-start(0);
          @include reset;
        }

        @include expect {
          inset-inline-start: 0;
        }
      }
    }

    @include it("inset-inline-end(0)") {
      @include assert {
        @include output {
          @include inset-inline-end(0);
          @include reset;
        }

        @include expect {
          inset-inline-end: 0;
        }
      }
    }

    @include it("top(0)") {
      @include assert {
        @include output {
          @include top(0);
          @include reset;
        }

        @include expect {
          top: 0;
        }
      }
    }

    @include it("right(0)") {
      @include assert {
        @include output {
          @include right(0);
          @include reset;
        }

        @include expect {
          right: 0;
        }
      }
    }

    @include it("bottom(0)") {
      @include assert {
        @include output {
          @include bottom(0);
          @include reset;
        }

        @include expect {
          bottom: 0;
        }
      }
    }

    @include it("left(0)") {
      @include assert {
        @include output {
          @include left(0);
          @include reset;
        }

        @include expect {
          left: 0;
        }
      }
    }

    @include it("z-index(0)") {
      @include assert {
        @include output {
          @include z-index(0);
          @include reset;
        }

        @include expect {
          z-index: 0;
        }
      }
    }

    @include it("border-spacing(0)") {
      @include assert {
        @include output {
          @include border-spacing(0);
          @include reset;
        }

        @include expect {
          border-spacing: 0;
        }
      }
    }

    @include it("animation(0)") {
      @include assert {
        @include output {
          @include animation(0);
          @include reset;
        }

        @include expect {
          animation: 0;
        }
      }
    }

    @include it("transition-delay(0)") {
      @include assert {
        @include output {
          @include transition-delay(0);
          @include reset;
        }

        @include expect {
          transition-delay: 0;
        }
      }
    }

    @include it("transition-property(0)") {
      @include assert {
        @include output {
          @include transition-property(0);
          @include reset;
        }

        @include expect {
          transition-property: 0;
        }
      }
    }

    @include it("transition-timing-function(0)") {
      @include assert {
        @include output {
          @include transition-timing-function(0);
          @include reset;
        }

        @include expect {
          transition-timing-function: 0;
        }
      }
    }

    @include it("transition-duration(0)") {
      @include assert {
        @include output {
          @include transition-duration(0);
          @include reset;
        }

        @include expect {
          transition-duration: 0;
        }
      }
    }

    @include it("transform(0)") {
      @include assert {
        @include output {
          @include transform(0);
          @include reset;
        }

        @include expect {
          transform: 0;
        }
      }
    }

    @include it("transform-origin(0)") {
      @include assert {
        @include output {
          @include transform-origin(0);
          @include reset;
        }

        @include expect {
          transform-origin: 0;
        }
      }
    }

    @include it("accent-color(0)") {
      @include assert {
        @include output {
          @include accent-color(0);
          @include reset;
        }

        @include expect {
          accent-color: 0;
        }
      }
    }

    @include it("caret-color(0)") {
      @include assert {
        @include output {
          @include caret-color(0);
          @include reset;
        }

        @include expect {
          caret-color: 0;
        }
      }
    }

    @include it("cursor-(0,02)") {
      @include assert {
        @include output {
          @include cursor-(0, 02);
          @include reset;
        }

        @include expect {
          cursor: 0, 02;
        }
      }
    }

    @include it("scroll-margin(0)") {
      @include assert {
        @include output {
          @include scroll-margin(0);
          @include reset;
        }

        @include expect {
          scroll-margin: 0;
        }
      }
    }

    @include it("scroll-margin-inline-start(0)") {
      @include assert {
        @include output {
          @include scroll-margin-inline-start(0);
          @include reset;
        }

        @include expect {
          scroll-margin-inline-start: 0;
        }
      }
    }

    @include it("scroll-margin-inline-end(0)") {
      @include assert {
        @include output {
          @include scroll-margin-inline-end(0);
          @include reset;
        }

        @include expect {
          scroll-margin-inline-end: 0;
        }
      }
    }

    @include it("scroll-margin-top(0)") {
      @include assert {
        @include output {
          @include scroll-margin-top(0);
          @include reset;
        }

        @include expect {
          scroll-margin-top: 0;
        }
      }
    }

    @include it("scroll-margin-right(0)") {
      @include assert {
        @include output {
          @include scroll-margin-right(0);
          @include reset;
        }

        @include expect {
          scroll-margin-right: 0;
        }
      }
    }

    @include it("scroll-margin-bottom(0)") {
      @include assert {
        @include output {
          @include scroll-margin-bottom(0);
          @include reset;
        }

        @include expect {
          scroll-margin-bottom: 0;
        }
      }
    }

    @include it("scroll-margin-left(0)") {
      @include assert {
        @include output {
          @include scroll-margin-left(0);
          @include reset;
        }

        @include expect {
          scroll-margin-left: 0;
        }
      }
    }

    @include it("scroll-padding(0)") {
      @include assert {
        @include output {
          @include scroll-padding(0);
          @include reset;
        }

        @include expect {
          scroll-padding: 0;
        }
      }
    }

    @include it("scroll-padding-inline-start(0)") {
      @include assert {
        @include output {
          @include scroll-padding-inline-start(0);
          @include reset;
        }

        @include expect {
          scroll-padding-inline-start: 0;
        }
      }
    }

    @include it("scroll-padding-inline-end(0)") {
      @include assert {
        @include output {
          @include scroll-padding-inline-end(0);
          @include reset;
        }

        @include expect {
          scroll-padding-inline-end: 0;
        }
      }
    }

    @include it("scroll-padding-top(0)") {
      @include assert {
        @include output {
          @include scroll-padding-top(0);
          @include reset;
        }

        @include expect {
          scroll-padding-top: 0;
        }
      }
    }

    @include it("scroll-padding-right(0)") {
      @include assert {
        @include output {
          @include scroll-padding-right(0);
          @include reset;
        }

        @include expect {
          scroll-padding-right: 0;
        }
      }
    }

    @include it("scroll-padding-bottom(0)") {
      @include assert {
        @include output {
          @include scroll-padding-bottom(0);
          @include reset;
        }

        @include expect {
          scroll-padding-bottom: 0;
        }
      }
    }

    @include it("scroll-padding-left(0)") {
      @include assert {
        @include output {
          @include scroll-padding-left(0);
          @include reset;
        }

        @include expect {
          scroll-padding-left: 0;
        }
      }
    }

    @include it("will-change-(0,02)") {
      @include assert {
        @include output {
          @include will-change-(0, 02);
          @include reset;
        }

        @include expect {
          will-change: 0, 02;
        }
      }
    }

    @include it("fill(0)") {
      @include assert {
        @include output {
          @include fill(0);
          @include reset;
        }

        @include expect {
          fill: 0;
        }
      }
    }

    @include it("stroke(0)") {
      @include assert {
        @include output {
          @include stroke(0);
          @include reset;
        }

        @include expect {
          stroke: 0;
        }
      }
    }

    @include it("stroke-width(0)") {
      @include assert {
        @include output {
          @include stroke-width(0);
          @include reset;
        }

        @include expect {
          stroke-width: 0;
        }
      }
    }

    @include it("flex(0)") {
      @include assert {
        @include output {
          @include flex(0);
          @include reset;
        }

        @include expect {
          flex: 0;
        }
      }
    }

    @include it("flex-basis(0)") {
      @include assert {
        @include output {
          @include flex-basis(0);
          @include reset;
        }

        @include expect {
          flex-basis: 0;
        }
      }
    }

    @include it("flex-grow(0)") {
      @include assert {
        @include output {
          @include flex-grow(0);
          @include reset;
        }

        @include expect {
          flex-grow: 0;
        }
      }
    }

    @include it("flex-shrink(0)") {
      @include assert {
        @include output {
          @include flex-shrink(0);
          @include reset;
        }

        @include expect {
          flex-shrink: 0;
        }
      }
    }

    @include it("gap(0)") {
      @include assert {
        @include output {
          @include gap(0);
          @include reset;
        }

        @include expect {
          gap: 0;
        }
      }
    }

    @include it("column-gap(0)") {
      @include assert {
        @include output {
          @include column-gap(0);
          @include reset;
        }

        @include expect {
          column-gap: 0;
        }
      }
    }

    @include it("row-gap(0)") {
      @include assert {
        @include output {
          @include row-gap(0);
          @include reset;
        }

        @include expect {
          row-gap: 0;
        }
      }
    }

    @include it("grid-auto-columns(0)") {
      @include assert {
        @include output {
          @include grid-auto-columns(0);
          @include reset;
        }

        @include expect {
          grid-auto-columns: 0;
        }
      }
    }

    @include it("grid-auto-rows(0)") {
      @include assert {
        @include output {
          @include grid-auto-rows(0);
          @include reset;
        }

        @include expect {
          grid-auto-rows: 0;
        }
      }
    }

    @include it("grid-column(0)") {
      @include assert {
        @include output {
          @include grid-column(0);
          @include reset;
        }

        @include expect {
          grid-column: 0;
        }
      }
    }

    @include it("grid-column-start(0)") {
      @include assert {
        @include output {
          @include grid-column-start(0);
          @include reset;
        }

        @include expect {
          grid-column-start: 0;
        }
      }
    }

    @include it("grid-column-end(0)") {
      @include assert {
        @include output {
          @include grid-column-end(0);
          @include reset;
        }

        @include expect {
          grid-column-end: 0;
        }
      }
    }

    @include it("grid-row(0)") {
      @include assert {
        @include output {
          @include grid-row(0);
          @include reset;
        }

        @include expect {
          grid-row: 0;
        }
      }
    }

    @include it("grid-row-start(0)") {
      @include assert {
        @include output {
          @include grid-row-start(0);
          @include reset;
        }

        @include expect {
          grid-row-start: 0;
        }
      }
    }

    @include it("grid-row-end(0)") {
      @include assert {
        @include output {
          @include grid-row-end(0);
          @include reset;
        }

        @include expect {
          grid-row-end: 0;
        }
      }
    }

    @include it("grid-template-columns(0)") {
      @include assert {
        @include output {
          @include grid-template-columns(0);
          @include reset;
        }

        @include expect {
          grid-template-columns: 0;
        }
      }
    }

    @include it("grid-template-rows(0)") {
      @include assert {
        @include output {
          @include grid-template-rows(0);
          @include reset;
        }

        @include expect {
          grid-template-rows: 0;
        }
      }
    }

    @include it("order(0)") {
      @include assert {
        @include output {
          @include order(0);
          @include reset;
        }

        @include expect {
          order: 0;
        }
      }
    }

    @include it("margin(0)") {
      @include assert {
        @include output {
          @include margin(0);
          @include reset;
        }

        @include expect {
          margin: 0;
        }
      }
    }

    @include it("margin-inline-start(0)") {
      @include assert {
        @include output {
          @include margin-inline-start(0);
          @include reset;
        }

        @include expect {
          margin-inline-start: 0;
        }
      }
    }

    @include it("margin-inline-end(0)") {
      @include assert {
        @include output {
          @include margin-inline-end(0);
          @include reset;
        }

        @include expect {
          margin-inline-end: 0;
        }
      }
    }

    @include it("margin-top(0)") {
      @include assert {
        @include output {
          @include margin-top(0);
          @include reset;
        }

        @include expect {
          margin-top: 0;
        }
      }
    }

    @include it("margin-right(0)") {
      @include assert {
        @include output {
          @include margin-right(0);
          @include reset;
        }

        @include expect {
          margin-right: 0;
        }
      }
    }

    @include it("margin-bottom(0)") {
      @include assert {
        @include output {
          @include margin-bottom(0);
          @include reset;
        }

        @include expect {
          margin-bottom: 0;
        }
      }
    }

    @include it("margin-left(0)") {
      @include assert {
        @include output {
          @include margin-left(0);
          @include reset;
        }

        @include expect {
          margin-left: 0;
        }
      }
    }

    @include it("padding(0)") {
      @include assert {
        @include output {
          @include padding(0);
          @include reset;
        }

        @include expect {
          padding: 0;
        }
      }
    }

    @include it("padding-inline-start(0)") {
      @include assert {
        @include output {
          @include padding-inline-start(0);
          @include reset;
        }

        @include expect {
          padding-inline-start: 0;
        }
      }
    }

    @include it("padding-inline-end(0)") {
      @include assert {
        @include output {
          @include padding-inline-end(0);
          @include reset;
        }

        @include expect {
          padding-inline-end: 0;
        }
      }
    }

    @include it("padding-top(0)") {
      @include assert {
        @include output {
          @include padding-top(0);
          @include reset;
        }

        @include expect {
          padding-top: 0;
        }
      }
    }

    @include it("padding-right(0)") {
      @include assert {
        @include output {
          @include padding-right(0);
          @include reset;
        }

        @include expect {
          padding-right: 0;
        }
      }
    }

    @include it("padding-bottom(0)") {
      @include assert {
        @include output {
          @include padding-bottom(0);
          @include reset;
        }

        @include expect {
          padding-bottom: 0;
        }
      }
    }

    @include it("padding-left(0)") {
      @include assert {
        @include output {
          @include padding-left(0);
          @include reset;
        }

        @include expect {
          padding-left: 0;
        }
      }
    }

    @include it("height(0)") {
      @include assert {
        @include output {
          @include height(0);
          @include reset;
        }

        @include expect {
          height: 0;
        }
      }
    }

    @include it("max-height(0)") {
      @include assert {
        @include output {
          @include max-height(0);
          @include reset;
        }

        @include expect {
          max-height: 0;
        }
      }
    }

    @include it("max-width(0)") {
      @include assert {
        @include output {
          @include max-width(0);
          @include reset;
        }

        @include expect {
          max-width: 0;
        }
      }
    }

    @include it("min-height(0)") {
      @include assert {
        @include output {
          @include min-height(0);
          @include reset;
        }

        @include expect {
          min-height: 0;
        }
      }
    }

    @include it("min-width(0)") {
      @include assert {
        @include output {
          @include min-width(0);
          @include reset;
        }

        @include expect {
          min-width: 0;
        }
      }
    }

    @include it("width(0)") {
      @include assert {
        @include output {
          @include width(0);
          @include reset;
        }

        @include expect {
          width: 0;
        }
      }
    }

    @include it("font-family(0)") {
      @include assert {
        @include output {
          @include font-family(0);
          @include reset;
        }

        @include expect {
          font-family: 0;
        }
      }
    }

    @include it("font-weight(0)") {
      @include assert {
        @include output {
          @include font-weight(0);
          @include reset;
        }

        @include expect {
          font-weight: 0;
        }
      }
    }

    @include it("letter-spacing(0)") {
      @include assert {
        @include output {
          @include letter-spacing(0);
          @include reset;
        }

        @include expect {
          letter-spacing: 0;
        }
      }
    }

    @include it("overflow(0)") {
      @include assert {
        @include output {
          @include overflow(0);
          @include reset;
        }

        @include expect {
          overflow: 0;
        }
      }
    }

    @include it("display(0)") {
      @include assert {
        @include output {
          @include display(0);
          @include reset;
        }

        @include expect {
          display: 0;
        }
      }
    }

    @include it("-webkit-box-orient(0)") {
      @include assert {
        @include output {
          @include -webkit-box-orient(0);
          @include reset;
        }

        @include expect {
          -webkit-box-orient: 0;
        }
      }
    }

    @include it("-webkit-line-clamp(0)") {
      @include assert {
        @include output {
          @include -webkit-line-clamp(0);
          @include reset;
        }

        @include expect {
          -webkit-line-clamp: 0;
        }
      }
    }

    @include it("line-height(0)") {
      @include assert {
        @include output {
          @include line-height(0);
          @include reset;
        }

        @include expect {
          line-height: 0;
        }
      }
    }

    @include it("list-style-image(0)") {
      @include assert {
        @include output {
          @include list-style-image(0);
          @include reset;
        }

        @include expect {
          list-style-image: 0;
        }
      }
    }

    @include it("list-style-type(0)") {
      @include assert {
        @include output {
          @include list-style-type(0);
          @include reset;
        }

        @include expect {
          list-style-type: 0;
        }
      }
    }

    @include it("font-size(0)") {
      @include assert {
        @include output {
          @include font-size(0);
          @include reset;
        }

        @include expect {
          font-size: 0;
        }
      }
    }

    @include it("text-decoration-color(0)") {
      @include assert {
        @include output {
          @include text-decoration-color(0);
          @include reset;
        }

        @include expect {
          text-decoration-color: 0;
        }
      }
    }

    @include it("text-decoration-thickness(0)") {
      @include assert {
        @include output {
          @include text-decoration-thickness(0);
          @include reset;
        }

        @include expect {
          text-decoration-thickness: 0;
        }
      }
    }

    @include it("text-indent(0)") {
      @include assert {
        @include output {
          @include text-indent(0);
          @include reset;
        }

        @include expect {
          text-indent: 0;
        }
      }
    }

    @include it("text-underline-offset(0)") {
      @include assert {
        @include output {
          @include text-underline-offset(0);
          @include reset;
        }

        @include expect {
          text-underline-offset: 0;
        }
      }
    }

    @include it("vertical-align(0)") {
      @include assert {
        @include output {
          @include vertical-align(0);
          @include reset;
        }

        @include expect {
          vertical-align: 0;
        }
      }
    }

    @include it("background-color(0)") {
      @include assert {
        @include output {
          @include background-color(0);
          @include reset;
        }

        @include expect {
          background-color: 0;
        }
      }
    }

    @include it("background-size(0)") {
      @include assert {
        @include output {
          @include background-size(0);
          @include reset;
        }

        @include expect {
          background-size: 0;
        }
      }
    }

    @include it("background-position(0)") {
      @include assert {
        @include output {
          @include background-position(0);
          @include reset;
        }

        @include expect {
          background-position: 0;
        }
      }
    }

    @include it("background-image(0)") {
      @include assert {
        @include output {
          @include background-image(0);
          @include reset;
        }

        @include expect {
          background-image: 0;
        }
      }
    }

    @include it("border-color(0)") {
      @include assert {
        @include output {
          @include border-color(0);
          @include reset;
        }

        @include expect {
          border-color: 0;
        }
      }
    }

    @include it("border-width(0)") {
      @include assert {
        @include output {
          @include border-width(0);
          @include reset;
        }

        @include expect {
          border-width: 0;
        }
      }
    }

    @include it("border-left-color(0)") {
      @include assert {
        @include output {
          @include border-left-color(0);
          @include reset;
        }

        @include expect {
          border-left-color: 0;
        }
      }
    }

    @include it("border-left-width(0)") {
      @include assert {
        @include output {
          @include border-left-width(0);
          @include reset;
        }

        @include expect {
          border-left-width: 0;
        }
      }
    }

    @include it("border-right-color(0)") {
      @include assert {
        @include output {
          @include border-right-color(0);
          @include reset;
        }

        @include expect {
          border-right-color: 0;
        }
      }
    }

    @include it("border-right-width(0)") {
      @include assert {
        @include output {
          @include border-right-width(0);
          @include reset;
        }

        @include expect {
          border-right-width: 0;
        }
      }
    }

    @include it("border-top-color(0)") {
      @include assert {
        @include output {
          @include border-top-color(0);
          @include reset;
        }

        @include expect {
          border-top-color: 0;
        }
      }
    }

    @include it("border-top-width(0)") {
      @include assert {
        @include output {
          @include border-top-width(0);
          @include reset;
        }

        @include expect {
          border-top-width: 0;
        }
      }
    }

    @include it("border-bottom-color(0)") {
      @include assert {
        @include output {
          @include border-bottom-color(0);
          @include reset;
        }

        @include expect {
          border-bottom-color: 0;
        }
      }
    }

    @include it("border-bottom-width(0)") {
      @include assert {
        @include output {
          @include border-bottom-width(0);
          @include reset;
        }

        @include expect {
          border-bottom-width: 0;
        }
      }
    }

    @include it("border-inline-start-color(0)") {
      @include assert {
        @include output {
          @include border-inline-start-color(0);
          @include reset;
        }

        @include expect {
          border-inline-start-color: 0;
        }
      }
    }

    @include it("border-inline-start-width(0)") {
      @include assert {
        @include output {
          @include border-inline-start-width(0);
          @include reset;
        }

        @include expect {
          border-inline-start-width: 0;
        }
      }
    }

    @include it("border-inline-end-color(0)") {
      @include assert {
        @include output {
          @include border-inline-end-color(0);
          @include reset;
        }

        @include expect {
          border-inline-end-color: 0;
        }
      }
    }

    @include it("border-inline-end-width(0)") {
      @include assert {
        @include output {
          @include border-inline-end-width(0);
          @include reset;
        }

        @include expect {
          border-inline-end-width: 0;
        }
      }
    }

    @include it("border-radius(0)") {
      @include assert {
        @include output {
          @include border-radius(0);
          @include reset;
        }

        @include expect {
          border-radius: 0;
        }
      }
    }

    @include it("border-start-start-radius(0)") {
      @include assert {
        @include output {
          @include border-start-start-radius(0);
          @include reset;
        }

        @include expect {
          border-start-start-radius: 0;
        }
      }
    }

    @include it("border-end-start-radius(0)") {
      @include assert {
        @include output {
          @include border-end-start-radius(0);
          @include reset;
        }

        @include expect {
          border-end-start-radius: 0;
        }
      }
    }

    @include it("border-start-end-radius(0)") {
      @include assert {
        @include output {
          @include border-start-end-radius(0);
          @include reset;
        }

        @include expect {
          border-start-end-radius: 0;
        }
      }
    }

    @include it("border-end-end-radius(0)") {
      @include assert {
        @include output {
          @include border-end-end-radius(0);
          @include reset;
        }

        @include expect {
          border-end-end-radius: 0;
        }
      }
    }

    @include it("border-top-left-radius(0)") {
      @include assert {
        @include output {
          @include border-top-left-radius(0);
          @include reset;
        }

        @include expect {
          border-top-left-radius: 0;
        }
      }
    }

    @include it("border-top-right-radius(0)") {
      @include assert {
        @include output {
          @include border-top-right-radius(0);
          @include reset;
        }

        @include expect {
          border-top-right-radius: 0;
        }
      }
    }

    @include it("border-bottom-right-radius(0)") {
      @include assert {
        @include output {
          @include border-bottom-right-radius(0);
          @include reset;
        }

        @include expect {
          border-bottom-right-radius: 0;
        }
      }
    }

    @include it("border-bottom-left-radius(0)") {
      @include assert {
        @include output {
          @include border-bottom-left-radius(0);
          @include reset;
        }

        @include expect {
          border-bottom-left-radius: 0;
        }
      }
    }

    @include it("outline-color(0)") {
      @include assert {
        @include output {
          @include outline-color(0);
          @include reset;
        }

        @include expect {
          outline-color: 0;
        }
      }
    }

    @include it("outline-width(0)") {
      @include assert {
        @include output {
          @include outline-width(0);
          @include reset;
        }

        @include expect {
          outline-width: 0;
        }
      }
    }

    @include it("outline-offset(0)") {
      @include assert {
        @include output {
          @include outline-offset(0);
          @include reset;
        }

        @include expect {
          outline-offset: 0;
        }
      }
    }

    @include it("box-shadow(0)") {
      @include assert {
        @include output {
          @include box-shadow(0);
          @include reset;
        }

        @include expect {
          box-shadow: 0;
        }
      }
    }

    @include it("opacity(0)") {
      @include assert {
        @include output {
          @include opacity(0);
          @include reset;
        }

        @include expect {
          opacity: 0;
        }
      }
    }

    @include it("backdrop-filter(0)") {
      @include assert {
        @include output {
          @include backdrop-filter(0);
          @include reset;
        }

        @include expect {
          backdrop-filter: 0;
        }
      }
    }

    @include it("filter(0)") {
      @include assert {
        @include output {
          @include filter(0);
          @include reset;
        }

        @include expect {
          filter: 0;
        }
      }
    }

    @include it("box-decoration-break(0)") {
      @include assert {
        @include output {
          @include box-decoration-break(0);
          @include reset;
        }

        @include expect {
          box-decoration-break: 0;
        }
      }
    }

    @include it("box-sizing(0)") {
      @include assert {
        @include output {
          @include box-sizing(0);
          @include reset;
        }

        @include expect {
          box-sizing: 0;
        }
      }
    }

    @include it("break-after(0)") {
      @include assert {
        @include output {
          @include break-after(0);
          @include reset;
        }

        @include expect {
          break-after: 0;
        }
      }
    }

    @include it("break-before(0)") {
      @include assert {
        @include output {
          @include break-before(0);
          @include reset;
        }

        @include expect {
          break-before: 0;
        }
      }
    }

    @include it("break-inside(0)") {
      @include assert {
        @include output {
          @include break-inside(0);
          @include reset;
        }

        @include expect {
          break-inside: 0;
        }
      }
    }

    @include it("clear(0)") {
      @include assert {
        @include output {
          @include clear(0);
          @include reset;
        }

        @include expect {
          clear: 0;
        }
      }
    }

    @include it("float(0)") {
      @include assert {
        @include output {
          @include float(0);
          @include reset;
        }

        @include expect {
          float: 0;
        }
      }
    }

    @include it("isolation(0)") {
      @include assert {
        @include output {
          @include isolation(0);
          @include reset;
        }

        @include expect {
          isolation: 0;
        }
      }
    }

    @include it("object-fit(0)") {
      @include assert {
        @include output {
          @include object-fit(0);
          @include reset;
        }

        @include expect {
          object-fit: 0;
        }
      }
    }

    @include it("overscroll-behavior(0)") {
      @include assert {
        @include output {
          @include overscroll-behavior(0);
          @include reset;
        }

        @include expect {
          overscroll-behavior: 0;
        }
      }
    }

    @include it("overscroll-behavior-y(0)") {
      @include assert {
        @include output {
          @include overscroll-behavior-y(0);
          @include reset;
        }

        @include expect {
          overscroll-behavior-y: 0;
        }
      }
    }

    @include it("overscroll-behavior-x(0)") {
      @include assert {
        @include output {
          @include overscroll-behavior-x(0);
          @include reset;
        }

        @include expect {
          overscroll-behavior-x: 0;
        }
      }
    }

    @include it("position(0)") {
      @include assert {
        @include output {
          @include position(0);
          @include reset;
        }

        @include expect {
          position: 0;
        }
      }
    }

    @include it("visibility(0)") {
      @include assert {
        @include output {
          @include visibility(0);
          @include reset;
        }

        @include expect {
          visibility: 0;
        }
      }
    }

    @include it("align-content(0)") {
      @include assert {
        @include output {
          @include align-content(0);
          @include reset;
        }

        @include expect {
          align-content: 0;
        }
      }
    }

    @include it("align-items(0)") {
      @include assert {
        @include output {
          @include align-items(0);
          @include reset;
        }

        @include expect {
          align-items: 0;
        }
      }
    }

    @include it("align-self(0)") {
      @include assert {
        @include output {
          @include align-self(0);
          @include reset;
        }

        @include expect {
          align-self: 0;
        }
      }
    }

    @include it("flex-direction(0)") {
      @include assert {
        @include output {
          @include flex-direction(0);
          @include reset;
        }

        @include expect {
          flex-direction: 0;
        }
      }
    }

    @include it("flex-wrap(0)") {
      @include assert {
        @include output {
          @include flex-wrap(0);
          @include reset;
        }

        @include expect {
          flex-wrap: 0;
        }
      }
    }

    @include it("grid-auto-flow(0)") {
      @include assert {
        @include output {
          @include grid-auto-flow(0);
          @include reset;
        }

        @include expect {
          grid-auto-flow: 0;
        }
      }
    }

    @include it("justify-content(0)") {
      @include assert {
        @include output {
          @include justify-content(0);
          @include reset;
        }

        @include expect {
          justify-content: 0;
        }
      }
    }

    @include it("justify-items(0)") {
      @include assert {
        @include output {
          @include justify-items(0);
          @include reset;
        }

        @include expect {
          justify-items: 0;
        }
      }
    }

    @include it("justify-self(0)") {
      @include assert {
        @include output {
          @include justify-self(0);
          @include reset;
        }

        @include expect {
          justify-self: 0;
        }
      }
    }

    @include it("place-content(0)") {
      @include assert {
        @include output {
          @include place-content(0);
          @include reset;
        }

        @include expect {
          place-content: 0;
        }
      }
    }

    @include it("place-items(0)") {
      @include assert {
        @include output {
          @include place-items(0);
          @include reset;
        }

        @include expect {
          place-items: 0;
        }
      }
    }

    @include it("place-self(0)") {
      @include assert {
        @include output {
          @include place-self(0);
          @include reset;
        }

        @include expect {
          place-self: 0;
        }
      }
    }

    @include it("-webkit-font-smoothing(0)") {
      @include assert {
        @include output {
          @include -webkit-font-smoothing(0);
          @include reset;
        }

        @include expect {
          -webkit-font-smoothing: 0;
        }
      }
    }

    @include it("-moz-osx-font-smoothing(0)") {
      @include assert {
        @include output {
          @include -moz-osx-font-smoothing(0);
          @include reset;
        }

        @include expect {
          -moz-osx-font-smoothing: 0;
        }
      }
    }

    @include it("font-style(0)") {
      @include assert {
        @include output {
          @include font-style(0);
          @include reset;
        }

        @include expect {
          font-style: 0;
        }
      }
    }

    @include it("font-variant-numeric(0)") {
      @include assert {
        @include output {
          @include font-variant-numeric(0);
          @include reset;
        }

        @include expect {
          font-variant-numeric: 0;
        }
      }
    }

    @include it("hyphens(0)") {
      @include assert {
        @include output {
          @include hyphens(0);
          @include reset;
        }

        @include expect {
          hyphens: 0;
        }
      }
    }

    @include it("list-style-position(0)") {
      @include assert {
        @include output {
          @include list-style-position(0);
          @include reset;
        }

        @include expect {
          list-style-position: 0;
        }
      }
    }

    @include it("text-align(0)") {
      @include assert {
        @include output {
          @include text-align(0);
          @include reset;
        }

        @include expect {
          text-align: 0;
        }
      }
    }

    @include it("text-decoration-line(0)") {
      @include assert {
        @include output {
          @include text-decoration-line(0);
          @include reset;
        }

        @include expect {
          text-decoration-line: 0;
        }
      }
    }

    @include it("text-decoration-style(0)") {
      @include assert {
        @include output {
          @include text-decoration-style(0);
          @include reset;
        }

        @include expect {
          text-decoration-style: 0;
        }
      }
    }

    @include it("text-overflow(0)") {
      @include assert {
        @include output {
          @include text-overflow(0);
          @include reset;
        }

        @include expect {
          text-overflow: 0;
        }
      }
    }

    @include it("white-space(0)") {
      @include assert {
        @include output {
          @include white-space(0);
          @include reset;
        }

        @include expect {
          white-space: 0;
        }
      }
    }

    @include it("text-transform(0)") {
      @include assert {
        @include output {
          @include text-transform(0);
          @include reset;
        }

        @include expect {
          text-transform: 0;
        }
      }
    }

    @include it("text-wrap(0)") {
      @include assert {
        @include output {
          @include text-wrap(0);
          @include reset;
        }

        @include expect {
          text-wrap: 0;
        }
      }
    }

    @include it("overflow-wrap(0)") {
      @include assert {
        @include output {
          @include overflow-wrap(0);
          @include reset;
        }

        @include expect {
          overflow-wrap: 0;
        }
      }
    }

    @include it("word-break(0)") {
      @include assert {
        @include output {
          @include word-break(0);
          @include reset;
        }

        @include expect {
          word-break: 0;
        }
      }
    }

    @include it("background-attachment(0)") {
      @include assert {
        @include output {
          @include background-attachment(0);
          @include reset;
        }

        @include expect {
          background-attachment: 0;
        }
      }
    }

    @include it("background-clip(0)") {
      @include assert {
        @include output {
          @include background-clip(0);
          @include reset;
        }

        @include expect {
          background-clip: 0;
        }
      }
    }

    @include it("background-origin(0)") {
      @include assert {
        @include output {
          @include background-origin(0);
          @include reset;
        }

        @include expect {
          background-origin: 0;
        }
      }
    }

    @include it("background-repeat(0)") {
      @include assert {
        @include output {
          @include background-repeat(0);
          @include reset;
        }

        @include expect {
          background-repeat: 0;
        }
      }
    }

    @include it("border-style(0)") {
      @include assert {
        @include output {
          @include border-style(0);
          @include reset;
        }

        @include expect {
          border-style: 0;
        }
      }
    }

    @include it("outline(0)") {
      @include assert {
        @include output {
          @include outline(0);
          @include reset;
        }

        @include expect {
          outline: 0;
        }
      }
    }

    @include it("outline-style(0)") {
      @include assert {
        @include output {
          @include outline-style(0);
          @include reset;
        }

        @include expect {
          outline-style: 0;
        }
      }
    }

    @include it("background-blend-mode(0)") {
      @include assert {
        @include output {
          @include background-blend-mode(0);
          @include reset;
        }

        @include expect {
          background-blend-mode: 0;
        }
      }
    }

    @include it("mix-blend-mode(0)") {
      @include assert {
        @include output {
          @include mix-blend-mode(0);
          @include reset;
        }

        @include expect {
          mix-blend-mode: 0;
        }
      }
    }

    @include it("border-collapse(0)") {
      @include assert {
        @include output {
          @include border-collapse(0);
          @include reset;
        }

        @include expect {
          border-collapse: 0;
        }
      }
    }

    @include it("caption-side(0)") {
      @include assert {
        @include output {
          @include caption-side(0);
          @include reset;
        }

        @include expect {
          caption-side: 0;
        }
      }
    }

    @include it("table-layout(0)") {
      @include assert {
        @include output {
          @include table-layout(0);
          @include reset;
        }

        @include expect {
          table-layout: 0;
        }
      }
    }

    @include it("appearance(0)") {
      @include assert {
        @include output {
          @include appearance(0);
          @include reset;
        }

        @include expect {
          appearance: 0;
        }
      }
    }

    @include it("pointer-events(0)") {
      @include assert {
        @include output {
          @include pointer-events(0);
          @include reset;
        }

        @include expect {
          pointer-events: 0;
        }
      }
    }

    @include it("resize(0)") {
      @include assert {
        @include output {
          @include resize(0);
          @include reset;
        }

        @include expect {
          resize: 0;
        }
      }
    }

    @include it("scroll-behavior(0)") {
      @include assert {
        @include output {
          @include scroll-behavior(0);
          @include reset;
        }

        @include expect {
          scroll-behavior: 0;
        }
      }
    }

    @include it("scroll-snap-align(0)") {
      @include assert {
        @include output {
          @include scroll-snap-align(0);
          @include reset;
        }

        @include expect {
          scroll-snap-align: 0;
        }
      }
    }

    @include it("scroll-snap-stop(0)") {
      @include assert {
        @include output {
          @include scroll-snap-stop(0);
          @include reset;
        }

        @include expect {
          scroll-snap-stop: 0;
        }
      }
    }

    @include it("scroll-snap-type(0)") {
      @include assert {
        @include output {
          @include scroll-snap-type(0);
          @include reset;
        }

        @include expect {
          scroll-snap-type: 0;
        }
      }
    }

    @include it("touch-action(0)") {
      @include assert {
        @include output {
          @include touch-action(0);
          @include reset;
        }

        @include expect {
          touch-action: 0;
        }
      }
    }

    @include it("user-select(0)") {
      @include assert {
        @include output {
          @include user-select(0);
          @include reset;
        }

        @include expect {
          user-select: 0;
        }
      }
    }

    @include it("forced-color-adjust(0)") {
      @include assert {
        @include output {
          @include forced-color-adjust(0);
          @include reset;
        }

        @include expect {
          forced-color-adjust: 0;
        }
      }
    }
  }

  @include describe("Rwd") {
    @include it("sm\:aspect-ratio(0)") {
      @include assert {
        @include output {
          @include sm\:aspect-ratio(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            aspect-ratio: 0;
          }
        }
      }
    }

    @include it("sm\:columns(0)") {
      @include assert {
        @include output {
          @include sm\:columns(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            columns: 0;
          }
        }
      }
    }

    @include it("sm\:object-position(0)") {
      @include assert {
        @include output {
          @include sm\:object-position(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            object-position: 0;
          }
        }
      }
    }

    @include it("sm\:inset(0)") {
      @include assert {
        @include output {
          @include sm\:inset(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            inset: 0;
          }
        }
      }
    }

    @include it("sm\:inset-inline-start(0)") {
      @include assert {
        @include output {
          @include sm\:inset-inline-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            inset-inline-start: 0;
          }
        }
      }
    }

    @include it("sm\:inset-inline-end(0)") {
      @include assert {
        @include output {
          @include sm\:inset-inline-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            inset-inline-end: 0;
          }
        }
      }
    }

    @include it("sm\:top(0)") {
      @include assert {
        @include output {
          @include sm\:top(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            top: 0;
          }
        }
      }
    }

    @include it("sm\:right(0)") {
      @include assert {
        @include output {
          @include sm\:right(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            right: 0;
          }
        }
      }
    }

    @include it("sm\:bottom(0)") {
      @include assert {
        @include output {
          @include sm\:bottom(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            bottom: 0;
          }
        }
      }
    }

    @include it("sm\:left(0)") {
      @include assert {
        @include output {
          @include sm\:left(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            left: 0;
          }
        }
      }
    }

    @include it("sm\:z-index(0)") {
      @include assert {
        @include output {
          @include sm\:z-index(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            z-index: 0;
          }
        }
      }
    }

    @include it("sm\:border-spacing(0)") {
      @include assert {
        @include output {
          @include sm\:border-spacing(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-spacing: 0;
          }
        }
      }
    }

    @include it("sm\:animation(0)") {
      @include assert {
        @include output {
          @include sm\:animation(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            animation: 0;
          }
        }
      }
    }

    @include it("sm\:transition-delay(0)") {
      @include assert {
        @include output {
          @include sm\:transition-delay(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            transition-delay: 0;
          }
        }
      }
    }

    @include it("sm\:transition-property(0)") {
      @include assert {
        @include output {
          @include sm\:transition-property(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            transition-property: 0;
          }
        }
      }
    }

    @include it("sm\:transition-timing-function(0)") {
      @include assert {
        @include output {
          @include sm\:transition-timing-function(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            transition-timing-function: 0;
          }
        }
      }
    }

    @include it("sm\:transition-duration(0)") {
      @include assert {
        @include output {
          @include sm\:transition-duration(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            transition-duration: 0;
          }
        }
      }
    }

    @include it("sm\:transform(0)") {
      @include assert {
        @include output {
          @include sm\:transform(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            transform: 0;
          }
        }
      }
    }

    @include it("sm\:transform-origin(0)") {
      @include assert {
        @include output {
          @include sm\:transform-origin(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            transform-origin: 0;
          }
        }
      }
    }

    @include it("sm\:accent-color(0)") {
      @include assert {
        @include output {
          @include sm\:accent-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            accent-color: 0;
          }
        }
      }
    }

    @include it("sm\:caret-color(0)") {
      @include assert {
        @include output {
          @include sm\:caret-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            caret-color: 0;
          }
        }
      }
    }

    @include it("sm\:cursor-(0, 02)") {
      @include assert {
        @include output {
          @include sm\:cursor-(0, 02);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            cursor: 0, 02;
          }
        }
      }
    }

    @include it("sm\:scroll-margin(0)") {
      @include assert {
        @include output {
          @include sm\:scroll-margin(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-margin: 0;
          }
        }
      }
    }

    @include it("sm\:scroll-margin-inline-start(0)") {
      @include assert {
        @include output {
          @include sm\:scroll-margin-inline-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-margin-inline-start: 0;
          }
        }
      }
    }

    @include it("sm\:scroll-margin-inline-end(0)") {
      @include assert {
        @include output {
          @include sm\:scroll-margin-inline-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-margin-inline-end: 0;
          }
        }
      }
    }

    @include it("sm\:scroll-margin-top(0)") {
      @include assert {
        @include output {
          @include sm\:scroll-margin-top(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-margin-top: 0;
          }
        }
      }
    }

    @include it("sm\:scroll-margin-right(0)") {
      @include assert {
        @include output {
          @include sm\:scroll-margin-right(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-margin-right: 0;
          }
        }
      }
    }

    @include it("sm\:scroll-margin-bottom(0)") {
      @include assert {
        @include output {
          @include sm\:scroll-margin-bottom(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-margin-bottom: 0;
          }
        }
      }
    }

    @include it("sm\:scroll-margin-left(0)") {
      @include assert {
        @include output {
          @include sm\:scroll-margin-left(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-margin-left: 0;
          }
        }
      }
    }

    @include it("sm\:scroll-padding(0)") {
      @include assert {
        @include output {
          @include sm\:scroll-padding(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-padding: 0;
          }
        }
      }
    }

    @include it("sm\:scroll-padding-inline-start(0)") {
      @include assert {
        @include output {
          @include sm\:scroll-padding-inline-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-padding-inline-start: 0;
          }
        }
      }
    }

    @include it("sm\:scroll-padding-inline-end(0)") {
      @include assert {
        @include output {
          @include sm\:scroll-padding-inline-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-padding-inline-end: 0;
          }
        }
      }
    }

    @include it("sm\:scroll-padding-top(0)") {
      @include assert {
        @include output {
          @include sm\:scroll-padding-top(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-padding-top: 0;
          }
        }
      }
    }

    @include it("sm\:scroll-padding-right(0)") {
      @include assert {
        @include output {
          @include sm\:scroll-padding-right(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-padding-right: 0;
          }
        }
      }
    }

    @include it("sm\:scroll-padding-bottom(0)") {
      @include assert {
        @include output {
          @include sm\:scroll-padding-bottom(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-padding-bottom: 0;
          }
        }
      }
    }

    @include it("sm\:scroll-padding-left(0)") {
      @include assert {
        @include output {
          @include sm\:scroll-padding-left(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-padding-left: 0;
          }
        }
      }
    }

    @include it("sm\:will-change-(0, 02)") {
      @include assert {
        @include output {
          @include sm\:will-change-(0, 02);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            will-change: 0, 02;
          }
        }
      }
    }

    @include it("sm\:fill(0)") {
      @include assert {
        @include output {
          @include sm\:fill(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            fill: 0;
          }
        }
      }
    }

    @include it("sm\:stroke(0)") {
      @include assert {
        @include output {
          @include sm\:stroke(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            stroke: 0;
          }
        }
      }
    }

    @include it("sm\:stroke-width(0)") {
      @include assert {
        @include output {
          @include sm\:stroke-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            stroke-width: 0;
          }
        }
      }
    }

    @include it("sm\:flex(0)") {
      @include assert {
        @include output {
          @include sm\:flex(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            flex: 0;
          }
        }
      }
    }

    @include it("sm\:flex-basis(0)") {
      @include assert {
        @include output {
          @include sm\:flex-basis(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            flex-basis: 0;
          }
        }
      }
    }

    @include it("sm\:flex-grow(0)") {
      @include assert {
        @include output {
          @include sm\:flex-grow(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            flex-grow: 0;
          }
        }
      }
    }

    @include it("sm\:flex-shrink(0)") {
      @include assert {
        @include output {
          @include sm\:flex-shrink(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            flex-shrink: 0;
          }
        }
      }
    }

    @include it("sm\:gap(0)") {
      @include assert {
        @include output {
          @include sm\:gap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            gap: 0;
          }
        }
      }
    }

    @include it("sm\:column-gap(0)") {
      @include assert {
        @include output {
          @include sm\:column-gap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            column-gap: 0;
          }
        }
      }
    }

    @include it("sm\:row-gap(0)") {
      @include assert {
        @include output {
          @include sm\:row-gap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            row-gap: 0;
          }
        }
      }
    }

    @include it("sm\:grid-auto-columns(0)") {
      @include assert {
        @include output {
          @include sm\:grid-auto-columns(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            grid-auto-columns: 0;
          }
        }
      }
    }

    @include it("sm\:grid-auto-rows(0)") {
      @include assert {
        @include output {
          @include sm\:grid-auto-rows(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            grid-auto-rows: 0;
          }
        }
      }
    }

    @include it("sm\:grid-column(0)") {
      @include assert {
        @include output {
          @include sm\:grid-column(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            grid-column: 0;
          }
        }
      }
    }

    @include it("sm\:grid-column-start(0)") {
      @include assert {
        @include output {
          @include sm\:grid-column-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            grid-column-start: 0;
          }
        }
      }
    }

    @include it("sm\:grid-column-end(0)") {
      @include assert {
        @include output {
          @include sm\:grid-column-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            grid-column-end: 0;
          }
        }
      }
    }

    @include it("sm\:grid-row(0)") {
      @include assert {
        @include output {
          @include sm\:grid-row(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            grid-row: 0;
          }
        }
      }
    }

    @include it("sm\:grid-row-start(0)") {
      @include assert {
        @include output {
          @include sm\:grid-row-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            grid-row-start: 0;
          }
        }
      }
    }

    @include it("sm\:grid-row-end(0)") {
      @include assert {
        @include output {
          @include sm\:grid-row-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            grid-row-end: 0;
          }
        }
      }
    }

    @include it("sm\:grid-template-columns(0)") {
      @include assert {
        @include output {
          @include sm\:grid-template-columns(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            grid-template-columns: 0;
          }
        }
      }
    }

    @include it("sm\:grid-template-rows(0)") {
      @include assert {
        @include output {
          @include sm\:grid-template-rows(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            grid-template-rows: 0;
          }
        }
      }
    }

    @include it("sm\:order(0)") {
      @include assert {
        @include output {
          @include sm\:order(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            order: 0;
          }
        }
      }
    }

    @include it("sm\:margin(0)") {
      @include assert {
        @include output {
          @include sm\:margin(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            margin: 0;
          }
        }
      }
    }

    @include it("sm\:margin-inline-start(0)") {
      @include assert {
        @include output {
          @include sm\:margin-inline-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            margin-inline-start: 0;
          }
        }
      }
    }

    @include it("sm\:margin-inline-end(0)") {
      @include assert {
        @include output {
          @include sm\:margin-inline-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            margin-inline-end: 0;
          }
        }
      }
    }

    @include it("sm\:margin-top(0)") {
      @include assert {
        @include output {
          @include sm\:margin-top(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            margin-top: 0;
          }
        }
      }
    }

    @include it("sm\:margin-right(0)") {
      @include assert {
        @include output {
          @include sm\:margin-right(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            margin-right: 0;
          }
        }
      }
    }

    @include it("sm\:margin-bottom(0)") {
      @include assert {
        @include output {
          @include sm\:margin-bottom(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            margin-bottom: 0;
          }
        }
      }
    }

    @include it("sm\:margin-left(0)") {
      @include assert {
        @include output {
          @include sm\:margin-left(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            margin-left: 0;
          }
        }
      }
    }

    @include it("sm\:padding(0)") {
      @include assert {
        @include output {
          @include sm\:padding(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            padding: 0;
          }
        }
      }
    }

    @include it("sm\:padding-inline-start(0)") {
      @include assert {
        @include output {
          @include sm\:padding-inline-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            padding-inline-start: 0;
          }
        }
      }
    }

    @include it("sm\:padding-inline-end(0)") {
      @include assert {
        @include output {
          @include sm\:padding-inline-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            padding-inline-end: 0;
          }
        }
      }
    }

    @include it("sm\:padding-top(0)") {
      @include assert {
        @include output {
          @include sm\:padding-top(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            padding-top: 0;
          }
        }
      }
    }

    @include it("sm\:padding-right(0)") {
      @include assert {
        @include output {
          @include sm\:padding-right(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            padding-right: 0;
          }
        }
      }
    }

    @include it("sm\:padding-bottom(0)") {
      @include assert {
        @include output {
          @include sm\:padding-bottom(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            padding-bottom: 0;
          }
        }
      }
    }

    @include it("sm\:padding-left(0)") {
      @include assert {
        @include output {
          @include sm\:padding-left(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            padding-left: 0;
          }
        }
      }
    }

    @include it("sm\:height(0)") {
      @include assert {
        @include output {
          @include sm\:height(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            height: 0;
          }
        }
      }
    }

    @include it("sm\:max-height(0)") {
      @include assert {
        @include output {
          @include sm\:max-height(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            max-height: 0;
          }
        }
      }
    }

    @include it("sm\:max-width(0)") {
      @include assert {
        @include output {
          @include sm\:max-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            max-width: 0;
          }
        }
      }
    }

    @include it("sm\:min-height(0)") {
      @include assert {
        @include output {
          @include sm\:min-height(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            min-height: 0;
          }
        }
      }
    }

    @include it("sm\:min-width(0)") {
      @include assert {
        @include output {
          @include sm\:min-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            min-width: 0;
          }
        }
      }
    }

    @include it("sm\:width(0)") {
      @include assert {
        @include output {
          @include sm\:width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            width: 0;
          }
        }
      }
    }

    @include it("sm\:font-family(0)") {
      @include assert {
        @include output {
          @include sm\:font-family(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            font-family: 0;
          }
        }
      }
    }

    @include it("sm\:font-weight(0)") {
      @include assert {
        @include output {
          @include sm\:font-weight(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            font-weight: 0;
          }
        }
      }
    }

    @include it("sm\:letter-spacing(0)") {
      @include assert {
        @include output {
          @include sm\:letter-spacing(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            letter-spacing: 0;
          }
        }
      }
    }

    @include it("sm\:overflow(0)") {
      @include assert {
        @include output {
          @include sm\:overflow(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            overflow: 0;
          }
        }
      }
    }

    @include it("sm\:display(0)") {
      @include assert {
        @include output {
          @include sm\:display(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            display: 0;
          }
        }
      }
    }

    @include it("sm\:-webkit-box-orient(0)") {
      @include assert {
        @include output {
          @include sm\:-webkit-box-orient(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            -webkit-box-orient: 0;
          }
        }
      }
    }

    @include it("sm\:-webkit-line-clamp(0)") {
      @include assert {
        @include output {
          @include sm\:-webkit-line-clamp(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            -webkit-line-clamp: 0;
          }
        }
      }
    }

    @include it("sm\:line-height(0)") {
      @include assert {
        @include output {
          @include sm\:line-height(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            line-height: 0;
          }
        }
      }
    }

    @include it("sm\:list-style-image(0)") {
      @include assert {
        @include output {
          @include sm\:list-style-image(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            list-style-image: 0;
          }
        }
      }
    }

    @include it("sm\:list-style-type(0)") {
      @include assert {
        @include output {
          @include sm\:list-style-type(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            list-style-type: 0;
          }
        }
      }
    }

    @include it("sm\:font-size(0)") {
      @include assert {
        @include output {
          @include sm\:font-size(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            font-size: 0;
          }
        }
      }
    }

    @include it("sm\:text-decoration-color(0)") {
      @include assert {
        @include output {
          @include sm\:text-decoration-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            text-decoration-color: 0;
          }
        }
      }
    }

    @include it("sm\:text-decoration-thickness(0)") {
      @include assert {
        @include output {
          @include sm\:text-decoration-thickness(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            text-decoration-thickness: 0;
          }
        }
      }
    }

    @include it("sm\:text-indent(0)") {
      @include assert {
        @include output {
          @include sm\:text-indent(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            text-indent: 0;
          }
        }
      }
    }

    @include it("sm\:text-underline-offset(0)") {
      @include assert {
        @include output {
          @include sm\:text-underline-offset(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            text-underline-offset: 0;
          }
        }
      }
    }

    @include it("sm\:vertical-align(0)") {
      @include assert {
        @include output {
          @include sm\:vertical-align(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            vertical-align: 0;
          }
        }
      }
    }

    @include it("sm\:background-color(0)") {
      @include assert {
        @include output {
          @include sm\:background-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            background-color: 0;
          }
        }
      }
    }

    @include it("sm\:background-size(0)") {
      @include assert {
        @include output {
          @include sm\:background-size(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            background-size: 0;
          }
        }
      }
    }

    @include it("sm\:background-position(0)") {
      @include assert {
        @include output {
          @include sm\:background-position(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            background-position: 0;
          }
        }
      }
    }

    @include it("sm\:background-image(0)") {
      @include assert {
        @include output {
          @include sm\:background-image(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            background-image: 0;
          }
        }
      }
    }

    @include it("sm\:border-color(0)") {
      @include assert {
        @include output {
          @include sm\:border-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-color: 0;
          }
        }
      }
    }

    @include it("sm\:border-width(0)") {
      @include assert {
        @include output {
          @include sm\:border-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-width: 0;
          }
        }
      }
    }

    @include it("sm\:border-left-color(0)") {
      @include assert {
        @include output {
          @include sm\:border-left-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-left-color: 0;
          }
        }
      }
    }

    @include it("sm\:border-left-width(0)") {
      @include assert {
        @include output {
          @include sm\:border-left-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-left-width: 0;
          }
        }
      }
    }

    @include it("sm\:border-right-color(0)") {
      @include assert {
        @include output {
          @include sm\:border-right-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-right-color: 0;
          }
        }
      }
    }

    @include it("sm\:border-right-width(0)") {
      @include assert {
        @include output {
          @include sm\:border-right-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-right-width: 0;
          }
        }
      }
    }

    @include it("sm\:border-top-color(0)") {
      @include assert {
        @include output {
          @include sm\:border-top-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-top-color: 0;
          }
        }
      }
    }

    @include it("sm\:border-top-width(0)") {
      @include assert {
        @include output {
          @include sm\:border-top-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-top-width: 0;
          }
        }
      }
    }

    @include it("sm\:border-bottom-color(0)") {
      @include assert {
        @include output {
          @include sm\:border-bottom-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-bottom-color: 0;
          }
        }
      }
    }

    @include it("sm\:border-bottom-width(0)") {
      @include assert {
        @include output {
          @include sm\:border-bottom-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-bottom-width: 0;
          }
        }
      }
    }

    @include it("sm\:border-inline-start-color(0)") {
      @include assert {
        @include output {
          @include sm\:border-inline-start-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-inline-start-color: 0;
          }
        }
      }
    }

    @include it("sm\:border-inline-start-width(0)") {
      @include assert {
        @include output {
          @include sm\:border-inline-start-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-inline-start-width: 0;
          }
        }
      }
    }

    @include it("sm\:border-inline-end-color(0)") {
      @include assert {
        @include output {
          @include sm\:border-inline-end-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-inline-end-color: 0;
          }
        }
      }
    }

    @include it("sm\:border-inline-end-width(0)") {
      @include assert {
        @include output {
          @include sm\:border-inline-end-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-inline-end-width: 0;
          }
        }
      }
    }

    @include it("sm\:border-radius(0)") {
      @include assert {
        @include output {
          @include sm\:border-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-radius: 0;
          }
        }
      }
    }

    @include it("sm\:border-start-start-radius(0)") {
      @include assert {
        @include output {
          @include sm\:border-start-start-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-start-start-radius: 0;
          }
        }
      }
    }

    @include it("sm\:border-end-start-radius(0)") {
      @include assert {
        @include output {
          @include sm\:border-end-start-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-end-start-radius: 0;
          }
        }
      }
    }

    @include it("sm\:border-start-end-radius(0)") {
      @include assert {
        @include output {
          @include sm\:border-start-end-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-start-end-radius: 0;
          }
        }
      }
    }

    @include it("sm\:border-end-end-radius(0)") {
      @include assert {
        @include output {
          @include sm\:border-end-end-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-end-end-radius: 0;
          }
        }
      }
    }

    @include it("sm\:border-top-left-radius(0)") {
      @include assert {
        @include output {
          @include sm\:border-top-left-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-top-left-radius: 0;
          }
        }
      }
    }

    @include it("sm\:border-top-right-radius(0)") {
      @include assert {
        @include output {
          @include sm\:border-top-right-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-top-right-radius: 0;
          }
        }
      }
    }

    @include it("sm\:border-bottom-right-radius(0)") {
      @include assert {
        @include output {
          @include sm\:border-bottom-right-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-bottom-right-radius: 0;
          }
        }
      }
    }

    @include it("sm\:border-bottom-left-radius(0)") {
      @include assert {
        @include output {
          @include sm\:border-bottom-left-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-bottom-left-radius: 0;
          }
        }
      }
    }

    @include it("sm\:outline-color(0)") {
      @include assert {
        @include output {
          @include sm\:outline-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            outline-color: 0;
          }
        }
      }
    }

    @include it("sm\:outline-width(0)") {
      @include assert {
        @include output {
          @include sm\:outline-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            outline-width: 0;
          }
        }
      }
    }

    @include it("sm\:outline-offset(0)") {
      @include assert {
        @include output {
          @include sm\:outline-offset(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            outline-offset: 0;
          }
        }
      }
    }

    @include it("sm\:box-shadow(0)") {
      @include assert {
        @include output {
          @include sm\:box-shadow(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            box-shadow: 0;
          }
        }
      }
    }

    @include it("sm\:opacity(0)") {
      @include assert {
        @include output {
          @include sm\:opacity(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            opacity: 0;
          }
        }
      }
    }

    @include it("sm\:backdrop-filter(0)") {
      @include assert {
        @include output {
          @include sm\:backdrop-filter(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            backdrop-filter: 0;
          }
        }
      }
    }

    @include it("sm\:filter(0)") {
      @include assert {
        @include output {
          @include sm\:filter(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            filter: 0;
          }
        }
      }
    }

    @include it("sm\:box-decoration-break(0)") {
      @include assert {
        @include output {
          @include sm\:box-decoration-break(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            box-decoration-break: 0;
          }
        }
      }
    }

    @include it("sm\:box-sizing(0)") {
      @include assert {
        @include output {
          @include sm\:box-sizing(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            box-sizing: 0;
          }
        }
      }
    }

    @include it("sm\:break-after(0)") {
      @include assert {
        @include output {
          @include sm\:break-after(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            break-after: 0;
          }
        }
      }
    }

    @include it("sm\:break-before(0)") {
      @include assert {
        @include output {
          @include sm\:break-before(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            break-before: 0;
          }
        }
      }
    }

    @include it("sm\:break-inside(0)") {
      @include assert {
        @include output {
          @include sm\:break-inside(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            break-inside: 0;
          }
        }
      }
    }

    @include it("sm\:clear(0)") {
      @include assert {
        @include output {
          @include sm\:clear(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            clear: 0;
          }
        }
      }
    }

    @include it("sm\:float(0)") {
      @include assert {
        @include output {
          @include sm\:float(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            float: 0;
          }
        }
      }
    }

    @include it("sm\:isolation(0)") {
      @include assert {
        @include output {
          @include sm\:isolation(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            isolation: 0;
          }
        }
      }
    }

    @include it("sm\:object-fit(0)") {
      @include assert {
        @include output {
          @include sm\:object-fit(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            object-fit: 0;
          }
        }
      }
    }

    @include it("sm\:overscroll-behavior(0)") {
      @include assert {
        @include output {
          @include sm\:overscroll-behavior(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            overscroll-behavior: 0;
          }
        }
      }
    }

    @include it("sm\:overscroll-behavior-y(0)") {
      @include assert {
        @include output {
          @include sm\:overscroll-behavior-y(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            overscroll-behavior-y: 0;
          }
        }
      }
    }

    @include it("sm\:overscroll-behavior-x(0)") {
      @include assert {
        @include output {
          @include sm\:overscroll-behavior-x(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            overscroll-behavior-x: 0;
          }
        }
      }
    }

    @include it("sm\:position(0)") {
      @include assert {
        @include output {
          @include sm\:position(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            position: 0;
          }
        }
      }
    }

    @include it("sm\:visibility(0)") {
      @include assert {
        @include output {
          @include sm\:visibility(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            visibility: 0;
          }
        }
      }
    }

    @include it("sm\:align-content(0)") {
      @include assert {
        @include output {
          @include sm\:align-content(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            align-content: 0;
          }
        }
      }
    }

    @include it("sm\:align-items(0)") {
      @include assert {
        @include output {
          @include sm\:align-items(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            align-items: 0;
          }
        }
      }
    }

    @include it("sm\:align-self(0)") {
      @include assert {
        @include output {
          @include sm\:align-self(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            align-self: 0;
          }
        }
      }
    }

    @include it("sm\:flex-direction(0)") {
      @include assert {
        @include output {
          @include sm\:flex-direction(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            flex-direction: 0;
          }
        }
      }
    }

    @include it("sm\:flex-wrap(0)") {
      @include assert {
        @include output {
          @include sm\:flex-wrap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            flex-wrap: 0;
          }
        }
      }
    }

    @include it("sm\:grid-auto-flow(0)") {
      @include assert {
        @include output {
          @include sm\:grid-auto-flow(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            grid-auto-flow: 0;
          }
        }
      }
    }

    @include it("sm\:justify-content(0)") {
      @include assert {
        @include output {
          @include sm\:justify-content(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            justify-content: 0;
          }
        }
      }
    }

    @include it("sm\:justify-items(0)") {
      @include assert {
        @include output {
          @include sm\:justify-items(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            justify-items: 0;
          }
        }
      }
    }

    @include it("sm\:justify-self(0)") {
      @include assert {
        @include output {
          @include sm\:justify-self(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            justify-self: 0;
          }
        }
      }
    }

    @include it("sm\:place-content(0)") {
      @include assert {
        @include output {
          @include sm\:place-content(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            place-content: 0;
          }
        }
      }
    }

    @include it("sm\:place-items(0)") {
      @include assert {
        @include output {
          @include sm\:place-items(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            place-items: 0;
          }
        }
      }
    }

    @include it("sm\:place-self(0)") {
      @include assert {
        @include output {
          @include sm\:place-self(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            place-self: 0;
          }
        }
      }
    }

    @include it("sm\:-webkit-font-smoothing(0)") {
      @include assert {
        @include output {
          @include sm\:-webkit-font-smoothing(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            -webkit-font-smoothing: 0;
          }
        }
      }
    }

    @include it("sm\:-moz-osx-font-smoothing(0)") {
      @include assert {
        @include output {
          @include sm\:-moz-osx-font-smoothing(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            -moz-osx-font-smoothing: 0;
          }
        }
      }
    }

    @include it("sm\:font-style(0)") {
      @include assert {
        @include output {
          @include sm\:font-style(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            font-style: 0;
          }
        }
      }
    }

    @include it("sm\:font-variant-numeric(0)") {
      @include assert {
        @include output {
          @include sm\:font-variant-numeric(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            font-variant-numeric: 0;
          }
        }
      }
    }

    @include it("sm\:hyphens(0)") {
      @include assert {
        @include output {
          @include sm\:hyphens(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            hyphens: 0;
          }
        }
      }
    }

    @include it("sm\:list-style-position(0)") {
      @include assert {
        @include output {
          @include sm\:list-style-position(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            list-style-position: 0;
          }
        }
      }
    }

    @include it("sm\:text-align(0)") {
      @include assert {
        @include output {
          @include sm\:text-align(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            text-align: 0;
          }
        }
      }
    }

    @include it("sm\:text-decoration-line(0)") {
      @include assert {
        @include output {
          @include sm\:text-decoration-line(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            text-decoration-line: 0;
          }
        }
      }
    }

    @include it("sm\:text-decoration-style(0)") {
      @include assert {
        @include output {
          @include sm\:text-decoration-style(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            text-decoration-style: 0;
          }
        }
      }
    }

    @include it("sm\:text-overflow(0)") {
      @include assert {
        @include output {
          @include sm\:text-overflow(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            text-overflow: 0;
          }
        }
      }
    }

    @include it("sm\:white-space(0)") {
      @include assert {
        @include output {
          @include sm\:white-space(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            white-space: 0;
          }
        }
      }
    }

    @include it("sm\:text-transform(0)") {
      @include assert {
        @include output {
          @include sm\:text-transform(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            text-transform: 0;
          }
        }
      }
    }

    @include it("sm\:text-wrap(0)") {
      @include assert {
        @include output {
          @include sm\:text-wrap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            text-wrap: 0;
          }
        }
      }
    }

    @include it("sm\:overflow-wrap(0)") {
      @include assert {
        @include output {
          @include sm\:overflow-wrap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            overflow-wrap: 0;
          }
        }
      }
    }

    @include it("sm\:word-break(0)") {
      @include assert {
        @include output {
          @include sm\:word-break(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            word-break: 0;
          }
        }
      }
    }

    @include it("sm\:background-attachment(0)") {
      @include assert {
        @include output {
          @include sm\:background-attachment(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            background-attachment: 0;
          }
        }
      }
    }

    @include it("sm\:background-clip(0)") {
      @include assert {
        @include output {
          @include sm\:background-clip(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            background-clip: 0;
          }
        }
      }
    }

    @include it("sm\:background-origin(0)") {
      @include assert {
        @include output {
          @include sm\:background-origin(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            background-origin: 0;
          }
        }
      }
    }

    @include it("sm\:background-repeat(0)") {
      @include assert {
        @include output {
          @include sm\:background-repeat(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            background-repeat: 0;
          }
        }
      }
    }

    @include it("sm\:border-style(0)") {
      @include assert {
        @include output {
          @include sm\:border-style(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-style: 0;
          }
        }
      }
    }

    @include it("sm\:outline(0)") {
      @include assert {
        @include output {
          @include sm\:outline(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            outline: 0;
          }
        }
      }
    }

    @include it("sm\:outline-style(0)") {
      @include assert {
        @include output {
          @include sm\:outline-style(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            outline-style: 0;
          }
        }
      }
    }

    @include it("sm\:background-blend-mode(0)") {
      @include assert {
        @include output {
          @include sm\:background-blend-mode(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            background-blend-mode: 0;
          }
        }
      }
    }

    @include it("sm\:mix-blend-mode(0)") {
      @include assert {
        @include output {
          @include sm\:mix-blend-mode(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            mix-blend-mode: 0;
          }
        }
      }
    }

    @include it("sm\:border-collapse(0)") {
      @include assert {
        @include output {
          @include sm\:border-collapse(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            border-collapse: 0;
          }
        }
      }
    }

    @include it("sm\:caption-side(0)") {
      @include assert {
        @include output {
          @include sm\:caption-side(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            caption-side: 0;
          }
        }
      }
    }

    @include it("sm\:table-layout(0)") {
      @include assert {
        @include output {
          @include sm\:table-layout(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            table-layout: 0;
          }
        }
      }
    }

    @include it("sm\:appearance(0)") {
      @include assert {
        @include output {
          @include sm\:appearance(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            appearance: 0;
          }
        }
      }
    }

    @include it("sm\:pointer-events(0)") {
      @include assert {
        @include output {
          @include sm\:pointer-events(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            pointer-events: 0;
          }
        }
      }
    }

    @include it("sm\:resize(0)") {
      @include assert {
        @include output {
          @include sm\:resize(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            resize: 0;
          }
        }
      }
    }

    @include it("sm\:scroll-behavior(0)") {
      @include assert {
        @include output {
          @include sm\:scroll-behavior(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-behavior: 0;
          }
        }
      }
    }

    @include it("sm\:scroll-snap-align(0)") {
      @include assert {
        @include output {
          @include sm\:scroll-snap-align(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-snap-align: 0;
          }
        }
      }
    }

    @include it("sm\:scroll-snap-stop(0)") {
      @include assert {
        @include output {
          @include sm\:scroll-snap-stop(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-snap-stop: 0;
          }
        }
      }
    }

    @include it("sm\:scroll-snap-type(0)") {
      @include assert {
        @include output {
          @include sm\:scroll-snap-type(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            scroll-snap-type: 0;
          }
        }
      }
    }

    @include it("sm\:touch-action(0)") {
      @include assert {
        @include output {
          @include sm\:touch-action(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            touch-action: 0;
          }
        }
      }
    }

    @include it("sm\:user-select(0)") {
      @include assert {
        @include output {
          @include sm\:user-select(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            user-select: 0;
          }
        }
      }
    }

    @include it("sm\:forced-color-adjust(0)") {
      @include assert {
        @include output {
          @include sm\:forced-color-adjust(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $sm) {
            forced-color-adjust: 0;
          }
        }
      }
    }

    @include it("md\:aspect-ratio(0)") {
      @include assert {
        @include output {
          @include md\:aspect-ratio(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            aspect-ratio: 0;
          }
        }
      }
    }

    @include it("md\:columns(0)") {
      @include assert {
        @include output {
          @include md\:columns(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            columns: 0;
          }
        }
      }
    }

    @include it("md\:object-position(0)") {
      @include assert {
        @include output {
          @include md\:object-position(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            object-position: 0;
          }
        }
      }
    }

    @include it("md\:inset(0)") {
      @include assert {
        @include output {
          @include md\:inset(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            inset: 0;
          }
        }
      }
    }

    @include it("md\:inset-inline-start(0)") {
      @include assert {
        @include output {
          @include md\:inset-inline-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            inset-inline-start: 0;
          }
        }
      }
    }

    @include it("md\:inset-inline-end(0)") {
      @include assert {
        @include output {
          @include md\:inset-inline-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            inset-inline-end: 0;
          }
        }
      }
    }

    @include it("md\:top(0)") {
      @include assert {
        @include output {
          @include md\:top(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            top: 0;
          }
        }
      }
    }

    @include it("md\:right(0)") {
      @include assert {
        @include output {
          @include md\:right(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            right: 0;
          }
        }
      }
    }

    @include it("md\:bottom(0)") {
      @include assert {
        @include output {
          @include md\:bottom(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            bottom: 0;
          }
        }
      }
    }

    @include it("md\:left(0)") {
      @include assert {
        @include output {
          @include md\:left(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            left: 0;
          }
        }
      }
    }

    @include it("md\:z-index(0)") {
      @include assert {
        @include output {
          @include md\:z-index(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            z-index: 0;
          }
        }
      }
    }

    @include it("md\:border-spacing(0)") {
      @include assert {
        @include output {
          @include md\:border-spacing(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            border-spacing: 0;
          }
        }
      }
    }

    @include it("md\:animation(0)") {
      @include assert {
        @include output {
          @include md\:animation(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            animation: 0;
          }
        }
      }
    }

    @include it("md\:transition-delay(0)") {
      @include assert {
        @include output {
          @include md\:transition-delay(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            transition-delay: 0;
          }
        }
      }
    }

    @include it("md\:transition-property(0)") {
      @include assert {
        @include output {
          @include md\:transition-property(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            transition-property: 0;
          }
        }
      }
    }

    @include it("md\:transition-timing-function(0)") {
      @include assert {
        @include output {
          @include md\:transition-timing-function(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            transition-timing-function: 0;
          }
        }
      }
    }

    @include it("md\:transition-duration(0)") {
      @include assert {
        @include output {
          @include md\:transition-duration(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            transition-duration: 0;
          }
        }
      }
    }

    @include it("md\:transform(0)") {
      @include assert {
        @include output {
          @include md\:transform(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            transform: 0;
          }
        }
      }
    }

    @include it("md\:transform-origin(0)") {
      @include assert {
        @include output {
          @include md\:transform-origin(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            transform-origin: 0;
          }
        }
      }
    }

    @include it("md\:accent-color(0)") {
      @include assert {
        @include output {
          @include md\:accent-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            accent-color: 0;
          }
        }
      }
    }

    @include it("md\:caret-color(0)") {
      @include assert {
        @include output {
          @include md\:caret-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            caret-color: 0;
          }
        }
      }
    }

    @include it("md\:cursor-(0, 02)") {
      @include assert {
        @include output {
          @include md\:cursor-(0, 02);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            cursor: 0, 02;
          }
        }
      }
    }

    @include it("md\:scroll-margin(0)") {
      @include assert {
        @include output {
          @include md\:scroll-margin(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            scroll-margin: 0;
          }
        }
      }
    }

    @include it("md\:scroll-margin-inline-start(0)") {
      @include assert {
        @include output {
          @include md\:scroll-margin-inline-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            scroll-margin-inline-start: 0;
          }
        }
      }
    }

    @include it("md\:scroll-margin-inline-end(0)") {
      @include assert {
        @include output {
          @include md\:scroll-margin-inline-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            scroll-margin-inline-end: 0;
          }
        }
      }
    }

    @include it("md\:scroll-margin-top(0)") {
      @include assert {
        @include output {
          @include md\:scroll-margin-top(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            scroll-margin-top: 0;
          }
        }
      }
    }

    @include it("md\:scroll-margin-right(0)") {
      @include assert {
        @include output {
          @include md\:scroll-margin-right(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            scroll-margin-right: 0;
          }
        }
      }
    }

    @include it("md\:scroll-margin-bottom(0)") {
      @include assert {
        @include output {
          @include md\:scroll-margin-bottom(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            scroll-margin-bottom: 0;
          }
        }
      }
    }

    @include it("md\:scroll-margin-left(0)") {
      @include assert {
        @include output {
          @include md\:scroll-margin-left(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            scroll-margin-left: 0;
          }
        }
      }
    }

    @include it("md\:scroll-padding(0)") {
      @include assert {
        @include output {
          @include md\:scroll-padding(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            scroll-padding: 0;
          }
        }
      }
    }

    @include it("md\:scroll-padding-inline-start(0)") {
      @include assert {
        @include output {
          @include md\:scroll-padding-inline-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            scroll-padding-inline-start: 0;
          }
        }
      }
    }

    @include it("md\:scroll-padding-inline-end(0)") {
      @include assert {
        @include output {
          @include md\:scroll-padding-inline-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            scroll-padding-inline-end: 0;
          }
        }
      }
    }

    @include it("md\:scroll-padding-top(0)") {
      @include assert {
        @include output {
          @include md\:scroll-padding-top(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            scroll-padding-top: 0;
          }
        }
      }
    }

    @include it("md\:scroll-padding-right(0)") {
      @include assert {
        @include output {
          @include md\:scroll-padding-right(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            scroll-padding-right: 0;
          }
        }
      }
    }

    @include it("md\:scroll-padding-bottom(0)") {
      @include assert {
        @include output {
          @include md\:scroll-padding-bottom(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            scroll-padding-bottom: 0;
          }
        }
      }
    }

    @include it("md\:scroll-padding-left(0)") {
      @include assert {
        @include output {
          @include md\:scroll-padding-left(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            scroll-padding-left: 0;
          }
        }
      }
    }

    @include it("md\:will-change-(0, 02)") {
      @include assert {
        @include output {
          @include md\:will-change-(0, 02);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            will-change: 0, 02;
          }
        }
      }
    }

    @include it("md\:fill(0)") {
      @include assert {
        @include output {
          @include md\:fill(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            fill: 0;
          }
        }
      }
    }

    @include it("md\:stroke(0)") {
      @include assert {
        @include output {
          @include md\:stroke(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            stroke: 0;
          }
        }
      }
    }

    @include it("md\:stroke-width(0)") {
      @include assert {
        @include output {
          @include md\:stroke-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            stroke-width: 0;
          }
        }
      }
    }

    @include it("md\:flex(0)") {
      @include assert {
        @include output {
          @include md\:flex(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            flex: 0;
          }
        }
      }
    }

    @include it("md\:flex-basis(0)") {
      @include assert {
        @include output {
          @include md\:flex-basis(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            flex-basis: 0;
          }
        }
      }
    }

    @include it("md\:flex-grow(0)") {
      @include assert {
        @include output {
          @include md\:flex-grow(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            flex-grow: 0;
          }
        }
      }
    }

    @include it("md\:flex-shrink(0)") {
      @include assert {
        @include output {
          @include md\:flex-shrink(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            flex-shrink: 0;
          }
        }
      }
    }

    @include it("md\:gap(0)") {
      @include assert {
        @include output {
          @include md\:gap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            gap: 0;
          }
        }
      }
    }

    @include it("md\:column-gap(0)") {
      @include assert {
        @include output {
          @include md\:column-gap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            column-gap: 0;
          }
        }
      }
    }

    @include it("md\:row-gap(0)") {
      @include assert {
        @include output {
          @include md\:row-gap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            row-gap: 0;
          }
        }
      }
    }

    @include it("md\:grid-auto-columns(0)") {
      @include assert {
        @include output {
          @include md\:grid-auto-columns(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            grid-auto-columns: 0;
          }
        }
      }
    }

    @include it("md\:grid-auto-rows(0)") {
      @include assert {
        @include output {
          @include md\:grid-auto-rows(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            grid-auto-rows: 0;
          }
        }
      }
    }

    @include it("md\:grid-column(0)") {
      @include assert {
        @include output {
          @include md\:grid-column(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            grid-column: 0;
          }
        }
      }
    }

    @include it("md\:grid-column-start(0)") {
      @include assert {
        @include output {
          @include md\:grid-column-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            grid-column-start: 0;
          }
        }
      }
    }

    @include it("md\:grid-column-end(0)") {
      @include assert {
        @include output {
          @include md\:grid-column-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            grid-column-end: 0;
          }
        }
      }
    }

    @include it("md\:grid-row(0)") {
      @include assert {
        @include output {
          @include md\:grid-row(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            grid-row: 0;
          }
        }
      }
    }

    @include it("md\:grid-row-start(0)") {
      @include assert {
        @include output {
          @include md\:grid-row-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            grid-row-start: 0;
          }
        }
      }
    }

    @include it("md\:grid-row-end(0)") {
      @include assert {
        @include output {
          @include md\:grid-row-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            grid-row-end: 0;
          }
        }
      }
    }

    @include it("md\:grid-template-columns(0)") {
      @include assert {
        @include output {
          @include md\:grid-template-columns(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            grid-template-columns: 0;
          }
        }
      }
    }

    @include it("md\:grid-template-rows(0)") {
      @include assert {
        @include output {
          @include md\:grid-template-rows(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            grid-template-rows: 0;
          }
        }
      }
    }

    @include it("md\:order(0)") {
      @include assert {
        @include output {
          @include md\:order(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            order: 0;
          }
        }
      }
    }

    @include it("md\:margin(0)") {
      @include assert {
        @include output {
          @include md\:margin(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            margin: 0;
          }
        }
      }
    }

    @include it("md\:margin-inline-start(0)") {
      @include assert {
        @include output {
          @include md\:margin-inline-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            margin-inline-start: 0;
          }
        }
      }
    }

    @include it("md\:margin-inline-end(0)") {
      @include assert {
        @include output {
          @include md\:margin-inline-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            margin-inline-end: 0;
          }
        }
      }
    }

    @include it("md\:margin-top(0)") {
      @include assert {
        @include output {
          @include md\:margin-top(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            margin-top: 0;
          }
        }
      }
    }

    @include it("md\:margin-right(0)") {
      @include assert {
        @include output {
          @include md\:margin-right(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            margin-right: 0;
          }
        }
      }
    }

    @include it("md\:margin-bottom(0)") {
      @include assert {
        @include output {
          @include md\:margin-bottom(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            margin-bottom: 0;
          }
        }
      }
    }

    @include it("md\:margin-left(0)") {
      @include assert {
        @include output {
          @include md\:margin-left(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            margin-left: 0;
          }
        }
      }
    }

    @include it("md\:padding(0)") {
      @include assert {
        @include output {
          @include md\:padding(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            padding: 0;
          }
        }
      }
    }

    @include it("md\:padding-inline-start(0)") {
      @include assert {
        @include output {
          @include md\:padding-inline-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            padding-inline-start: 0;
          }
        }
      }
    }

    @include it("md\:padding-inline-end(0)") {
      @include assert {
        @include output {
          @include md\:padding-inline-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            padding-inline-end: 0;
          }
        }
      }
    }

    @include it("md\:padding-top(0)") {
      @include assert {
        @include output {
          @include md\:padding-top(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            padding-top: 0;
          }
        }
      }
    }

    @include it("md\:padding-right(0)") {
      @include assert {
        @include output {
          @include md\:padding-right(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            padding-right: 0;
          }
        }
      }
    }

    @include it("md\:padding-bottom(0)") {
      @include assert {
        @include output {
          @include md\:padding-bottom(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            padding-bottom: 0;
          }
        }
      }
    }

    @include it("md\:padding-left(0)") {
      @include assert {
        @include output {
          @include md\:padding-left(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            padding-left: 0;
          }
        }
      }
    }

    @include it("md\:height(0)") {
      @include assert {
        @include output {
          @include md\:height(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            height: 0;
          }
        }
      }
    }

    @include it("md\:max-height(0)") {
      @include assert {
        @include output {
          @include md\:max-height(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            max-height: 0;
          }
        }
      }
    }

    @include it("md\:max-width(0)") {
      @include assert {
        @include output {
          @include md\:max-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            max-width: 0;
          }
        }
      }
    }

    @include it("md\:min-height(0)") {
      @include assert {
        @include output {
          @include md\:min-height(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            min-height: 0;
          }
        }
      }
    }

    @include it("md\:min-width(0)") {
      @include assert {
        @include output {
          @include md\:min-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            min-width: 0;
          }
        }
      }
    }

    @include it("md\:width(0)") {
      @include assert {
        @include output {
          @include md\:width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            width: 0;
          }
        }
      }
    }

    @include it("md\:font-family(0)") {
      @include assert {
        @include output {
          @include md\:font-family(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            font-family: 0;
          }
        }
      }
    }

    @include it("md\:font-weight(0)") {
      @include assert {
        @include output {
          @include md\:font-weight(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            font-weight: 0;
          }
        }
      }
    }

    @include it("md\:letter-spacing(0)") {
      @include assert {
        @include output {
          @include md\:letter-spacing(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            letter-spacing: 0;
          }
        }
      }
    }

    @include it("md\:overflow(0)") {
      @include assert {
        @include output {
          @include md\:overflow(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            overflow: 0;
          }
        }
      }
    }

    @include it("md\:display(0)") {
      @include assert {
        @include output {
          @include md\:display(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            display: 0;
          }
        }
      }
    }

    @include it("md\:-webkit-box-orient(0)") {
      @include assert {
        @include output {
          @include md\:-webkit-box-orient(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            -webkit-box-orient: 0;
          }
        }
      }
    }

    @include it("md\:-webkit-line-clamp(0)") {
      @include assert {
        @include output {
          @include md\:-webkit-line-clamp(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            -webkit-line-clamp: 0;
          }
        }
      }
    }

    @include it("md\:line-height(0)") {
      @include assert {
        @include output {
          @include md\:line-height(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            line-height: 0;
          }
        }
      }
    }

    @include it("md\:list-style-image(0)") {
      @include assert {
        @include output {
          @include md\:list-style-image(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            list-style-image: 0;
          }
        }
      }
    }

    @include it("md\:list-style-type(0)") {
      @include assert {
        @include output {
          @include md\:list-style-type(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            list-style-type: 0;
          }
        }
      }
    }

    @include it("md\:font-size(0)") {
      @include assert {
        @include output {
          @include md\:font-size(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            font-size: 0;
          }
        }
      }
    }

    @include it("md\:text-decoration-color(0)") {
      @include assert {
        @include output {
          @include md\:text-decoration-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            text-decoration-color: 0;
          }
        }
      }
    }

    @include it("md\:text-decoration-thickness(0)") {
      @include assert {
        @include output {
          @include md\:text-decoration-thickness(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            text-decoration-thickness: 0;
          }
        }
      }
    }

    @include it("md\:text-indent(0)") {
      @include assert {
        @include output {
          @include md\:text-indent(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            text-indent: 0;
          }
        }
      }
    }

    @include it("md\:text-underline-offset(0)") {
      @include assert {
        @include output {
          @include md\:text-underline-offset(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            text-underline-offset: 0;
          }
        }
      }
    }

    @include it("md\:vertical-align(0)") {
      @include assert {
        @include output {
          @include md\:vertical-align(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            vertical-align: 0;
          }
        }
      }
    }

    @include it("md\:background-color(0)") {
      @include assert {
        @include output {
          @include md\:background-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            background-color: 0;
          }
        }
      }
    }

    @include it("md\:background-size(0)") {
      @include assert {
        @include output {
          @include md\:background-size(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            background-size: 0;
          }
        }
      }
    }

    @include it("md\:background-position(0)") {
      @include assert {
        @include output {
          @include md\:background-position(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            background-position: 0;
          }
        }
      }
    }

    @include it("md\:background-image(0)") {
      @include assert {
        @include output {
          @include md\:background-image(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            background-image: 0;
          }
        }
      }
    }

    @include it("md\:border-color(0)") {
      @include assert {
        @include output {
          @include md\:border-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            border-color: 0;
          }
        }
      }
    }

    @include it("md\:border-width(0)") {
      @include assert {
        @include output {
          @include md\:border-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            border-width: 0;
          }
        }
      }
    }

    @include it("md\:border-left-color(0)") {
      @include assert {
        @include output {
          @include md\:border-left-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            border-left-color: 0;
          }
        }
      }
    }

    @include it("md\:border-left-width(0)") {
      @include assert {
        @include output {
          @include md\:border-left-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            border-left-width: 0;
          }
        }
      }
    }

    @include it("md\:border-right-color(0)") {
      @include assert {
        @include output {
          @include md\:border-right-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            border-right-color: 0;
          }
        }
      }
    }

    @include it("md\:border-right-width(0)") {
      @include assert {
        @include output {
          @include md\:border-right-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            border-right-width: 0;
          }
        }
      }
    }

    @include it("md\:border-top-color(0)") {
      @include assert {
        @include output {
          @include md\:border-top-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            border-top-color: 0;
          }
        }
      }
    }

    @include it("md\:border-top-width(0)") {
      @include assert {
        @include output {
          @include md\:border-top-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            border-top-width: 0;
          }
        }
      }
    }

    @include it("md\:border-bottom-color(0)") {
      @include assert {
        @include output {
          @include md\:border-bottom-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            border-bottom-color: 0;
          }
        }
      }
    }

    @include it("md\:border-bottom-width(0)") {
      @include assert {
        @include output {
          @include md\:border-bottom-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            border-bottom-width: 0;
          }
        }
      }
    }

    @include it("md\:border-inline-start-color(0)") {
      @include assert {
        @include output {
          @include md\:border-inline-start-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            border-inline-start-color: 0;
          }
        }
      }
    }

    @include it("md\:border-inline-start-width(0)") {
      @include assert {
        @include output {
          @include md\:border-inline-start-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            border-inline-start-width: 0;
          }
        }
      }
    }

    @include it("md\:border-inline-end-color(0)") {
      @include assert {
        @include output {
          @include md\:border-inline-end-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            border-inline-end-color: 0;
          }
        }
      }
    }

    @include it("md\:border-inline-end-width(0)") {
      @include assert {
        @include output {
          @include md\:border-inline-end-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            border-inline-end-width: 0;
          }
        }
      }
    }

    @include it("md\:border-radius(0)") {
      @include assert {
        @include output {
          @include md\:border-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            border-radius: 0;
          }
        }
      }
    }

    @include it("md\:border-start-start-radius(0)") {
      @include assert {
        @include output {
          @include md\:border-start-start-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            border-start-start-radius: 0;
          }
        }
      }
    }

    @include it("md\:border-end-start-radius(0)") {
      @include assert {
        @include output {
          @include md\:border-end-start-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            border-end-start-radius: 0;
          }
        }
      }
    }

    @include it("md\:border-start-end-radius(0)") {
      @include assert {
        @include output {
          @include md\:border-start-end-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            border-start-end-radius: 0;
          }
        }
      }
    }

    @include it("md\:border-end-end-radius(0)") {
      @include assert {
        @include output {
          @include md\:border-end-end-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            border-end-end-radius: 0;
          }
        }
      }
    }

    @include it("md\:border-top-left-radius(0)") {
      @include assert {
        @include output {
          @include md\:border-top-left-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            border-top-left-radius: 0;
          }
        }
      }
    }

    @include it("md\:border-top-right-radius(0)") {
      @include assert {
        @include output {
          @include md\:border-top-right-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            border-top-right-radius: 0;
          }
        }
      }
    }

    @include it("md\:border-bottom-right-radius(0)") {
      @include assert {
        @include output {
          @include md\:border-bottom-right-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            border-bottom-right-radius: 0;
          }
        }
      }
    }

    @include it("md\:border-bottom-left-radius(0)") {
      @include assert {
        @include output {
          @include md\:border-bottom-left-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            border-bottom-left-radius: 0;
          }
        }
      }
    }

    @include it("md\:outline-color(0)") {
      @include assert {
        @include output {
          @include md\:outline-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            outline-color: 0;
          }
        }
      }
    }

    @include it("md\:outline-width(0)") {
      @include assert {
        @include output {
          @include md\:outline-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            outline-width: 0;
          }
        }
      }
    }

    @include it("md\:outline-offset(0)") {
      @include assert {
        @include output {
          @include md\:outline-offset(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            outline-offset: 0;
          }
        }
      }
    }

    @include it("md\:box-shadow(0)") {
      @include assert {
        @include output {
          @include md\:box-shadow(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            box-shadow: 0;
          }
        }
      }
    }

    @include it("md\:opacity(0)") {
      @include assert {
        @include output {
          @include md\:opacity(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            opacity: 0;
          }
        }
      }
    }

    @include it("md\:backdrop-filter(0)") {
      @include assert {
        @include output {
          @include md\:backdrop-filter(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            backdrop-filter: 0;
          }
        }
      }
    }

    @include it("md\:filter(0)") {
      @include assert {
        @include output {
          @include md\:filter(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            filter: 0;
          }
        }
      }
    }

    @include it("md\:box-decoration-break(0)") {
      @include assert {
        @include output {
          @include md\:box-decoration-break(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            box-decoration-break: 0;
          }
        }
      }
    }

    @include it("md\:box-sizing(0)") {
      @include assert {
        @include output {
          @include md\:box-sizing(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            box-sizing: 0;
          }
        }
      }
    }

    @include it("md\:break-after(0)") {
      @include assert {
        @include output {
          @include md\:break-after(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            break-after: 0;
          }
        }
      }
    }

    @include it("md\:break-before(0)") {
      @include assert {
        @include output {
          @include md\:break-before(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            break-before: 0;
          }
        }
      }
    }

    @include it("md\:break-inside(0)") {
      @include assert {
        @include output {
          @include md\:break-inside(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            break-inside: 0;
          }
        }
      }
    }

    @include it("md\:clear(0)") {
      @include assert {
        @include output {
          @include md\:clear(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            clear: 0;
          }
        }
      }
    }

    @include it("md\:float(0)") {
      @include assert {
        @include output {
          @include md\:float(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            float: 0;
          }
        }
      }
    }

    @include it("md\:isolation(0)") {
      @include assert {
        @include output {
          @include md\:isolation(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            isolation: 0;
          }
        }
      }
    }

    @include it("md\:object-fit(0)") {
      @include assert {
        @include output {
          @include md\:object-fit(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            object-fit: 0;
          }
        }
      }
    }

    @include it("md\:overscroll-behavior(0)") {
      @include assert {
        @include output {
          @include md\:overscroll-behavior(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            overscroll-behavior: 0;
          }
        }
      }
    }

    @include it("md\:overscroll-behavior-y(0)") {
      @include assert {
        @include output {
          @include md\:overscroll-behavior-y(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            overscroll-behavior-y: 0;
          }
        }
      }
    }

    @include it("md\:overscroll-behavior-x(0)") {
      @include assert {
        @include output {
          @include md\:overscroll-behavior-x(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            overscroll-behavior-x: 0;
          }
        }
      }
    }

    @include it("md\:position(0)") {
      @include assert {
        @include output {
          @include md\:position(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            position: 0;
          }
        }
      }
    }

    @include it("md\:visibility(0)") {
      @include assert {
        @include output {
          @include md\:visibility(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            visibility: 0;
          }
        }
      }
    }

    @include it("md\:align-content(0)") {
      @include assert {
        @include output {
          @include md\:align-content(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            align-content: 0;
          }
        }
      }
    }

    @include it("md\:align-items(0)") {
      @include assert {
        @include output {
          @include md\:align-items(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            align-items: 0;
          }
        }
      }
    }

    @include it("md\:align-self(0)") {
      @include assert {
        @include output {
          @include md\:align-self(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            align-self: 0;
          }
        }
      }
    }

    @include it("md\:flex-direction(0)") {
      @include assert {
        @include output {
          @include md\:flex-direction(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            flex-direction: 0;
          }
        }
      }
    }

    @include it("md\:flex-wrap(0)") {
      @include assert {
        @include output {
          @include md\:flex-wrap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            flex-wrap: 0;
          }
        }
      }
    }

    @include it("md\:grid-auto-flow(0)") {
      @include assert {
        @include output {
          @include md\:grid-auto-flow(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            grid-auto-flow: 0;
          }
        }
      }
    }

    @include it("md\:justify-content(0)") {
      @include assert {
        @include output {
          @include md\:justify-content(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            justify-content: 0;
          }
        }
      }
    }

    @include it("md\:justify-items(0)") {
      @include assert {
        @include output {
          @include md\:justify-items(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            justify-items: 0;
          }
        }
      }
    }

    @include it("md\:justify-self(0)") {
      @include assert {
        @include output {
          @include md\:justify-self(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            justify-self: 0;
          }
        }
      }
    }

    @include it("md\:place-content(0)") {
      @include assert {
        @include output {
          @include md\:place-content(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            place-content: 0;
          }
        }
      }
    }

    @include it("md\:place-items(0)") {
      @include assert {
        @include output {
          @include md\:place-items(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            place-items: 0;
          }
        }
      }
    }

    @include it("md\:place-self(0)") {
      @include assert {
        @include output {
          @include md\:place-self(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            place-self: 0;
          }
        }
      }
    }

    @include it("md\:-webkit-font-smoothing(0)") {
      @include assert {
        @include output {
          @include md\:-webkit-font-smoothing(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            -webkit-font-smoothing: 0;
          }
        }
      }
    }

    @include it("md\:-moz-osx-font-smoothing(0)") {
      @include assert {
        @include output {
          @include md\:-moz-osx-font-smoothing(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            -moz-osx-font-smoothing: 0;
          }
        }
      }
    }

    @include it("md\:font-style(0)") {
      @include assert {
        @include output {
          @include md\:font-style(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            font-style: 0;
          }
        }
      }
    }

    @include it("md\:font-variant-numeric(0)") {
      @include assert {
        @include output {
          @include md\:font-variant-numeric(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            font-variant-numeric: 0;
          }
        }
      }
    }

    @include it("md\:hyphens(0)") {
      @include assert {
        @include output {
          @include md\:hyphens(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            hyphens: 0;
          }
        }
      }
    }

    @include it("md\:list-style-position(0)") {
      @include assert {
        @include output {
          @include md\:list-style-position(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            list-style-position: 0;
          }
        }
      }
    }

    @include it("md\:text-align(0)") {
      @include assert {
        @include output {
          @include md\:text-align(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            text-align: 0;
          }
        }
      }
    }

    @include it("md\:text-decoration-line(0)") {
      @include assert {
        @include output {
          @include md\:text-decoration-line(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            text-decoration-line: 0;
          }
        }
      }
    }

    @include it("md\:text-decoration-style(0)") {
      @include assert {
        @include output {
          @include md\:text-decoration-style(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            text-decoration-style: 0;
          }
        }
      }
    }

    @include it("md\:text-overflow(0)") {
      @include assert {
        @include output {
          @include md\:text-overflow(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            text-overflow: 0;
          }
        }
      }
    }

    @include it("md\:white-space(0)") {
      @include assert {
        @include output {
          @include md\:white-space(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            white-space: 0;
          }
        }
      }
    }

    @include it("md\:text-transform(0)") {
      @include assert {
        @include output {
          @include md\:text-transform(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            text-transform: 0;
          }
        }
      }
    }

    @include it("md\:text-wrap(0)") {
      @include assert {
        @include output {
          @include md\:text-wrap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            text-wrap: 0;
          }
        }
      }
    }

    @include it("md\:overflow-wrap(0)") {
      @include assert {
        @include output {
          @include md\:overflow-wrap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            overflow-wrap: 0;
          }
        }
      }
    }

    @include it("md\:word-break(0)") {
      @include assert {
        @include output {
          @include md\:word-break(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            word-break: 0;
          }
        }
      }
    }

    @include it("md\:background-attachment(0)") {
      @include assert {
        @include output {
          @include md\:background-attachment(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            background-attachment: 0;
          }
        }
      }
    }

    @include it("md\:background-clip(0)") {
      @include assert {
        @include output {
          @include md\:background-clip(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            background-clip: 0;
          }
        }
      }
    }

    @include it("md\:background-origin(0)") {
      @include assert {
        @include output {
          @include md\:background-origin(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            background-origin: 0;
          }
        }
      }
    }

    @include it("md\:background-repeat(0)") {
      @include assert {
        @include output {
          @include md\:background-repeat(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            background-repeat: 0;
          }
        }
      }
    }

    @include it("md\:border-style(0)") {
      @include assert {
        @include output {
          @include md\:border-style(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            border-style: 0;
          }
        }
      }
    }

    @include it("md\:outline(0)") {
      @include assert {
        @include output {
          @include md\:outline(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            outline: 0;
          }
        }
      }
    }

    @include it("md\:outline-style(0)") {
      @include assert {
        @include output {
          @include md\:outline-style(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            outline-style: 0;
          }
        }
      }
    }

    @include it("md\:background-blend-mode(0)") {
      @include assert {
        @include output {
          @include md\:background-blend-mode(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            background-blend-mode: 0;
          }
        }
      }
    }

    @include it("md\:mix-blend-mode(0)") {
      @include assert {
        @include output {
          @include md\:mix-blend-mode(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            mix-blend-mode: 0;
          }
        }
      }
    }

    @include it("md\:border-collapse(0)") {
      @include assert {
        @include output {
          @include md\:border-collapse(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            border-collapse: 0;
          }
        }
      }
    }

    @include it("md\:caption-side(0)") {
      @include assert {
        @include output {
          @include md\:caption-side(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            caption-side: 0;
          }
        }
      }
    }

    @include it("md\:table-layout(0)") {
      @include assert {
        @include output {
          @include md\:table-layout(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            table-layout: 0;
          }
        }
      }
    }

    @include it("md\:appearance(0)") {
      @include assert {
        @include output {
          @include md\:appearance(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            appearance: 0;
          }
        }
      }
    }

    @include it("md\:pointer-events(0)") {
      @include assert {
        @include output {
          @include md\:pointer-events(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            pointer-events: 0;
          }
        }
      }
    }

    @include it("md\:resize(0)") {
      @include assert {
        @include output {
          @include md\:resize(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            resize: 0;
          }
        }
      }
    }

    @include it("md\:scroll-behavior(0)") {
      @include assert {
        @include output {
          @include md\:scroll-behavior(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            scroll-behavior: 0;
          }
        }
      }
    }

    @include it("md\:scroll-snap-align(0)") {
      @include assert {
        @include output {
          @include md\:scroll-snap-align(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            scroll-snap-align: 0;
          }
        }
      }
    }

    @include it("md\:scroll-snap-stop(0)") {
      @include assert {
        @include output {
          @include md\:scroll-snap-stop(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            scroll-snap-stop: 0;
          }
        }
      }
    }

    @include it("md\:scroll-snap-type(0)") {
      @include assert {
        @include output {
          @include md\:scroll-snap-type(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            scroll-snap-type: 0;
          }
        }
      }
    }

    @include it("md\:touch-action(0)") {
      @include assert {
        @include output {
          @include md\:touch-action(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            touch-action: 0;
          }
        }
      }
    }

    @include it("md\:user-select(0)") {
      @include assert {
        @include output {
          @include md\:user-select(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            user-select: 0;
          }
        }
      }
    }

    @include it("md\:forced-color-adjust(0)") {
      @include assert {
        @include output {
          @include md\:forced-color-adjust(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $md) {
            forced-color-adjust: 0;
          }
        }
      }
    }

    @include it("lg\:aspect-ratio(0)") {
      @include assert {
        @include output {
          @include lg\:aspect-ratio(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            aspect-ratio: 0;
          }
        }
      }
    }

    @include it("lg\:columns(0)") {
      @include assert {
        @include output {
          @include lg\:columns(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            columns: 0;
          }
        }
      }
    }

    @include it("lg\:object-position(0)") {
      @include assert {
        @include output {
          @include lg\:object-position(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            object-position: 0;
          }
        }
      }
    }

    @include it("lg\:inset(0)") {
      @include assert {
        @include output {
          @include lg\:inset(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            inset: 0;
          }
        }
      }
    }

    @include it("lg\:inset-inline-start(0)") {
      @include assert {
        @include output {
          @include lg\:inset-inline-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            inset-inline-start: 0;
          }
        }
      }
    }

    @include it("lg\:inset-inline-end(0)") {
      @include assert {
        @include output {
          @include lg\:inset-inline-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            inset-inline-end: 0;
          }
        }
      }
    }

    @include it("lg\:top(0)") {
      @include assert {
        @include output {
          @include lg\:top(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            top: 0;
          }
        }
      }
    }

    @include it("lg\:right(0)") {
      @include assert {
        @include output {
          @include lg\:right(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            right: 0;
          }
        }
      }
    }

    @include it("lg\:bottom(0)") {
      @include assert {
        @include output {
          @include lg\:bottom(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            bottom: 0;
          }
        }
      }
    }

    @include it("lg\:left(0)") {
      @include assert {
        @include output {
          @include lg\:left(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            left: 0;
          }
        }
      }
    }

    @include it("lg\:z-index(0)") {
      @include assert {
        @include output {
          @include lg\:z-index(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            z-index: 0;
          }
        }
      }
    }

    @include it("lg\:border-spacing(0)") {
      @include assert {
        @include output {
          @include lg\:border-spacing(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            border-spacing: 0;
          }
        }
      }
    }

    @include it("lg\:animation(0)") {
      @include assert {
        @include output {
          @include lg\:animation(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            animation: 0;
          }
        }
      }
    }

    @include it("lg\:transition-delay(0)") {
      @include assert {
        @include output {
          @include lg\:transition-delay(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            transition-delay: 0;
          }
        }
      }
    }

    @include it("lg\:transition-property(0)") {
      @include assert {
        @include output {
          @include lg\:transition-property(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            transition-property: 0;
          }
        }
      }
    }

    @include it("lg\:transition-timing-function(0)") {
      @include assert {
        @include output {
          @include lg\:transition-timing-function(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            transition-timing-function: 0;
          }
        }
      }
    }

    @include it("lg\:transition-duration(0)") {
      @include assert {
        @include output {
          @include lg\:transition-duration(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            transition-duration: 0;
          }
        }
      }
    }

    @include it("lg\:transform(0)") {
      @include assert {
        @include output {
          @include lg\:transform(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            transform: 0;
          }
        }
      }
    }

    @include it("lg\:transform-origin(0)") {
      @include assert {
        @include output {
          @include lg\:transform-origin(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            transform-origin: 0;
          }
        }
      }
    }

    @include it("lg\:accent-color(0)") {
      @include assert {
        @include output {
          @include lg\:accent-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            accent-color: 0;
          }
        }
      }
    }

    @include it("lg\:caret-color(0)") {
      @include assert {
        @include output {
          @include lg\:caret-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            caret-color: 0;
          }
        }
      }
    }

    @include it("lg\:cursor-(0, 02)") {
      @include assert {
        @include output {
          @include lg\:cursor-(0, 02);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            cursor: 0, 02;
          }
        }
      }
    }

    @include it("lg\:scroll-margin(0)") {
      @include assert {
        @include output {
          @include lg\:scroll-margin(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            scroll-margin: 0;
          }
        }
      }
    }

    @include it("lg\:scroll-margin-inline-start(0)") {
      @include assert {
        @include output {
          @include lg\:scroll-margin-inline-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            scroll-margin-inline-start: 0;
          }
        }
      }
    }

    @include it("lg\:scroll-margin-inline-end(0)") {
      @include assert {
        @include output {
          @include lg\:scroll-margin-inline-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            scroll-margin-inline-end: 0;
          }
        }
      }
    }

    @include it("lg\:scroll-margin-top(0)") {
      @include assert {
        @include output {
          @include lg\:scroll-margin-top(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            scroll-margin-top: 0;
          }
        }
      }
    }

    @include it("lg\:scroll-margin-right(0)") {
      @include assert {
        @include output {
          @include lg\:scroll-margin-right(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            scroll-margin-right: 0;
          }
        }
      }
    }

    @include it("lg\:scroll-margin-bottom(0)") {
      @include assert {
        @include output {
          @include lg\:scroll-margin-bottom(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            scroll-margin-bottom: 0;
          }
        }
      }
    }

    @include it("lg\:scroll-margin-left(0)") {
      @include assert {
        @include output {
          @include lg\:scroll-margin-left(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            scroll-margin-left: 0;
          }
        }
      }
    }

    @include it("lg\:scroll-padding(0)") {
      @include assert {
        @include output {
          @include lg\:scroll-padding(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            scroll-padding: 0;
          }
        }
      }
    }

    @include it("lg\:scroll-padding-inline-start(0)") {
      @include assert {
        @include output {
          @include lg\:scroll-padding-inline-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            scroll-padding-inline-start: 0;
          }
        }
      }
    }

    @include it("lg\:scroll-padding-inline-end(0)") {
      @include assert {
        @include output {
          @include lg\:scroll-padding-inline-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            scroll-padding-inline-end: 0;
          }
        }
      }
    }

    @include it("lg\:scroll-padding-top(0)") {
      @include assert {
        @include output {
          @include lg\:scroll-padding-top(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            scroll-padding-top: 0;
          }
        }
      }
    }

    @include it("lg\:scroll-padding-right(0)") {
      @include assert {
        @include output {
          @include lg\:scroll-padding-right(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            scroll-padding-right: 0;
          }
        }
      }
    }

    @include it("lg\:scroll-padding-bottom(0)") {
      @include assert {
        @include output {
          @include lg\:scroll-padding-bottom(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            scroll-padding-bottom: 0;
          }
        }
      }
    }

    @include it("lg\:scroll-padding-left(0)") {
      @include assert {
        @include output {
          @include lg\:scroll-padding-left(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            scroll-padding-left: 0;
          }
        }
      }
    }

    @include it("lg\:will-change-(0, 02)") {
      @include assert {
        @include output {
          @include lg\:will-change-(0, 02);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            will-change: 0, 02;
          }
        }
      }
    }

    @include it("lg\:fill(0)") {
      @include assert {
        @include output {
          @include lg\:fill(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            fill: 0;
          }
        }
      }
    }

    @include it("lg\:stroke(0)") {
      @include assert {
        @include output {
          @include lg\:stroke(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            stroke: 0;
          }
        }
      }
    }

    @include it("lg\:stroke-width(0)") {
      @include assert {
        @include output {
          @include lg\:stroke-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            stroke-width: 0;
          }
        }
      }
    }

    @include it("lg\:flex(0)") {
      @include assert {
        @include output {
          @include lg\:flex(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            flex: 0;
          }
        }
      }
    }

    @include it("lg\:flex-basis(0)") {
      @include assert {
        @include output {
          @include lg\:flex-basis(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            flex-basis: 0;
          }
        }
      }
    }

    @include it("lg\:flex-grow(0)") {
      @include assert {
        @include output {
          @include lg\:flex-grow(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            flex-grow: 0;
          }
        }
      }
    }

    @include it("lg\:flex-shrink(0)") {
      @include assert {
        @include output {
          @include lg\:flex-shrink(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            flex-shrink: 0;
          }
        }
      }
    }

    @include it("lg\:gap(0)") {
      @include assert {
        @include output {
          @include lg\:gap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            gap: 0;
          }
        }
      }
    }

    @include it("lg\:column-gap(0)") {
      @include assert {
        @include output {
          @include lg\:column-gap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            column-gap: 0;
          }
        }
      }
    }

    @include it("lg\:row-gap(0)") {
      @include assert {
        @include output {
          @include lg\:row-gap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            row-gap: 0;
          }
        }
      }
    }

    @include it("lg\:grid-auto-columns(0)") {
      @include assert {
        @include output {
          @include lg\:grid-auto-columns(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            grid-auto-columns: 0;
          }
        }
      }
    }

    @include it("lg\:grid-auto-rows(0)") {
      @include assert {
        @include output {
          @include lg\:grid-auto-rows(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            grid-auto-rows: 0;
          }
        }
      }
    }

    @include it("lg\:grid-column(0)") {
      @include assert {
        @include output {
          @include lg\:grid-column(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            grid-column: 0;
          }
        }
      }
    }

    @include it("lg\:grid-column-start(0)") {
      @include assert {
        @include output {
          @include lg\:grid-column-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            grid-column-start: 0;
          }
        }
      }
    }

    @include it("lg\:grid-column-end(0)") {
      @include assert {
        @include output {
          @include lg\:grid-column-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            grid-column-end: 0;
          }
        }
      }
    }

    @include it("lg\:grid-row(0)") {
      @include assert {
        @include output {
          @include lg\:grid-row(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            grid-row: 0;
          }
        }
      }
    }

    @include it("lg\:grid-row-start(0)") {
      @include assert {
        @include output {
          @include lg\:grid-row-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            grid-row-start: 0;
          }
        }
      }
    }

    @include it("lg\:grid-row-end(0)") {
      @include assert {
        @include output {
          @include lg\:grid-row-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            grid-row-end: 0;
          }
        }
      }
    }

    @include it("lg\:grid-template-columns(0)") {
      @include assert {
        @include output {
          @include lg\:grid-template-columns(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            grid-template-columns: 0;
          }
        }
      }
    }

    @include it("lg\:grid-template-rows(0)") {
      @include assert {
        @include output {
          @include lg\:grid-template-rows(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            grid-template-rows: 0;
          }
        }
      }
    }

    @include it("lg\:order(0)") {
      @include assert {
        @include output {
          @include lg\:order(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            order: 0;
          }
        }
      }
    }

    @include it("lg\:margin(0)") {
      @include assert {
        @include output {
          @include lg\:margin(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            margin: 0;
          }
        }
      }
    }

    @include it("lg\:margin-inline-start(0)") {
      @include assert {
        @include output {
          @include lg\:margin-inline-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            margin-inline-start: 0;
          }
        }
      }
    }

    @include it("lg\:margin-inline-end(0)") {
      @include assert {
        @include output {
          @include lg\:margin-inline-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            margin-inline-end: 0;
          }
        }
      }
    }

    @include it("lg\:margin-top(0)") {
      @include assert {
        @include output {
          @include lg\:margin-top(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            margin-top: 0;
          }
        }
      }
    }

    @include it("lg\:margin-right(0)") {
      @include assert {
        @include output {
          @include lg\:margin-right(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            margin-right: 0;
          }
        }
      }
    }

    @include it("lg\:margin-bottom(0)") {
      @include assert {
        @include output {
          @include lg\:margin-bottom(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            margin-bottom: 0;
          }
        }
      }
    }

    @include it("lg\:margin-left(0)") {
      @include assert {
        @include output {
          @include lg\:margin-left(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            margin-left: 0;
          }
        }
      }
    }

    @include it("lg\:padding(0)") {
      @include assert {
        @include output {
          @include lg\:padding(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            padding: 0;
          }
        }
      }
    }

    @include it("lg\:padding-inline-start(0)") {
      @include assert {
        @include output {
          @include lg\:padding-inline-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            padding-inline-start: 0;
          }
        }
      }
    }

    @include it("lg\:padding-inline-end(0)") {
      @include assert {
        @include output {
          @include lg\:padding-inline-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            padding-inline-end: 0;
          }
        }
      }
    }

    @include it("lg\:padding-top(0)") {
      @include assert {
        @include output {
          @include lg\:padding-top(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            padding-top: 0;
          }
        }
      }
    }

    @include it("lg\:padding-right(0)") {
      @include assert {
        @include output {
          @include lg\:padding-right(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            padding-right: 0;
          }
        }
      }
    }

    @include it("lg\:padding-bottom(0)") {
      @include assert {
        @include output {
          @include lg\:padding-bottom(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            padding-bottom: 0;
          }
        }
      }
    }

    @include it("lg\:padding-left(0)") {
      @include assert {
        @include output {
          @include lg\:padding-left(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            padding-left: 0;
          }
        }
      }
    }

    @include it("lg\:height(0)") {
      @include assert {
        @include output {
          @include lg\:height(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            height: 0;
          }
        }
      }
    }

    @include it("lg\:max-height(0)") {
      @include assert {
        @include output {
          @include lg\:max-height(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            max-height: 0;
          }
        }
      }
    }

    @include it("lg\:max-width(0)") {
      @include assert {
        @include output {
          @include lg\:max-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            max-width: 0;
          }
        }
      }
    }

    @include it("lg\:min-height(0)") {
      @include assert {
        @include output {
          @include lg\:min-height(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            min-height: 0;
          }
        }
      }
    }

    @include it("lg\:min-width(0)") {
      @include assert {
        @include output {
          @include lg\:min-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            min-width: 0;
          }
        }
      }
    }

    @include it("lg\:width(0)") {
      @include assert {
        @include output {
          @include lg\:width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            width: 0;
          }
        }
      }
    }

    @include it("lg\:font-family(0)") {
      @include assert {
        @include output {
          @include lg\:font-family(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            font-family: 0;
          }
        }
      }
    }

    @include it("lg\:font-weight(0)") {
      @include assert {
        @include output {
          @include lg\:font-weight(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            font-weight: 0;
          }
        }
      }
    }

    @include it("lg\:letter-spacing(0)") {
      @include assert {
        @include output {
          @include lg\:letter-spacing(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            letter-spacing: 0;
          }
        }
      }
    }

    @include it("lg\:overflow(0)") {
      @include assert {
        @include output {
          @include lg\:overflow(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            overflow: 0;
          }
        }
      }
    }

    @include it("lg\:display(0)") {
      @include assert {
        @include output {
          @include lg\:display(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            display: 0;
          }
        }
      }
    }

    @include it("lg\:-webkit-box-orient(0)") {
      @include assert {
        @include output {
          @include lg\:-webkit-box-orient(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            -webkit-box-orient: 0;
          }
        }
      }
    }

    @include it("lg\:-webkit-line-clamp(0)") {
      @include assert {
        @include output {
          @include lg\:-webkit-line-clamp(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            -webkit-line-clamp: 0;
          }
        }
      }
    }

    @include it("lg\:line-height(0)") {
      @include assert {
        @include output {
          @include lg\:line-height(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            line-height: 0;
          }
        }
      }
    }

    @include it("lg\:list-style-image(0)") {
      @include assert {
        @include output {
          @include lg\:list-style-image(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            list-style-image: 0;
          }
        }
      }
    }

    @include it("lg\:list-style-type(0)") {
      @include assert {
        @include output {
          @include lg\:list-style-type(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            list-style-type: 0;
          }
        }
      }
    }

    @include it("lg\:font-size(0)") {
      @include assert {
        @include output {
          @include lg\:font-size(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            font-size: 0;
          }
        }
      }
    }

    @include it("lg\:text-decoration-color(0)") {
      @include assert {
        @include output {
          @include lg\:text-decoration-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            text-decoration-color: 0;
          }
        }
      }
    }

    @include it("lg\:text-decoration-thickness(0)") {
      @include assert {
        @include output {
          @include lg\:text-decoration-thickness(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            text-decoration-thickness: 0;
          }
        }
      }
    }

    @include it("lg\:text-indent(0)") {
      @include assert {
        @include output {
          @include lg\:text-indent(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            text-indent: 0;
          }
        }
      }
    }

    @include it("lg\:text-underline-offset(0)") {
      @include assert {
        @include output {
          @include lg\:text-underline-offset(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            text-underline-offset: 0;
          }
        }
      }
    }

    @include it("lg\:vertical-align(0)") {
      @include assert {
        @include output {
          @include lg\:vertical-align(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            vertical-align: 0;
          }
        }
      }
    }

    @include it("lg\:background-color(0)") {
      @include assert {
        @include output {
          @include lg\:background-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            background-color: 0;
          }
        }
      }
    }

    @include it("lg\:background-size(0)") {
      @include assert {
        @include output {
          @include lg\:background-size(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            background-size: 0;
          }
        }
      }
    }

    @include it("lg\:background-position(0)") {
      @include assert {
        @include output {
          @include lg\:background-position(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            background-position: 0;
          }
        }
      }
    }

    @include it("lg\:background-image(0)") {
      @include assert {
        @include output {
          @include lg\:background-image(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            background-image: 0;
          }
        }
      }
    }

    @include it("lg\:border-color(0)") {
      @include assert {
        @include output {
          @include lg\:border-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            border-color: 0;
          }
        }
      }
    }

    @include it("lg\:border-width(0)") {
      @include assert {
        @include output {
          @include lg\:border-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            border-width: 0;
          }
        }
      }
    }

    @include it("lg\:border-left-color(0)") {
      @include assert {
        @include output {
          @include lg\:border-left-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            border-left-color: 0;
          }
        }
      }
    }

    @include it("lg\:border-left-width(0)") {
      @include assert {
        @include output {
          @include lg\:border-left-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            border-left-width: 0;
          }
        }
      }
    }

    @include it("lg\:border-right-color(0)") {
      @include assert {
        @include output {
          @include lg\:border-right-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            border-right-color: 0;
          }
        }
      }
    }

    @include it("lg\:border-right-width(0)") {
      @include assert {
        @include output {
          @include lg\:border-right-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            border-right-width: 0;
          }
        }
      }
    }

    @include it("lg\:border-top-color(0)") {
      @include assert {
        @include output {
          @include lg\:border-top-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            border-top-color: 0;
          }
        }
      }
    }

    @include it("lg\:border-top-width(0)") {
      @include assert {
        @include output {
          @include lg\:border-top-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            border-top-width: 0;
          }
        }
      }
    }

    @include it("lg\:border-bottom-color(0)") {
      @include assert {
        @include output {
          @include lg\:border-bottom-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            border-bottom-color: 0;
          }
        }
      }
    }

    @include it("lg\:border-bottom-width(0)") {
      @include assert {
        @include output {
          @include lg\:border-bottom-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            border-bottom-width: 0;
          }
        }
      }
    }

    @include it("lg\:border-inline-start-color(0)") {
      @include assert {
        @include output {
          @include lg\:border-inline-start-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            border-inline-start-color: 0;
          }
        }
      }
    }

    @include it("lg\:border-inline-start-width(0)") {
      @include assert {
        @include output {
          @include lg\:border-inline-start-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            border-inline-start-width: 0;
          }
        }
      }
    }

    @include it("lg\:border-inline-end-color(0)") {
      @include assert {
        @include output {
          @include lg\:border-inline-end-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            border-inline-end-color: 0;
          }
        }
      }
    }

    @include it("lg\:border-inline-end-width(0)") {
      @include assert {
        @include output {
          @include lg\:border-inline-end-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            border-inline-end-width: 0;
          }
        }
      }
    }

    @include it("lg\:border-radius(0)") {
      @include assert {
        @include output {
          @include lg\:border-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            border-radius: 0;
          }
        }
      }
    }

    @include it("lg\:border-start-start-radius(0)") {
      @include assert {
        @include output {
          @include lg\:border-start-start-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            border-start-start-radius: 0;
          }
        }
      }
    }

    @include it("lg\:border-end-start-radius(0)") {
      @include assert {
        @include output {
          @include lg\:border-end-start-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            border-end-start-radius: 0;
          }
        }
      }
    }

    @include it("lg\:border-start-end-radius(0)") {
      @include assert {
        @include output {
          @include lg\:border-start-end-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            border-start-end-radius: 0;
          }
        }
      }
    }

    @include it("lg\:border-end-end-radius(0)") {
      @include assert {
        @include output {
          @include lg\:border-end-end-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            border-end-end-radius: 0;
          }
        }
      }
    }

    @include it("lg\:border-top-left-radius(0)") {
      @include assert {
        @include output {
          @include lg\:border-top-left-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            border-top-left-radius: 0;
          }
        }
      }
    }

    @include it("lg\:border-top-right-radius(0)") {
      @include assert {
        @include output {
          @include lg\:border-top-right-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            border-top-right-radius: 0;
          }
        }
      }
    }

    @include it("lg\:border-bottom-right-radius(0)") {
      @include assert {
        @include output {
          @include lg\:border-bottom-right-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            border-bottom-right-radius: 0;
          }
        }
      }
    }

    @include it("lg\:border-bottom-left-radius(0)") {
      @include assert {
        @include output {
          @include lg\:border-bottom-left-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            border-bottom-left-radius: 0;
          }
        }
      }
    }

    @include it("lg\:outline-color(0)") {
      @include assert {
        @include output {
          @include lg\:outline-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            outline-color: 0;
          }
        }
      }
    }

    @include it("lg\:outline-width(0)") {
      @include assert {
        @include output {
          @include lg\:outline-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            outline-width: 0;
          }
        }
      }
    }

    @include it("lg\:outline-offset(0)") {
      @include assert {
        @include output {
          @include lg\:outline-offset(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            outline-offset: 0;
          }
        }
      }
    }

    @include it("lg\:box-shadow(0)") {
      @include assert {
        @include output {
          @include lg\:box-shadow(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            box-shadow: 0;
          }
        }
      }
    }

    @include it("lg\:opacity(0)") {
      @include assert {
        @include output {
          @include lg\:opacity(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            opacity: 0;
          }
        }
      }
    }

    @include it("lg\:backdrop-filter(0)") {
      @include assert {
        @include output {
          @include lg\:backdrop-filter(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            backdrop-filter: 0;
          }
        }
      }
    }

    @include it("lg\:filter(0)") {
      @include assert {
        @include output {
          @include lg\:filter(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            filter: 0;
          }
        }
      }
    }

    @include it("lg\:box-decoration-break(0)") {
      @include assert {
        @include output {
          @include lg\:box-decoration-break(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            box-decoration-break: 0;
          }
        }
      }
    }

    @include it("lg\:box-sizing(0)") {
      @include assert {
        @include output {
          @include lg\:box-sizing(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            box-sizing: 0;
          }
        }
      }
    }

    @include it("lg\:break-after(0)") {
      @include assert {
        @include output {
          @include lg\:break-after(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            break-after: 0;
          }
        }
      }
    }

    @include it("lg\:break-before(0)") {
      @include assert {
        @include output {
          @include lg\:break-before(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            break-before: 0;
          }
        }
      }
    }

    @include it("lg\:break-inside(0)") {
      @include assert {
        @include output {
          @include lg\:break-inside(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            break-inside: 0;
          }
        }
      }
    }

    @include it("lg\:clear(0)") {
      @include assert {
        @include output {
          @include lg\:clear(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            clear: 0;
          }
        }
      }
    }

    @include it("lg\:float(0)") {
      @include assert {
        @include output {
          @include lg\:float(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            float: 0;
          }
        }
      }
    }

    @include it("lg\:isolation(0)") {
      @include assert {
        @include output {
          @include lg\:isolation(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            isolation: 0;
          }
        }
      }
    }

    @include it("lg\:object-fit(0)") {
      @include assert {
        @include output {
          @include lg\:object-fit(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            object-fit: 0;
          }
        }
      }
    }

    @include it("lg\:overscroll-behavior(0)") {
      @include assert {
        @include output {
          @include lg\:overscroll-behavior(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            overscroll-behavior: 0;
          }
        }
      }
    }

    @include it("lg\:overscroll-behavior-y(0)") {
      @include assert {
        @include output {
          @include lg\:overscroll-behavior-y(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            overscroll-behavior-y: 0;
          }
        }
      }
    }

    @include it("lg\:overscroll-behavior-x(0)") {
      @include assert {
        @include output {
          @include lg\:overscroll-behavior-x(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            overscroll-behavior-x: 0;
          }
        }
      }
    }

    @include it("lg\:position(0)") {
      @include assert {
        @include output {
          @include lg\:position(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            position: 0;
          }
        }
      }
    }

    @include it("lg\:visibility(0)") {
      @include assert {
        @include output {
          @include lg\:visibility(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            visibility: 0;
          }
        }
      }
    }

    @include it("lg\:align-content(0)") {
      @include assert {
        @include output {
          @include lg\:align-content(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            align-content: 0;
          }
        }
      }
    }

    @include it("lg\:align-items(0)") {
      @include assert {
        @include output {
          @include lg\:align-items(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            align-items: 0;
          }
        }
      }
    }

    @include it("lg\:align-self(0)") {
      @include assert {
        @include output {
          @include lg\:align-self(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            align-self: 0;
          }
        }
      }
    }

    @include it("lg\:flex-direction(0)") {
      @include assert {
        @include output {
          @include lg\:flex-direction(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            flex-direction: 0;
          }
        }
      }
    }

    @include it("lg\:flex-wrap(0)") {
      @include assert {
        @include output {
          @include lg\:flex-wrap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            flex-wrap: 0;
          }
        }
      }
    }

    @include it("lg\:grid-auto-flow(0)") {
      @include assert {
        @include output {
          @include lg\:grid-auto-flow(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            grid-auto-flow: 0;
          }
        }
      }
    }

    @include it("lg\:justify-content(0)") {
      @include assert {
        @include output {
          @include lg\:justify-content(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            justify-content: 0;
          }
        }
      }
    }

    @include it("lg\:justify-items(0)") {
      @include assert {
        @include output {
          @include lg\:justify-items(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            justify-items: 0;
          }
        }
      }
    }

    @include it("lg\:justify-self(0)") {
      @include assert {
        @include output {
          @include lg\:justify-self(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            justify-self: 0;
          }
        }
      }
    }

    @include it("lg\:place-content(0)") {
      @include assert {
        @include output {
          @include lg\:place-content(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            place-content: 0;
          }
        }
      }
    }

    @include it("lg\:place-items(0)") {
      @include assert {
        @include output {
          @include lg\:place-items(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            place-items: 0;
          }
        }
      }
    }

    @include it("lg\:place-self(0)") {
      @include assert {
        @include output {
          @include lg\:place-self(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            place-self: 0;
          }
        }
      }
    }

    @include it("lg\:-webkit-font-smoothing(0)") {
      @include assert {
        @include output {
          @include lg\:-webkit-font-smoothing(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            -webkit-font-smoothing: 0;
          }
        }
      }
    }

    @include it("lg\:-moz-osx-font-smoothing(0)") {
      @include assert {
        @include output {
          @include lg\:-moz-osx-font-smoothing(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            -moz-osx-font-smoothing: 0;
          }
        }
      }
    }

    @include it("lg\:font-style(0)") {
      @include assert {
        @include output {
          @include lg\:font-style(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            font-style: 0;
          }
        }
      }
    }

    @include it("lg\:font-variant-numeric(0)") {
      @include assert {
        @include output {
          @include lg\:font-variant-numeric(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            font-variant-numeric: 0;
          }
        }
      }
    }

    @include it("lg\:hyphens(0)") {
      @include assert {
        @include output {
          @include lg\:hyphens(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            hyphens: 0;
          }
        }
      }
    }

    @include it("lg\:list-style-position(0)") {
      @include assert {
        @include output {
          @include lg\:list-style-position(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            list-style-position: 0;
          }
        }
      }
    }

    @include it("lg\:text-align(0)") {
      @include assert {
        @include output {
          @include lg\:text-align(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            text-align: 0;
          }
        }
      }
    }

    @include it("lg\:text-decoration-line(0)") {
      @include assert {
        @include output {
          @include lg\:text-decoration-line(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            text-decoration-line: 0;
          }
        }
      }
    }

    @include it("lg\:text-decoration-style(0)") {
      @include assert {
        @include output {
          @include lg\:text-decoration-style(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            text-decoration-style: 0;
          }
        }
      }
    }

    @include it("lg\:text-overflow(0)") {
      @include assert {
        @include output {
          @include lg\:text-overflow(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            text-overflow: 0;
          }
        }
      }
    }

    @include it("lg\:white-space(0)") {
      @include assert {
        @include output {
          @include lg\:white-space(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            white-space: 0;
          }
        }
      }
    }

    @include it("lg\:text-transform(0)") {
      @include assert {
        @include output {
          @include lg\:text-transform(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            text-transform: 0;
          }
        }
      }
    }

    @include it("lg\:text-wrap(0)") {
      @include assert {
        @include output {
          @include lg\:text-wrap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            text-wrap: 0;
          }
        }
      }
    }

    @include it("lg\:overflow-wrap(0)") {
      @include assert {
        @include output {
          @include lg\:overflow-wrap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            overflow-wrap: 0;
          }
        }
      }
    }

    @include it("lg\:word-break(0)") {
      @include assert {
        @include output {
          @include lg\:word-break(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            word-break: 0;
          }
        }
      }
    }

    @include it("lg\:background-attachment(0)") {
      @include assert {
        @include output {
          @include lg\:background-attachment(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            background-attachment: 0;
          }
        }
      }
    }

    @include it("lg\:background-clip(0)") {
      @include assert {
        @include output {
          @include lg\:background-clip(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            background-clip: 0;
          }
        }
      }
    }

    @include it("lg\:background-origin(0)") {
      @include assert {
        @include output {
          @include lg\:background-origin(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            background-origin: 0;
          }
        }
      }
    }

    @include it("lg\:background-repeat(0)") {
      @include assert {
        @include output {
          @include lg\:background-repeat(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            background-repeat: 0;
          }
        }
      }
    }

    @include it("lg\:border-style(0)") {
      @include assert {
        @include output {
          @include lg\:border-style(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            border-style: 0;
          }
        }
      }
    }

    @include it("lg\:outline(0)") {
      @include assert {
        @include output {
          @include lg\:outline(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            outline: 0;
          }
        }
      }
    }

    @include it("lg\:outline-style(0)") {
      @include assert {
        @include output {
          @include lg\:outline-style(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            outline-style: 0;
          }
        }
      }
    }

    @include it("lg\:background-blend-mode(0)") {
      @include assert {
        @include output {
          @include lg\:background-blend-mode(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            background-blend-mode: 0;
          }
        }
      }
    }

    @include it("lg\:mix-blend-mode(0)") {
      @include assert {
        @include output {
          @include lg\:mix-blend-mode(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            mix-blend-mode: 0;
          }
        }
      }
    }

    @include it("lg\:border-collapse(0)") {
      @include assert {
        @include output {
          @include lg\:border-collapse(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            border-collapse: 0;
          }
        }
      }
    }

    @include it("lg\:caption-side(0)") {
      @include assert {
        @include output {
          @include lg\:caption-side(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            caption-side: 0;
          }
        }
      }
    }

    @include it("lg\:table-layout(0)") {
      @include assert {
        @include output {
          @include lg\:table-layout(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            table-layout: 0;
          }
        }
      }
    }

    @include it("lg\:appearance(0)") {
      @include assert {
        @include output {
          @include lg\:appearance(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            appearance: 0;
          }
        }
      }
    }

    @include it("lg\:pointer-events(0)") {
      @include assert {
        @include output {
          @include lg\:pointer-events(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            pointer-events: 0;
          }
        }
      }
    }

    @include it("lg\:resize(0)") {
      @include assert {
        @include output {
          @include lg\:resize(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            resize: 0;
          }
        }
      }
    }

    @include it("lg\:scroll-behavior(0)") {
      @include assert {
        @include output {
          @include lg\:scroll-behavior(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            scroll-behavior: 0;
          }
        }
      }
    }

    @include it("lg\:scroll-snap-align(0)") {
      @include assert {
        @include output {
          @include lg\:scroll-snap-align(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            scroll-snap-align: 0;
          }
        }
      }
    }

    @include it("lg\:scroll-snap-stop(0)") {
      @include assert {
        @include output {
          @include lg\:scroll-snap-stop(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            scroll-snap-stop: 0;
          }
        }
      }
    }

    @include it("lg\:scroll-snap-type(0)") {
      @include assert {
        @include output {
          @include lg\:scroll-snap-type(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            scroll-snap-type: 0;
          }
        }
      }
    }

    @include it("lg\:touch-action(0)") {
      @include assert {
        @include output {
          @include lg\:touch-action(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            touch-action: 0;
          }
        }
      }
    }

    @include it("lg\:user-select(0)") {
      @include assert {
        @include output {
          @include lg\:user-select(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            user-select: 0;
          }
        }
      }
    }

    @include it("lg\:forced-color-adjust(0)") {
      @include assert {
        @include output {
          @include lg\:forced-color-adjust(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $lg) {
            forced-color-adjust: 0;
          }
        }
      }
    }

    @include it("xl\:aspect-ratio(0)") {
      @include assert {
        @include output {
          @include xl\:aspect-ratio(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            aspect-ratio: 0;
          }
        }
      }
    }

    @include it("xl\:columns(0)") {
      @include assert {
        @include output {
          @include xl\:columns(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            columns: 0;
          }
        }
      }
    }

    @include it("xl\:object-position(0)") {
      @include assert {
        @include output {
          @include xl\:object-position(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            object-position: 0;
          }
        }
      }
    }

    @include it("xl\:inset(0)") {
      @include assert {
        @include output {
          @include xl\:inset(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            inset: 0;
          }
        }
      }
    }

    @include it("xl\:inset-inline-start(0)") {
      @include assert {
        @include output {
          @include xl\:inset-inline-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            inset-inline-start: 0;
          }
        }
      }
    }

    @include it("xl\:inset-inline-end(0)") {
      @include assert {
        @include output {
          @include xl\:inset-inline-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            inset-inline-end: 0;
          }
        }
      }
    }

    @include it("xl\:top(0)") {
      @include assert {
        @include output {
          @include xl\:top(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            top: 0;
          }
        }
      }
    }

    @include it("xl\:right(0)") {
      @include assert {
        @include output {
          @include xl\:right(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            right: 0;
          }
        }
      }
    }

    @include it("xl\:bottom(0)") {
      @include assert {
        @include output {
          @include xl\:bottom(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            bottom: 0;
          }
        }
      }
    }

    @include it("xl\:left(0)") {
      @include assert {
        @include output {
          @include xl\:left(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            left: 0;
          }
        }
      }
    }

    @include it("xl\:z-index(0)") {
      @include assert {
        @include output {
          @include xl\:z-index(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            z-index: 0;
          }
        }
      }
    }

    @include it("xl\:border-spacing(0)") {
      @include assert {
        @include output {
          @include xl\:border-spacing(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            border-spacing: 0;
          }
        }
      }
    }

    @include it("xl\:animation(0)") {
      @include assert {
        @include output {
          @include xl\:animation(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            animation: 0;
          }
        }
      }
    }

    @include it("xl\:transition-delay(0)") {
      @include assert {
        @include output {
          @include xl\:transition-delay(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            transition-delay: 0;
          }
        }
      }
    }

    @include it("xl\:transition-property(0)") {
      @include assert {
        @include output {
          @include xl\:transition-property(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            transition-property: 0;
          }
        }
      }
    }

    @include it("xl\:transition-timing-function(0)") {
      @include assert {
        @include output {
          @include xl\:transition-timing-function(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            transition-timing-function: 0;
          }
        }
      }
    }

    @include it("xl\:transition-duration(0)") {
      @include assert {
        @include output {
          @include xl\:transition-duration(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            transition-duration: 0;
          }
        }
      }
    }

    @include it("xl\:transform(0)") {
      @include assert {
        @include output {
          @include xl\:transform(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            transform: 0;
          }
        }
      }
    }

    @include it("xl\:transform-origin(0)") {
      @include assert {
        @include output {
          @include xl\:transform-origin(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            transform-origin: 0;
          }
        }
      }
    }

    @include it("xl\:accent-color(0)") {
      @include assert {
        @include output {
          @include xl\:accent-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            accent-color: 0;
          }
        }
      }
    }

    @include it("xl\:caret-color(0)") {
      @include assert {
        @include output {
          @include xl\:caret-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            caret-color: 0;
          }
        }
      }
    }

    @include it("xl\:cursor-(0, 02)") {
      @include assert {
        @include output {
          @include xl\:cursor-(0, 02);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            cursor: 0, 02;
          }
        }
      }
    }

    @include it("xl\:scroll-margin(0)") {
      @include assert {
        @include output {
          @include xl\:scroll-margin(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            scroll-margin: 0;
          }
        }
      }
    }

    @include it("xl\:scroll-margin-inline-start(0)") {
      @include assert {
        @include output {
          @include xl\:scroll-margin-inline-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            scroll-margin-inline-start: 0;
          }
        }
      }
    }

    @include it("xl\:scroll-margin-inline-end(0)") {
      @include assert {
        @include output {
          @include xl\:scroll-margin-inline-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            scroll-margin-inline-end: 0;
          }
        }
      }
    }

    @include it("xl\:scroll-margin-top(0)") {
      @include assert {
        @include output {
          @include xl\:scroll-margin-top(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            scroll-margin-top: 0;
          }
        }
      }
    }

    @include it("xl\:scroll-margin-right(0)") {
      @include assert {
        @include output {
          @include xl\:scroll-margin-right(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            scroll-margin-right: 0;
          }
        }
      }
    }

    @include it("xl\:scroll-margin-bottom(0)") {
      @include assert {
        @include output {
          @include xl\:scroll-margin-bottom(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            scroll-margin-bottom: 0;
          }
        }
      }
    }

    @include it("xl\:scroll-margin-left(0)") {
      @include assert {
        @include output {
          @include xl\:scroll-margin-left(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            scroll-margin-left: 0;
          }
        }
      }
    }

    @include it("xl\:scroll-padding(0)") {
      @include assert {
        @include output {
          @include xl\:scroll-padding(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            scroll-padding: 0;
          }
        }
      }
    }

    @include it("xl\:scroll-padding-inline-start(0)") {
      @include assert {
        @include output {
          @include xl\:scroll-padding-inline-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            scroll-padding-inline-start: 0;
          }
        }
      }
    }

    @include it("xl\:scroll-padding-inline-end(0)") {
      @include assert {
        @include output {
          @include xl\:scroll-padding-inline-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            scroll-padding-inline-end: 0;
          }
        }
      }
    }

    @include it("xl\:scroll-padding-top(0)") {
      @include assert {
        @include output {
          @include xl\:scroll-padding-top(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            scroll-padding-top: 0;
          }
        }
      }
    }

    @include it("xl\:scroll-padding-right(0)") {
      @include assert {
        @include output {
          @include xl\:scroll-padding-right(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            scroll-padding-right: 0;
          }
        }
      }
    }

    @include it("xl\:scroll-padding-bottom(0)") {
      @include assert {
        @include output {
          @include xl\:scroll-padding-bottom(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            scroll-padding-bottom: 0;
          }
        }
      }
    }

    @include it("xl\:scroll-padding-left(0)") {
      @include assert {
        @include output {
          @include xl\:scroll-padding-left(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            scroll-padding-left: 0;
          }
        }
      }
    }

    @include it("xl\:will-change-(0, 02)") {
      @include assert {
        @include output {
          @include xl\:will-change-(0, 02);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            will-change: 0, 02;
          }
        }
      }
    }

    @include it("xl\:fill(0)") {
      @include assert {
        @include output {
          @include xl\:fill(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            fill: 0;
          }
        }
      }
    }

    @include it("xl\:stroke(0)") {
      @include assert {
        @include output {
          @include xl\:stroke(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            stroke: 0;
          }
        }
      }
    }

    @include it("xl\:stroke-width(0)") {
      @include assert {
        @include output {
          @include xl\:stroke-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            stroke-width: 0;
          }
        }
      }
    }

    @include it("xl\:flex(0)") {
      @include assert {
        @include output {
          @include xl\:flex(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            flex: 0;
          }
        }
      }
    }

    @include it("xl\:flex-basis(0)") {
      @include assert {
        @include output {
          @include xl\:flex-basis(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            flex-basis: 0;
          }
        }
      }
    }

    @include it("xl\:flex-grow(0)") {
      @include assert {
        @include output {
          @include xl\:flex-grow(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            flex-grow: 0;
          }
        }
      }
    }

    @include it("xl\:flex-shrink(0)") {
      @include assert {
        @include output {
          @include xl\:flex-shrink(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            flex-shrink: 0;
          }
        }
      }
    }

    @include it("xl\:gap(0)") {
      @include assert {
        @include output {
          @include xl\:gap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            gap: 0;
          }
        }
      }
    }

    @include it("xl\:column-gap(0)") {
      @include assert {
        @include output {
          @include xl\:column-gap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            column-gap: 0;
          }
        }
      }
    }

    @include it("xl\:row-gap(0)") {
      @include assert {
        @include output {
          @include xl\:row-gap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            row-gap: 0;
          }
        }
      }
    }

    @include it("xl\:grid-auto-columns(0)") {
      @include assert {
        @include output {
          @include xl\:grid-auto-columns(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            grid-auto-columns: 0;
          }
        }
      }
    }

    @include it("xl\:grid-auto-rows(0)") {
      @include assert {
        @include output {
          @include xl\:grid-auto-rows(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            grid-auto-rows: 0;
          }
        }
      }
    }

    @include it("xl\:grid-column(0)") {
      @include assert {
        @include output {
          @include xl\:grid-column(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            grid-column: 0;
          }
        }
      }
    }

    @include it("xl\:grid-column-start(0)") {
      @include assert {
        @include output {
          @include xl\:grid-column-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            grid-column-start: 0;
          }
        }
      }
    }

    @include it("xl\:grid-column-end(0)") {
      @include assert {
        @include output {
          @include xl\:grid-column-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            grid-column-end: 0;
          }
        }
      }
    }

    @include it("xl\:grid-row(0)") {
      @include assert {
        @include output {
          @include xl\:grid-row(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            grid-row: 0;
          }
        }
      }
    }

    @include it("xl\:grid-row-start(0)") {
      @include assert {
        @include output {
          @include xl\:grid-row-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            grid-row-start: 0;
          }
        }
      }
    }

    @include it("xl\:grid-row-end(0)") {
      @include assert {
        @include output {
          @include xl\:grid-row-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            grid-row-end: 0;
          }
        }
      }
    }

    @include it("xl\:grid-template-columns(0)") {
      @include assert {
        @include output {
          @include xl\:grid-template-columns(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            grid-template-columns: 0;
          }
        }
      }
    }

    @include it("xl\:grid-template-rows(0)") {
      @include assert {
        @include output {
          @include xl\:grid-template-rows(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            grid-template-rows: 0;
          }
        }
      }
    }

    @include it("xl\:order(0)") {
      @include assert {
        @include output {
          @include xl\:order(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            order: 0;
          }
        }
      }
    }

    @include it("xl\:margin(0)") {
      @include assert {
        @include output {
          @include xl\:margin(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            margin: 0;
          }
        }
      }
    }

    @include it("xl\:margin-inline-start(0)") {
      @include assert {
        @include output {
          @include xl\:margin-inline-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            margin-inline-start: 0;
          }
        }
      }
    }

    @include it("xl\:margin-inline-end(0)") {
      @include assert {
        @include output {
          @include xl\:margin-inline-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            margin-inline-end: 0;
          }
        }
      }
    }

    @include it("xl\:margin-top(0)") {
      @include assert {
        @include output {
          @include xl\:margin-top(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            margin-top: 0;
          }
        }
      }
    }

    @include it("xl\:margin-right(0)") {
      @include assert {
        @include output {
          @include xl\:margin-right(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            margin-right: 0;
          }
        }
      }
    }

    @include it("xl\:margin-bottom(0)") {
      @include assert {
        @include output {
          @include xl\:margin-bottom(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            margin-bottom: 0;
          }
        }
      }
    }

    @include it("xl\:margin-left(0)") {
      @include assert {
        @include output {
          @include xl\:margin-left(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            margin-left: 0;
          }
        }
      }
    }

    @include it("xl\:padding(0)") {
      @include assert {
        @include output {
          @include xl\:padding(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            padding: 0;
          }
        }
      }
    }

    @include it("xl\:padding-inline-start(0)") {
      @include assert {
        @include output {
          @include xl\:padding-inline-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            padding-inline-start: 0;
          }
        }
      }
    }

    @include it("xl\:padding-inline-end(0)") {
      @include assert {
        @include output {
          @include xl\:padding-inline-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            padding-inline-end: 0;
          }
        }
      }
    }

    @include it("xl\:padding-top(0)") {
      @include assert {
        @include output {
          @include xl\:padding-top(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            padding-top: 0;
          }
        }
      }
    }

    @include it("xl\:padding-right(0)") {
      @include assert {
        @include output {
          @include xl\:padding-right(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            padding-right: 0;
          }
        }
      }
    }

    @include it("xl\:padding-bottom(0)") {
      @include assert {
        @include output {
          @include xl\:padding-bottom(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            padding-bottom: 0;
          }
        }
      }
    }

    @include it("xl\:padding-left(0)") {
      @include assert {
        @include output {
          @include xl\:padding-left(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            padding-left: 0;
          }
        }
      }
    }

    @include it("xl\:height(0)") {
      @include assert {
        @include output {
          @include xl\:height(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            height: 0;
          }
        }
      }
    }

    @include it("xl\:max-height(0)") {
      @include assert {
        @include output {
          @include xl\:max-height(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            max-height: 0;
          }
        }
      }
    }

    @include it("xl\:max-width(0)") {
      @include assert {
        @include output {
          @include xl\:max-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            max-width: 0;
          }
        }
      }
    }

    @include it("xl\:min-height(0)") {
      @include assert {
        @include output {
          @include xl\:min-height(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            min-height: 0;
          }
        }
      }
    }

    @include it("xl\:min-width(0)") {
      @include assert {
        @include output {
          @include xl\:min-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            min-width: 0;
          }
        }
      }
    }

    @include it("xl\:width(0)") {
      @include assert {
        @include output {
          @include xl\:width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            width: 0;
          }
        }
      }
    }

    @include it("xl\:font-family(0)") {
      @include assert {
        @include output {
          @include xl\:font-family(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            font-family: 0;
          }
        }
      }
    }

    @include it("xl\:font-weight(0)") {
      @include assert {
        @include output {
          @include xl\:font-weight(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            font-weight: 0;
          }
        }
      }
    }

    @include it("xl\:letter-spacing(0)") {
      @include assert {
        @include output {
          @include xl\:letter-spacing(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            letter-spacing: 0;
          }
        }
      }
    }

    @include it("xl\:overflow(0)") {
      @include assert {
        @include output {
          @include xl\:overflow(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            overflow: 0;
          }
        }
      }
    }

    @include it("xl\:display(0)") {
      @include assert {
        @include output {
          @include xl\:display(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            display: 0;
          }
        }
      }
    }

    @include it("xl\:-webkit-box-orient(0)") {
      @include assert {
        @include output {
          @include xl\:-webkit-box-orient(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            -webkit-box-orient: 0;
          }
        }
      }
    }

    @include it("xl\:-webkit-line-clamp(0)") {
      @include assert {
        @include output {
          @include xl\:-webkit-line-clamp(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            -webkit-line-clamp: 0;
          }
        }
      }
    }

    @include it("xl\:line-height(0)") {
      @include assert {
        @include output {
          @include xl\:line-height(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            line-height: 0;
          }
        }
      }
    }

    @include it("xl\:list-style-image(0)") {
      @include assert {
        @include output {
          @include xl\:list-style-image(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            list-style-image: 0;
          }
        }
      }
    }

    @include it("xl\:list-style-type(0)") {
      @include assert {
        @include output {
          @include xl\:list-style-type(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            list-style-type: 0;
          }
        }
      }
    }

    @include it("xl\:font-size(0)") {
      @include assert {
        @include output {
          @include xl\:font-size(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            font-size: 0;
          }
        }
      }
    }

    @include it("xl\:text-decoration-color(0)") {
      @include assert {
        @include output {
          @include xl\:text-decoration-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            text-decoration-color: 0;
          }
        }
      }
    }

    @include it("xl\:text-decoration-thickness(0)") {
      @include assert {
        @include output {
          @include xl\:text-decoration-thickness(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            text-decoration-thickness: 0;
          }
        }
      }
    }

    @include it("xl\:text-indent(0)") {
      @include assert {
        @include output {
          @include xl\:text-indent(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            text-indent: 0;
          }
        }
      }
    }

    @include it("xl\:text-underline-offset(0)") {
      @include assert {
        @include output {
          @include xl\:text-underline-offset(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            text-underline-offset: 0;
          }
        }
      }
    }

    @include it("xl\:vertical-align(0)") {
      @include assert {
        @include output {
          @include xl\:vertical-align(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            vertical-align: 0;
          }
        }
      }
    }

    @include it("xl\:background-color(0)") {
      @include assert {
        @include output {
          @include xl\:background-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            background-color: 0;
          }
        }
      }
    }

    @include it("xl\:background-size(0)") {
      @include assert {
        @include output {
          @include xl\:background-size(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            background-size: 0;
          }
        }
      }
    }

    @include it("xl\:background-position(0)") {
      @include assert {
        @include output {
          @include xl\:background-position(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            background-position: 0;
          }
        }
      }
    }

    @include it("xl\:background-image(0)") {
      @include assert {
        @include output {
          @include xl\:background-image(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            background-image: 0;
          }
        }
      }
    }

    @include it("xl\:border-color(0)") {
      @include assert {
        @include output {
          @include xl\:border-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            border-color: 0;
          }
        }
      }
    }

    @include it("xl\:border-width(0)") {
      @include assert {
        @include output {
          @include xl\:border-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            border-width: 0;
          }
        }
      }
    }

    @include it("xl\:border-left-color(0)") {
      @include assert {
        @include output {
          @include xl\:border-left-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            border-left-color: 0;
          }
        }
      }
    }

    @include it("xl\:border-left-width(0)") {
      @include assert {
        @include output {
          @include xl\:border-left-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            border-left-width: 0;
          }
        }
      }
    }

    @include it("xl\:border-right-color(0)") {
      @include assert {
        @include output {
          @include xl\:border-right-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            border-right-color: 0;
          }
        }
      }
    }

    @include it("xl\:border-right-width(0)") {
      @include assert {
        @include output {
          @include xl\:border-right-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            border-right-width: 0;
          }
        }
      }
    }

    @include it("xl\:border-top-color(0)") {
      @include assert {
        @include output {
          @include xl\:border-top-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            border-top-color: 0;
          }
        }
      }
    }

    @include it("xl\:border-top-width(0)") {
      @include assert {
        @include output {
          @include xl\:border-top-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            border-top-width: 0;
          }
        }
      }
    }

    @include it("xl\:border-bottom-color(0)") {
      @include assert {
        @include output {
          @include xl\:border-bottom-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            border-bottom-color: 0;
          }
        }
      }
    }

    @include it("xl\:border-bottom-width(0)") {
      @include assert {
        @include output {
          @include xl\:border-bottom-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            border-bottom-width: 0;
          }
        }
      }
    }

    @include it("xl\:border-inline-start-color(0)") {
      @include assert {
        @include output {
          @include xl\:border-inline-start-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            border-inline-start-color: 0;
          }
        }
      }
    }

    @include it("xl\:border-inline-start-width(0)") {
      @include assert {
        @include output {
          @include xl\:border-inline-start-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            border-inline-start-width: 0;
          }
        }
      }
    }

    @include it("xl\:border-inline-end-color(0)") {
      @include assert {
        @include output {
          @include xl\:border-inline-end-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            border-inline-end-color: 0;
          }
        }
      }
    }

    @include it("xl\:border-inline-end-width(0)") {
      @include assert {
        @include output {
          @include xl\:border-inline-end-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            border-inline-end-width: 0;
          }
        }
      }
    }

    @include it("xl\:border-radius(0)") {
      @include assert {
        @include output {
          @include xl\:border-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            border-radius: 0;
          }
        }
      }
    }

    @include it("xl\:border-start-start-radius(0)") {
      @include assert {
        @include output {
          @include xl\:border-start-start-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            border-start-start-radius: 0;
          }
        }
      }
    }

    @include it("xl\:border-end-start-radius(0)") {
      @include assert {
        @include output {
          @include xl\:border-end-start-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            border-end-start-radius: 0;
          }
        }
      }
    }

    @include it("xl\:border-start-end-radius(0)") {
      @include assert {
        @include output {
          @include xl\:border-start-end-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            border-start-end-radius: 0;
          }
        }
      }
    }

    @include it("xl\:border-end-end-radius(0)") {
      @include assert {
        @include output {
          @include xl\:border-end-end-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            border-end-end-radius: 0;
          }
        }
      }
    }

    @include it("xl\:border-top-left-radius(0)") {
      @include assert {
        @include output {
          @include xl\:border-top-left-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            border-top-left-radius: 0;
          }
        }
      }
    }

    @include it("xl\:border-top-right-radius(0)") {
      @include assert {
        @include output {
          @include xl\:border-top-right-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            border-top-right-radius: 0;
          }
        }
      }
    }

    @include it("xl\:border-bottom-right-radius(0)") {
      @include assert {
        @include output {
          @include xl\:border-bottom-right-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            border-bottom-right-radius: 0;
          }
        }
      }
    }

    @include it("xl\:border-bottom-left-radius(0)") {
      @include assert {
        @include output {
          @include xl\:border-bottom-left-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            border-bottom-left-radius: 0;
          }
        }
      }
    }

    @include it("xl\:outline-color(0)") {
      @include assert {
        @include output {
          @include xl\:outline-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            outline-color: 0;
          }
        }
      }
    }

    @include it("xl\:outline-width(0)") {
      @include assert {
        @include output {
          @include xl\:outline-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            outline-width: 0;
          }
        }
      }
    }

    @include it("xl\:outline-offset(0)") {
      @include assert {
        @include output {
          @include xl\:outline-offset(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            outline-offset: 0;
          }
        }
      }
    }

    @include it("xl\:box-shadow(0)") {
      @include assert {
        @include output {
          @include xl\:box-shadow(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            box-shadow: 0;
          }
        }
      }
    }

    @include it("xl\:opacity(0)") {
      @include assert {
        @include output {
          @include xl\:opacity(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            opacity: 0;
          }
        }
      }
    }

    @include it("xl\:backdrop-filter(0)") {
      @include assert {
        @include output {
          @include xl\:backdrop-filter(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            backdrop-filter: 0;
          }
        }
      }
    }

    @include it("xl\:filter(0)") {
      @include assert {
        @include output {
          @include xl\:filter(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            filter: 0;
          }
        }
      }
    }

    @include it("xl\:box-decoration-break(0)") {
      @include assert {
        @include output {
          @include xl\:box-decoration-break(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            box-decoration-break: 0;
          }
        }
      }
    }

    @include it("xl\:box-sizing(0)") {
      @include assert {
        @include output {
          @include xl\:box-sizing(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            box-sizing: 0;
          }
        }
      }
    }

    @include it("xl\:break-after(0)") {
      @include assert {
        @include output {
          @include xl\:break-after(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            break-after: 0;
          }
        }
      }
    }

    @include it("xl\:break-before(0)") {
      @include assert {
        @include output {
          @include xl\:break-before(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            break-before: 0;
          }
        }
      }
    }

    @include it("xl\:break-inside(0)") {
      @include assert {
        @include output {
          @include xl\:break-inside(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            break-inside: 0;
          }
        }
      }
    }

    @include it("xl\:clear(0)") {
      @include assert {
        @include output {
          @include xl\:clear(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            clear: 0;
          }
        }
      }
    }

    @include it("xl\:float(0)") {
      @include assert {
        @include output {
          @include xl\:float(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            float: 0;
          }
        }
      }
    }

    @include it("xl\:isolation(0)") {
      @include assert {
        @include output {
          @include xl\:isolation(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            isolation: 0;
          }
        }
      }
    }

    @include it("xl\:object-fit(0)") {
      @include assert {
        @include output {
          @include xl\:object-fit(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            object-fit: 0;
          }
        }
      }
    }

    @include it("xl\:overscroll-behavior(0)") {
      @include assert {
        @include output {
          @include xl\:overscroll-behavior(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            overscroll-behavior: 0;
          }
        }
      }
    }

    @include it("xl\:overscroll-behavior-y(0)") {
      @include assert {
        @include output {
          @include xl\:overscroll-behavior-y(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            overscroll-behavior-y: 0;
          }
        }
      }
    }

    @include it("xl\:overscroll-behavior-x(0)") {
      @include assert {
        @include output {
          @include xl\:overscroll-behavior-x(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            overscroll-behavior-x: 0;
          }
        }
      }
    }

    @include it("xl\:position(0)") {
      @include assert {
        @include output {
          @include xl\:position(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            position: 0;
          }
        }
      }
    }

    @include it("xl\:visibility(0)") {
      @include assert {
        @include output {
          @include xl\:visibility(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            visibility: 0;
          }
        }
      }
    }

    @include it("xl\:align-content(0)") {
      @include assert {
        @include output {
          @include xl\:align-content(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            align-content: 0;
          }
        }
      }
    }

    @include it("xl\:align-items(0)") {
      @include assert {
        @include output {
          @include xl\:align-items(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            align-items: 0;
          }
        }
      }
    }

    @include it("xl\:align-self(0)") {
      @include assert {
        @include output {
          @include xl\:align-self(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            align-self: 0;
          }
        }
      }
    }

    @include it("xl\:flex-direction(0)") {
      @include assert {
        @include output {
          @include xl\:flex-direction(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            flex-direction: 0;
          }
        }
      }
    }

    @include it("xl\:flex-wrap(0)") {
      @include assert {
        @include output {
          @include xl\:flex-wrap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            flex-wrap: 0;
          }
        }
      }
    }

    @include it("xl\:grid-auto-flow(0)") {
      @include assert {
        @include output {
          @include xl\:grid-auto-flow(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            grid-auto-flow: 0;
          }
        }
      }
    }

    @include it("xl\:justify-content(0)") {
      @include assert {
        @include output {
          @include xl\:justify-content(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            justify-content: 0;
          }
        }
      }
    }

    @include it("xl\:justify-items(0)") {
      @include assert {
        @include output {
          @include xl\:justify-items(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            justify-items: 0;
          }
        }
      }
    }

    @include it("xl\:justify-self(0)") {
      @include assert {
        @include output {
          @include xl\:justify-self(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            justify-self: 0;
          }
        }
      }
    }

    @include it("xl\:place-content(0)") {
      @include assert {
        @include output {
          @include xl\:place-content(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            place-content: 0;
          }
        }
      }
    }

    @include it("xl\:place-items(0)") {
      @include assert {
        @include output {
          @include xl\:place-items(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            place-items: 0;
          }
        }
      }
    }

    @include it("xl\:place-self(0)") {
      @include assert {
        @include output {
          @include xl\:place-self(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            place-self: 0;
          }
        }
      }
    }

    @include it("xl\:-webkit-font-smoothing(0)") {
      @include assert {
        @include output {
          @include xl\:-webkit-font-smoothing(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            -webkit-font-smoothing: 0;
          }
        }
      }
    }

    @include it("xl\:-moz-osx-font-smoothing(0)") {
      @include assert {
        @include output {
          @include xl\:-moz-osx-font-smoothing(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            -moz-osx-font-smoothing: 0;
          }
        }
      }
    }

    @include it("xl\:font-style(0)") {
      @include assert {
        @include output {
          @include xl\:font-style(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            font-style: 0;
          }
        }
      }
    }

    @include it("xl\:font-variant-numeric(0)") {
      @include assert {
        @include output {
          @include xl\:font-variant-numeric(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            font-variant-numeric: 0;
          }
        }
      }
    }

    @include it("xl\:hyphens(0)") {
      @include assert {
        @include output {
          @include xl\:hyphens(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            hyphens: 0;
          }
        }
      }
    }

    @include it("xl\:list-style-position(0)") {
      @include assert {
        @include output {
          @include xl\:list-style-position(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            list-style-position: 0;
          }
        }
      }
    }

    @include it("xl\:text-align(0)") {
      @include assert {
        @include output {
          @include xl\:text-align(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            text-align: 0;
          }
        }
      }
    }

    @include it("xl\:text-decoration-line(0)") {
      @include assert {
        @include output {
          @include xl\:text-decoration-line(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            text-decoration-line: 0;
          }
        }
      }
    }

    @include it("xl\:text-decoration-style(0)") {
      @include assert {
        @include output {
          @include xl\:text-decoration-style(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            text-decoration-style: 0;
          }
        }
      }
    }

    @include it("xl\:text-overflow(0)") {
      @include assert {
        @include output {
          @include xl\:text-overflow(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            text-overflow: 0;
          }
        }
      }
    }

    @include it("xl\:white-space(0)") {
      @include assert {
        @include output {
          @include xl\:white-space(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            white-space: 0;
          }
        }
      }
    }

    @include it("xl\:text-transform(0)") {
      @include assert {
        @include output {
          @include xl\:text-transform(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            text-transform: 0;
          }
        }
      }
    }

    @include it("xl\:text-wrap(0)") {
      @include assert {
        @include output {
          @include xl\:text-wrap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            text-wrap: 0;
          }
        }
      }
    }

    @include it("xl\:overflow-wrap(0)") {
      @include assert {
        @include output {
          @include xl\:overflow-wrap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            overflow-wrap: 0;
          }
        }
      }
    }

    @include it("xl\:word-break(0)") {
      @include assert {
        @include output {
          @include xl\:word-break(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            word-break: 0;
          }
        }
      }
    }

    @include it("xl\:background-attachment(0)") {
      @include assert {
        @include output {
          @include xl\:background-attachment(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            background-attachment: 0;
          }
        }
      }
    }

    @include it("xl\:background-clip(0)") {
      @include assert {
        @include output {
          @include xl\:background-clip(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            background-clip: 0;
          }
        }
      }
    }

    @include it("xl\:background-origin(0)") {
      @include assert {
        @include output {
          @include xl\:background-origin(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            background-origin: 0;
          }
        }
      }
    }

    @include it("xl\:background-repeat(0)") {
      @include assert {
        @include output {
          @include xl\:background-repeat(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            background-repeat: 0;
          }
        }
      }
    }

    @include it("xl\:border-style(0)") {
      @include assert {
        @include output {
          @include xl\:border-style(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            border-style: 0;
          }
        }
      }
    }

    @include it("xl\:outline(0)") {
      @include assert {
        @include output {
          @include xl\:outline(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            outline: 0;
          }
        }
      }
    }

    @include it("xl\:outline-style(0)") {
      @include assert {
        @include output {
          @include xl\:outline-style(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            outline-style: 0;
          }
        }
      }
    }

    @include it("xl\:background-blend-mode(0)") {
      @include assert {
        @include output {
          @include xl\:background-blend-mode(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            background-blend-mode: 0;
          }
        }
      }
    }

    @include it("xl\:mix-blend-mode(0)") {
      @include assert {
        @include output {
          @include xl\:mix-blend-mode(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            mix-blend-mode: 0;
          }
        }
      }
    }

    @include it("xl\:border-collapse(0)") {
      @include assert {
        @include output {
          @include xl\:border-collapse(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            border-collapse: 0;
          }
        }
      }
    }

    @include it("xl\:caption-side(0)") {
      @include assert {
        @include output {
          @include xl\:caption-side(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            caption-side: 0;
          }
        }
      }
    }

    @include it("xl\:table-layout(0)") {
      @include assert {
        @include output {
          @include xl\:table-layout(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            table-layout: 0;
          }
        }
      }
    }

    @include it("xl\:appearance(0)") {
      @include assert {
        @include output {
          @include xl\:appearance(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            appearance: 0;
          }
        }
      }
    }

    @include it("xl\:pointer-events(0)") {
      @include assert {
        @include output {
          @include xl\:pointer-events(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            pointer-events: 0;
          }
        }
      }
    }

    @include it("xl\:resize(0)") {
      @include assert {
        @include output {
          @include xl\:resize(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            resize: 0;
          }
        }
      }
    }

    @include it("xl\:scroll-behavior(0)") {
      @include assert {
        @include output {
          @include xl\:scroll-behavior(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            scroll-behavior: 0;
          }
        }
      }
    }

    @include it("xl\:scroll-snap-align(0)") {
      @include assert {
        @include output {
          @include xl\:scroll-snap-align(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            scroll-snap-align: 0;
          }
        }
      }
    }

    @include it("xl\:scroll-snap-stop(0)") {
      @include assert {
        @include output {
          @include xl\:scroll-snap-stop(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            scroll-snap-stop: 0;
          }
        }
      }
    }

    @include it("xl\:scroll-snap-type(0)") {
      @include assert {
        @include output {
          @include xl\:scroll-snap-type(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            scroll-snap-type: 0;
          }
        }
      }
    }

    @include it("xl\:touch-action(0)") {
      @include assert {
        @include output {
          @include xl\:touch-action(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            touch-action: 0;
          }
        }
      }
    }

    @include it("xl\:user-select(0)") {
      @include assert {
        @include output {
          @include xl\:user-select(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            user-select: 0;
          }
        }
      }
    }

    @include it("xl\:forced-color-adjust(0)") {
      @include assert {
        @include output {
          @include xl\:forced-color-adjust(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $xl) {
            forced-color-adjust: 0;
          }
        }
      }
    }

    @include it("2xl\:aspect-ratio(0)") {
      @include assert {
        @include output {
          @include \2xl\:aspect-ratio(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            aspect-ratio: 0;
          }
        }
      }
    }

    @include it("2xl\:columns(0)") {
      @include assert {
        @include output {
          @include \2xl\:columns(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            columns: 0;
          }
        }
      }
    }

    @include it("2xl\:object-position(0)") {
      @include assert {
        @include output {
          @include \2xl\:object-position(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            object-position: 0;
          }
        }
      }
    }

    @include it("2xl\:inset(0)") {
      @include assert {
        @include output {
          @include \2xl\:inset(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            inset: 0;
          }
        }
      }
    }

    @include it("2xl\:inset-inline-start(0)") {
      @include assert {
        @include output {
          @include \2xl\:inset-inline-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            inset-inline-start: 0;
          }
        }
      }
    }

    @include it("2xl\:inset-inline-end(0)") {
      @include assert {
        @include output {
          @include \2xl\:inset-inline-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            inset-inline-end: 0;
          }
        }
      }
    }

    @include it("2xl\:top(0)") {
      @include assert {
        @include output {
          @include \2xl\:top(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            top: 0;
          }
        }
      }
    }

    @include it("2xl\:right(0)") {
      @include assert {
        @include output {
          @include \2xl\:right(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            right: 0;
          }
        }
      }
    }

    @include it("2xl\:bottom(0)") {
      @include assert {
        @include output {
          @include \2xl\:bottom(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            bottom: 0;
          }
        }
      }
    }

    @include it("2xl\:left(0)") {
      @include assert {
        @include output {
          @include \2xl\:left(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            left: 0;
          }
        }
      }
    }

    @include it("2xl\:z-index(0)") {
      @include assert {
        @include output {
          @include \2xl\:z-index(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            z-index: 0;
          }
        }
      }
    }

    @include it("2xl\:border-spacing(0)") {
      @include assert {
        @include output {
          @include \2xl\:border-spacing(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            border-spacing: 0;
          }
        }
      }
    }

    @include it("2xl\:animation(0)") {
      @include assert {
        @include output {
          @include \2xl\:animation(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            animation: 0;
          }
        }
      }
    }

    @include it("2xl\:transition-delay(0)") {
      @include assert {
        @include output {
          @include \2xl\:transition-delay(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            transition-delay: 0;
          }
        }
      }
    }

    @include it("2xl\:transition-property(0)") {
      @include assert {
        @include output {
          @include \2xl\:transition-property(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            transition-property: 0;
          }
        }
      }
    }

    @include it("2xl\:transition-timing-function(0)") {
      @include assert {
        @include output {
          @include \2xl\:transition-timing-function(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            transition-timing-function: 0;
          }
        }
      }
    }

    @include it("2xl\:transition-duration(0)") {
      @include assert {
        @include output {
          @include \2xl\:transition-duration(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            transition-duration: 0;
          }
        }
      }
    }

    @include it("2xl\:transform(0)") {
      @include assert {
        @include output {
          @include \2xl\:transform(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            transform: 0;
          }
        }
      }
    }

    @include it("2xl\:transform-origin(0)") {
      @include assert {
        @include output {
          @include \2xl\:transform-origin(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            transform-origin: 0;
          }
        }
      }
    }

    @include it("2xl\:accent-color(0)") {
      @include assert {
        @include output {
          @include \2xl\:accent-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            accent-color: 0;
          }
        }
      }
    }

    @include it("2xl\:caret-color(0)") {
      @include assert {
        @include output {
          @include \2xl\:caret-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            caret-color: 0;
          }
        }
      }
    }

    @include it("2xl\:cursor-(0, 02)") {
      @include assert {
        @include output {
          @include \2xl\:cursor-(0, 02);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            cursor: 0, 02;
          }
        }
      }
    }

    @include it("2xl\:scroll-margin(0)") {
      @include assert {
        @include output {
          @include \2xl\:scroll-margin(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            scroll-margin: 0;
          }
        }
      }
    }

    @include it("2xl\:scroll-margin-inline-start(0)") {
      @include assert {
        @include output {
          @include \2xl\:scroll-margin-inline-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            scroll-margin-inline-start: 0;
          }
        }
      }
    }

    @include it("2xl\:scroll-margin-inline-end(0)") {
      @include assert {
        @include output {
          @include \2xl\:scroll-margin-inline-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            scroll-margin-inline-end: 0;
          }
        }
      }
    }

    @include it("2xl\:scroll-margin-top(0)") {
      @include assert {
        @include output {
          @include \2xl\:scroll-margin-top(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            scroll-margin-top: 0;
          }
        }
      }
    }

    @include it("2xl\:scroll-margin-right(0)") {
      @include assert {
        @include output {
          @include \2xl\:scroll-margin-right(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            scroll-margin-right: 0;
          }
        }
      }
    }

    @include it("2xl\:scroll-margin-bottom(0)") {
      @include assert {
        @include output {
          @include \2xl\:scroll-margin-bottom(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            scroll-margin-bottom: 0;
          }
        }
      }
    }

    @include it("2xl\:scroll-margin-left(0)") {
      @include assert {
        @include output {
          @include \2xl\:scroll-margin-left(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            scroll-margin-left: 0;
          }
        }
      }
    }

    @include it("2xl\:scroll-padding(0)") {
      @include assert {
        @include output {
          @include \2xl\:scroll-padding(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            scroll-padding: 0;
          }
        }
      }
    }

    @include it("2xl\:scroll-padding-inline-start(0)") {
      @include assert {
        @include output {
          @include \2xl\:scroll-padding-inline-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            scroll-padding-inline-start: 0;
          }
        }
      }
    }

    @include it("2xl\:scroll-padding-inline-end(0)") {
      @include assert {
        @include output {
          @include \2xl\:scroll-padding-inline-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            scroll-padding-inline-end: 0;
          }
        }
      }
    }

    @include it("2xl\:scroll-padding-top(0)") {
      @include assert {
        @include output {
          @include \2xl\:scroll-padding-top(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            scroll-padding-top: 0;
          }
        }
      }
    }

    @include it("2xl\:scroll-padding-right(0)") {
      @include assert {
        @include output {
          @include \2xl\:scroll-padding-right(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            scroll-padding-right: 0;
          }
        }
      }
    }

    @include it("2xl\:scroll-padding-bottom(0)") {
      @include assert {
        @include output {
          @include \2xl\:scroll-padding-bottom(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            scroll-padding-bottom: 0;
          }
        }
      }
    }

    @include it("2xl\:scroll-padding-left(0)") {
      @include assert {
        @include output {
          @include \2xl\:scroll-padding-left(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            scroll-padding-left: 0;
          }
        }
      }
    }

    @include it("2xl\:will-change-(0, 02)") {
      @include assert {
        @include output {
          @include \2xl\:will-change-(0, 02);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            will-change: 0, 02;
          }
        }
      }
    }

    @include it("2xl\:fill(0)") {
      @include assert {
        @include output {
          @include \2xl\:fill(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            fill: 0;
          }
        }
      }
    }

    @include it("2xl\:stroke(0)") {
      @include assert {
        @include output {
          @include \2xl\:stroke(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            stroke: 0;
          }
        }
      }
    }

    @include it("2xl\:stroke-width(0)") {
      @include assert {
        @include output {
          @include \2xl\:stroke-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            stroke-width: 0;
          }
        }
      }
    }

    @include it("2xl\:flex(0)") {
      @include assert {
        @include output {
          @include \2xl\:flex(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            flex: 0;
          }
        }
      }
    }

    @include it("2xl\:flex-basis(0)") {
      @include assert {
        @include output {
          @include \2xl\:flex-basis(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            flex-basis: 0;
          }
        }
      }
    }

    @include it("2xl\:flex-grow(0)") {
      @include assert {
        @include output {
          @include \2xl\:flex-grow(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            flex-grow: 0;
          }
        }
      }
    }

    @include it("2xl\:flex-shrink(0)") {
      @include assert {
        @include output {
          @include \2xl\:flex-shrink(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            flex-shrink: 0;
          }
        }
      }
    }

    @include it("2xl\:gap(0)") {
      @include assert {
        @include output {
          @include \2xl\:gap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            gap: 0;
          }
        }
      }
    }

    @include it("2xl\:column-gap(0)") {
      @include assert {
        @include output {
          @include \2xl\:column-gap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            column-gap: 0;
          }
        }
      }
    }

    @include it("2xl\:row-gap(0)") {
      @include assert {
        @include output {
          @include \2xl\:row-gap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            row-gap: 0;
          }
        }
      }
    }

    @include it("2xl\:grid-auto-columns(0)") {
      @include assert {
        @include output {
          @include \2xl\:grid-auto-columns(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            grid-auto-columns: 0;
          }
        }
      }
    }

    @include it("2xl\:grid-auto-rows(0)") {
      @include assert {
        @include output {
          @include \2xl\:grid-auto-rows(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            grid-auto-rows: 0;
          }
        }
      }
    }

    @include it("2xl\:grid-column(0)") {
      @include assert {
        @include output {
          @include \2xl\:grid-column(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            grid-column: 0;
          }
        }
      }
    }

    @include it("2xl\:grid-column-start(0)") {
      @include assert {
        @include output {
          @include \2xl\:grid-column-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            grid-column-start: 0;
          }
        }
      }
    }

    @include it("2xl\:grid-column-end(0)") {
      @include assert {
        @include output {
          @include \2xl\:grid-column-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            grid-column-end: 0;
          }
        }
      }
    }

    @include it("2xl\:grid-row(0)") {
      @include assert {
        @include output {
          @include \2xl\:grid-row(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            grid-row: 0;
          }
        }
      }
    }

    @include it("2xl\:grid-row-start(0)") {
      @include assert {
        @include output {
          @include \2xl\:grid-row-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            grid-row-start: 0;
          }
        }
      }
    }

    @include it("2xl\:grid-row-end(0)") {
      @include assert {
        @include output {
          @include \2xl\:grid-row-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            grid-row-end: 0;
          }
        }
      }
    }

    @include it("2xl\:grid-template-columns(0)") {
      @include assert {
        @include output {
          @include \2xl\:grid-template-columns(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            grid-template-columns: 0;
          }
        }
      }
    }

    @include it("2xl\:grid-template-rows(0)") {
      @include assert {
        @include output {
          @include \2xl\:grid-template-rows(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            grid-template-rows: 0;
          }
        }
      }
    }

    @include it("2xl\:order(0)") {
      @include assert {
        @include output {
          @include \2xl\:order(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            order: 0;
          }
        }
      }
    }

    @include it("2xl\:margin(0)") {
      @include assert {
        @include output {
          @include \2xl\:margin(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            margin: 0;
          }
        }
      }
    }

    @include it("2xl\:margin-inline-start(0)") {
      @include assert {
        @include output {
          @include \2xl\:margin-inline-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            margin-inline-start: 0;
          }
        }
      }
    }

    @include it("2xl\:margin-inline-end(0)") {
      @include assert {
        @include output {
          @include \2xl\:margin-inline-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            margin-inline-end: 0;
          }
        }
      }
    }

    @include it("2xl\:margin-top(0)") {
      @include assert {
        @include output {
          @include \2xl\:margin-top(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            margin-top: 0;
          }
        }
      }
    }

    @include it("2xl\:margin-right(0)") {
      @include assert {
        @include output {
          @include \2xl\:margin-right(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            margin-right: 0;
          }
        }
      }
    }

    @include it("2xl\:margin-bottom(0)") {
      @include assert {
        @include output {
          @include \2xl\:margin-bottom(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            margin-bottom: 0;
          }
        }
      }
    }

    @include it("2xl\:margin-left(0)") {
      @include assert {
        @include output {
          @include \2xl\:margin-left(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            margin-left: 0;
          }
        }
      }
    }

    @include it("2xl\:padding(0)") {
      @include assert {
        @include output {
          @include \2xl\:padding(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            padding: 0;
          }
        }
      }
    }

    @include it("2xl\:padding-inline-start(0)") {
      @include assert {
        @include output {
          @include \2xl\:padding-inline-start(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            padding-inline-start: 0;
          }
        }
      }
    }

    @include it("2xl\:padding-inline-end(0)") {
      @include assert {
        @include output {
          @include \2xl\:padding-inline-end(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            padding-inline-end: 0;
          }
        }
      }
    }

    @include it("2xl\:padding-top(0)") {
      @include assert {
        @include output {
          @include \2xl\:padding-top(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            padding-top: 0;
          }
        }
      }
    }

    @include it("2xl\:padding-right(0)") {
      @include assert {
        @include output {
          @include \2xl\:padding-right(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            padding-right: 0;
          }
        }
      }
    }

    @include it("2xl\:padding-bottom(0)") {
      @include assert {
        @include output {
          @include \2xl\:padding-bottom(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            padding-bottom: 0;
          }
        }
      }
    }

    @include it("2xl\:padding-left(0)") {
      @include assert {
        @include output {
          @include \2xl\:padding-left(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            padding-left: 0;
          }
        }
      }
    }

    @include it("2xl\:height(0)") {
      @include assert {
        @include output {
          @include \2xl\:height(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            height: 0;
          }
        }
      }
    }

    @include it("2xl\:max-height(0)") {
      @include assert {
        @include output {
          @include \2xl\:max-height(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            max-height: 0;
          }
        }
      }
    }

    @include it("2xl\:max-width(0)") {
      @include assert {
        @include output {
          @include \2xl\:max-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            max-width: 0;
          }
        }
      }
    }

    @include it("2xl\:min-height(0)") {
      @include assert {
        @include output {
          @include \2xl\:min-height(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            min-height: 0;
          }
        }
      }
    }

    @include it("2xl\:min-width(0)") {
      @include assert {
        @include output {
          @include \2xl\:min-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            min-width: 0;
          }
        }
      }
    }

    @include it("2xl\:width(0)") {
      @include assert {
        @include output {
          @include \2xl\:width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            width: 0;
          }
        }
      }
    }

    @include it("2xl\:font-family(0)") {
      @include assert {
        @include output {
          @include \2xl\:font-family(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            font-family: 0;
          }
        }
      }
    }

    @include it("2xl\:font-weight(0)") {
      @include assert {
        @include output {
          @include \2xl\:font-weight(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            font-weight: 0;
          }
        }
      }
    }

    @include it("2xl\:letter-spacing(0)") {
      @include assert {
        @include output {
          @include \2xl\:letter-spacing(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            letter-spacing: 0;
          }
        }
      }
    }

    @include it("2xl\:overflow(0)") {
      @include assert {
        @include output {
          @include \2xl\:overflow(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            overflow: 0;
          }
        }
      }
    }

    @include it("2xl\:display(0)") {
      @include assert {
        @include output {
          @include \2xl\:display(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            display: 0;
          }
        }
      }
    }

    @include it("2xl\:-webkit-box-orient(0)") {
      @include assert {
        @include output {
          @include \2xl\:-webkit-box-orient(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            -webkit-box-orient: 0;
          }
        }
      }
    }

    @include it("2xl\:-webkit-line-clamp(0)") {
      @include assert {
        @include output {
          @include \2xl\:-webkit-line-clamp(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            -webkit-line-clamp: 0;
          }
        }
      }
    }

    @include it("2xl\:line-height(0)") {
      @include assert {
        @include output {
          @include \2xl\:line-height(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            line-height: 0;
          }
        }
      }
    }

    @include it("2xl\:list-style-image(0)") {
      @include assert {
        @include output {
          @include \2xl\:list-style-image(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            list-style-image: 0;
          }
        }
      }
    }

    @include it("2xl\:list-style-type(0)") {
      @include assert {
        @include output {
          @include \2xl\:list-style-type(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            list-style-type: 0;
          }
        }
      }
    }

    @include it("2xl\:font-size(0)") {
      @include assert {
        @include output {
          @include \2xl\:font-size(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            font-size: 0;
          }
        }
      }
    }

    @include it("2xl\:text-decoration-color(0)") {
      @include assert {
        @include output {
          @include \2xl\:text-decoration-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            text-decoration-color: 0;
          }
        }
      }
    }

    @include it("2xl\:text-decoration-thickness(0)") {
      @include assert {
        @include output {
          @include \2xl\:text-decoration-thickness(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            text-decoration-thickness: 0;
          }
        }
      }
    }

    @include it("2xl\:text-indent(0)") {
      @include assert {
        @include output {
          @include \2xl\:text-indent(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            text-indent: 0;
          }
        }
      }
    }

    @include it("2xl\:text-underline-offset(0)") {
      @include assert {
        @include output {
          @include \2xl\:text-underline-offset(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            text-underline-offset: 0;
          }
        }
      }
    }

    @include it("2xl\:vertical-align(0)") {
      @include assert {
        @include output {
          @include \2xl\:vertical-align(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            vertical-align: 0;
          }
        }
      }
    }

    @include it("2xl\:background-color(0)") {
      @include assert {
        @include output {
          @include \2xl\:background-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            background-color: 0;
          }
        }
      }
    }

    @include it("2xl\:background-size(0)") {
      @include assert {
        @include output {
          @include \2xl\:background-size(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            background-size: 0;
          }
        }
      }
    }

    @include it("2xl\:background-position(0)") {
      @include assert {
        @include output {
          @include \2xl\:background-position(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            background-position: 0;
          }
        }
      }
    }

    @include it("2xl\:background-image(0)") {
      @include assert {
        @include output {
          @include \2xl\:background-image(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            background-image: 0;
          }
        }
      }
    }

    @include it("2xl\:border-color(0)") {
      @include assert {
        @include output {
          @include \2xl\:border-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            border-color: 0;
          }
        }
      }
    }

    @include it("2xl\:border-width(0)") {
      @include assert {
        @include output {
          @include \2xl\:border-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            border-width: 0;
          }
        }
      }
    }

    @include it("2xl\:border-left-color(0)") {
      @include assert {
        @include output {
          @include \2xl\:border-left-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            border-left-color: 0;
          }
        }
      }
    }

    @include it("2xl\:border-left-width(0)") {
      @include assert {
        @include output {
          @include \2xl\:border-left-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            border-left-width: 0;
          }
        }
      }
    }

    @include it("2xl\:border-right-color(0)") {
      @include assert {
        @include output {
          @include \2xl\:border-right-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            border-right-color: 0;
          }
        }
      }
    }

    @include it("2xl\:border-right-width(0)") {
      @include assert {
        @include output {
          @include \2xl\:border-right-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            border-right-width: 0;
          }
        }
      }
    }

    @include it("2xl\:border-top-color(0)") {
      @include assert {
        @include output {
          @include \2xl\:border-top-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            border-top-color: 0;
          }
        }
      }
    }

    @include it("2xl\:border-top-width(0)") {
      @include assert {
        @include output {
          @include \2xl\:border-top-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            border-top-width: 0;
          }
        }
      }
    }

    @include it("2xl\:border-bottom-color(0)") {
      @include assert {
        @include output {
          @include \2xl\:border-bottom-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            border-bottom-color: 0;
          }
        }
      }
    }

    @include it("2xl\:border-bottom-width(0)") {
      @include assert {
        @include output {
          @include \2xl\:border-bottom-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            border-bottom-width: 0;
          }
        }
      }
    }

    @include it("2xl\:border-inline-start-color(0)") {
      @include assert {
        @include output {
          @include \2xl\:border-inline-start-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            border-inline-start-color: 0;
          }
        }
      }
    }

    @include it("2xl\:border-inline-start-width(0)") {
      @include assert {
        @include output {
          @include \2xl\:border-inline-start-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            border-inline-start-width: 0;
          }
        }
      }
    }

    @include it("2xl\:border-inline-end-color(0)") {
      @include assert {
        @include output {
          @include \2xl\:border-inline-end-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            border-inline-end-color: 0;
          }
        }
      }
    }

    @include it("2xl\:border-inline-end-width(0)") {
      @include assert {
        @include output {
          @include \2xl\:border-inline-end-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            border-inline-end-width: 0;
          }
        }
      }
    }

    @include it("2xl\:border-radius(0)") {
      @include assert {
        @include output {
          @include \2xl\:border-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            border-radius: 0;
          }
        }
      }
    }

    @include it("2xl\:border-start-start-radius(0)") {
      @include assert {
        @include output {
          @include \2xl\:border-start-start-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            border-start-start-radius: 0;
          }
        }
      }
    }

    @include it("2xl\:border-end-start-radius(0)") {
      @include assert {
        @include output {
          @include \2xl\:border-end-start-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            border-end-start-radius: 0;
          }
        }
      }
    }

    @include it("2xl\:border-start-end-radius(0)") {
      @include assert {
        @include output {
          @include \2xl\:border-start-end-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            border-start-end-radius: 0;
          }
        }
      }
    }

    @include it("2xl\:border-end-end-radius(0)") {
      @include assert {
        @include output {
          @include \2xl\:border-end-end-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            border-end-end-radius: 0;
          }
        }
      }
    }

    @include it("2xl\:border-top-left-radius(0)") {
      @include assert {
        @include output {
          @include \2xl\:border-top-left-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            border-top-left-radius: 0;
          }
        }
      }
    }

    @include it("2xl\:border-top-right-radius(0)") {
      @include assert {
        @include output {
          @include \2xl\:border-top-right-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            border-top-right-radius: 0;
          }
        }
      }
    }

    @include it("2xl\:border-bottom-right-radius(0)") {
      @include assert {
        @include output {
          @include \2xl\:border-bottom-right-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            border-bottom-right-radius: 0;
          }
        }
      }
    }

    @include it("2xl\:border-bottom-left-radius(0)") {
      @include assert {
        @include output {
          @include \2xl\:border-bottom-left-radius(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            border-bottom-left-radius: 0;
          }
        }
      }
    }

    @include it("2xl\:outline-color(0)") {
      @include assert {
        @include output {
          @include \2xl\:outline-color(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            outline-color: 0;
          }
        }
      }
    }

    @include it("2xl\:outline-width(0)") {
      @include assert {
        @include output {
          @include \2xl\:outline-width(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            outline-width: 0;
          }
        }
      }
    }

    @include it("2xl\:outline-offset(0)") {
      @include assert {
        @include output {
          @include \2xl\:outline-offset(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            outline-offset: 0;
          }
        }
      }
    }

    @include it("2xl\:box-shadow(0)") {
      @include assert {
        @include output {
          @include \2xl\:box-shadow(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            box-shadow: 0;
          }
        }
      }
    }

    @include it("2xl\:opacity(0)") {
      @include assert {
        @include output {
          @include \2xl\:opacity(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            opacity: 0;
          }
        }
      }
    }

    @include it("2xl\:backdrop-filter(0)") {
      @include assert {
        @include output {
          @include \2xl\:backdrop-filter(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            backdrop-filter: 0;
          }
        }
      }
    }

    @include it("2xl\:filter(0)") {
      @include assert {
        @include output {
          @include \2xl\:filter(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            filter: 0;
          }
        }
      }
    }

    @include it("2xl\:box-decoration-break(0)") {
      @include assert {
        @include output {
          @include \2xl\:box-decoration-break(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            box-decoration-break: 0;
          }
        }
      }
    }

    @include it("2xl\:box-sizing(0)") {
      @include assert {
        @include output {
          @include \2xl\:box-sizing(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            box-sizing: 0;
          }
        }
      }
    }

    @include it("2xl\:break-after(0)") {
      @include assert {
        @include output {
          @include \2xl\:break-after(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            break-after: 0;
          }
        }
      }
    }

    @include it("2xl\:break-before(0)") {
      @include assert {
        @include output {
          @include \2xl\:break-before(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            break-before: 0;
          }
        }
      }
    }

    @include it("2xl\:break-inside(0)") {
      @include assert {
        @include output {
          @include \2xl\:break-inside(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            break-inside: 0;
          }
        }
      }
    }

    @include it("2xl\:clear(0)") {
      @include assert {
        @include output {
          @include \2xl\:clear(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            clear: 0;
          }
        }
      }
    }

    @include it("2xl\:float(0)") {
      @include assert {
        @include output {
          @include \2xl\:float(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            float: 0;
          }
        }
      }
    }

    @include it("2xl\:isolation(0)") {
      @include assert {
        @include output {
          @include \2xl\:isolation(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            isolation: 0;
          }
        }
      }
    }

    @include it("2xl\:object-fit(0)") {
      @include assert {
        @include output {
          @include \2xl\:object-fit(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            object-fit: 0;
          }
        }
      }
    }

    @include it("2xl\:overscroll-behavior(0)") {
      @include assert {
        @include output {
          @include \2xl\:overscroll-behavior(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            overscroll-behavior: 0;
          }
        }
      }
    }

    @include it("2xl\:overscroll-behavior-y(0)") {
      @include assert {
        @include output {
          @include \2xl\:overscroll-behavior-y(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            overscroll-behavior-y: 0;
          }
        }
      }
    }

    @include it("2xl\:overscroll-behavior-x(0)") {
      @include assert {
        @include output {
          @include \2xl\:overscroll-behavior-x(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            overscroll-behavior-x: 0;
          }
        }
      }
    }

    @include it("2xl\:position(0)") {
      @include assert {
        @include output {
          @include \2xl\:position(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            position: 0;
          }
        }
      }
    }

    @include it("2xl\:visibility(0)") {
      @include assert {
        @include output {
          @include \2xl\:visibility(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            visibility: 0;
          }
        }
      }
    }

    @include it("2xl\:align-content(0)") {
      @include assert {
        @include output {
          @include \2xl\:align-content(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            align-content: 0;
          }
        }
      }
    }

    @include it("2xl\:align-items(0)") {
      @include assert {
        @include output {
          @include \2xl\:align-items(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            align-items: 0;
          }
        }
      }
    }

    @include it("2xl\:align-self(0)") {
      @include assert {
        @include output {
          @include \2xl\:align-self(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            align-self: 0;
          }
        }
      }
    }

    @include it("2xl\:flex-direction(0)") {
      @include assert {
        @include output {
          @include \2xl\:flex-direction(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            flex-direction: 0;
          }
        }
      }
    }

    @include it("2xl\:flex-wrap(0)") {
      @include assert {
        @include output {
          @include \2xl\:flex-wrap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            flex-wrap: 0;
          }
        }
      }
    }

    @include it("2xl\:grid-auto-flow(0)") {
      @include assert {
        @include output {
          @include \2xl\:grid-auto-flow(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            grid-auto-flow: 0;
          }
        }
      }
    }

    @include it("2xl\:justify-content(0)") {
      @include assert {
        @include output {
          @include \2xl\:justify-content(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            justify-content: 0;
          }
        }
      }
    }

    @include it("2xl\:justify-items(0)") {
      @include assert {
        @include output {
          @include \2xl\:justify-items(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            justify-items: 0;
          }
        }
      }
    }

    @include it("2xl\:justify-self(0)") {
      @include assert {
        @include output {
          @include \2xl\:justify-self(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            justify-self: 0;
          }
        }
      }
    }

    @include it("2xl\:place-content(0)") {
      @include assert {
        @include output {
          @include \2xl\:place-content(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            place-content: 0;
          }
        }
      }
    }

    @include it("2xl\:place-items(0)") {
      @include assert {
        @include output {
          @include \2xl\:place-items(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            place-items: 0;
          }
        }
      }
    }

    @include it("2xl\:place-self(0)") {
      @include assert {
        @include output {
          @include \2xl\:place-self(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            place-self: 0;
          }
        }
      }
    }

    @include it("2xl\:-webkit-font-smoothing(0)") {
      @include assert {
        @include output {
          @include \2xl\:-webkit-font-smoothing(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            -webkit-font-smoothing: 0;
          }
        }
      }
    }

    @include it("2xl\:-moz-osx-font-smoothing(0)") {
      @include assert {
        @include output {
          @include \2xl\:-moz-osx-font-smoothing(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            -moz-osx-font-smoothing: 0;
          }
        }
      }
    }

    @include it("2xl\:font-style(0)") {
      @include assert {
        @include output {
          @include \2xl\:font-style(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            font-style: 0;
          }
        }
      }
    }

    @include it("2xl\:font-variant-numeric(0)") {
      @include assert {
        @include output {
          @include \2xl\:font-variant-numeric(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            font-variant-numeric: 0;
          }
        }
      }
    }

    @include it("2xl\:hyphens(0)") {
      @include assert {
        @include output {
          @include \2xl\:hyphens(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            hyphens: 0;
          }
        }
      }
    }

    @include it("2xl\:list-style-position(0)") {
      @include assert {
        @include output {
          @include \2xl\:list-style-position(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            list-style-position: 0;
          }
        }
      }
    }

    @include it("2xl\:text-align(0)") {
      @include assert {
        @include output {
          @include \2xl\:text-align(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            text-align: 0;
          }
        }
      }
    }

    @include it("2xl\:text-decoration-line(0)") {
      @include assert {
        @include output {
          @include \2xl\:text-decoration-line(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            text-decoration-line: 0;
          }
        }
      }
    }

    @include it("2xl\:text-decoration-style(0)") {
      @include assert {
        @include output {
          @include \2xl\:text-decoration-style(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            text-decoration-style: 0;
          }
        }
      }
    }

    @include it("2xl\:text-overflow(0)") {
      @include assert {
        @include output {
          @include \2xl\:text-overflow(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            text-overflow: 0;
          }
        }
      }
    }

    @include it("2xl\:white-space(0)") {
      @include assert {
        @include output {
          @include \2xl\:white-space(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            white-space: 0;
          }
        }
      }
    }

    @include it("2xl\:text-transform(0)") {
      @include assert {
        @include output {
          @include \2xl\:text-transform(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            text-transform: 0;
          }
        }
      }
    }

    @include it("2xl\:text-wrap(0)") {
      @include assert {
        @include output {
          @include \2xl\:text-wrap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            text-wrap: 0;
          }
        }
      }
    }

    @include it("2xl\:overflow-wrap(0)") {
      @include assert {
        @include output {
          @include \2xl\:overflow-wrap(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            overflow-wrap: 0;
          }
        }
      }
    }

    @include it("2xl\:word-break(0)") {
      @include assert {
        @include output {
          @include \2xl\:word-break(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            word-break: 0;
          }
        }
      }
    }

    @include it("2xl\:background-attachment(0)") {
      @include assert {
        @include output {
          @include \2xl\:background-attachment(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            background-attachment: 0;
          }
        }
      }
    }

    @include it("2xl\:background-clip(0)") {
      @include assert {
        @include output {
          @include \2xl\:background-clip(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            background-clip: 0;
          }
        }
      }
    }

    @include it("2xl\:background-origin(0)") {
      @include assert {
        @include output {
          @include \2xl\:background-origin(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            background-origin: 0;
          }
        }
      }
    }

    @include it("2xl\:background-repeat(0)") {
      @include assert {
        @include output {
          @include \2xl\:background-repeat(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            background-repeat: 0;
          }
        }
      }
    }

    @include it("2xl\:border-style(0)") {
      @include assert {
        @include output {
          @include \2xl\:border-style(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            border-style: 0;
          }
        }
      }
    }

    @include it("2xl\:outline(0)") {
      @include assert {
        @include output {
          @include \2xl\:outline(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            outline: 0;
          }
        }
      }
    }

    @include it("2xl\:outline-style(0)") {
      @include assert {
        @include output {
          @include \2xl\:outline-style(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            outline-style: 0;
          }
        }
      }
    }

    @include it("2xl\:background-blend-mode(0)") {
      @include assert {
        @include output {
          @include \2xl\:background-blend-mode(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            background-blend-mode: 0;
          }
        }
      }
    }

    @include it("2xl\:mix-blend-mode(0)") {
      @include assert {
        @include output {
          @include \2xl\:mix-blend-mode(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            mix-blend-mode: 0;
          }
        }
      }
    }

    @include it("2xl\:border-collapse(0)") {
      @include assert {
        @include output {
          @include \2xl\:border-collapse(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            border-collapse: 0;
          }
        }
      }
    }

    @include it("2xl\:caption-side(0)") {
      @include assert {
        @include output {
          @include \2xl\:caption-side(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            caption-side: 0;
          }
        }
      }
    }

    @include it("2xl\:table-layout(0)") {
      @include assert {
        @include output {
          @include \2xl\:table-layout(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            table-layout: 0;
          }
        }
      }
    }

    @include it("2xl\:appearance(0)") {
      @include assert {
        @include output {
          @include \2xl\:appearance(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            appearance: 0;
          }
        }
      }
    }

    @include it("2xl\:pointer-events(0)") {
      @include assert {
        @include output {
          @include \2xl\:pointer-events(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            pointer-events: 0;
          }
        }
      }
    }

    @include it("2xl\:resize(0)") {
      @include assert {
        @include output {
          @include \2xl\:resize(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            resize: 0;
          }
        }
      }
    }

    @include it("2xl\:scroll-behavior(0)") {
      @include assert {
        @include output {
          @include \2xl\:scroll-behavior(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            scroll-behavior: 0;
          }
        }
      }
    }

    @include it("2xl\:scroll-snap-align(0)") {
      @include assert {
        @include output {
          @include \2xl\:scroll-snap-align(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            scroll-snap-align: 0;
          }
        }
      }
    }

    @include it("2xl\:scroll-snap-stop(0)") {
      @include assert {
        @include output {
          @include \2xl\:scroll-snap-stop(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            scroll-snap-stop: 0;
          }
        }
      }
    }

    @include it("2xl\:scroll-snap-type(0)") {
      @include assert {
        @include output {
          @include \2xl\:scroll-snap-type(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            scroll-snap-type: 0;
          }
        }
      }
    }

    @include it("2xl\:touch-action(0)") {
      @include assert {
        @include output {
          @include \2xl\:touch-action(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            touch-action: 0;
          }
        }
      }
    }

    @include it("2xl\:user-select(0)") {
      @include assert {
        @include output {
          @include \2xl\:user-select(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            user-select: 0;
          }
        }
      }
    }

    @include it("2xl\:forced-color-adjust(0)") {
      @include assert {
        @include output {
          @include \2xl\:forced-color-adjust(0);
          @include reset;
        }

        @include expect {
          @media (min-width: $\2xl) {
            forced-color-adjust: 0;
          }
        }
      }
    }
  }
}
