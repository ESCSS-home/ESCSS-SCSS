@use "../../setting" as *;
@use "../../mode0" as *;
@use "true" as *;

// negative testing
@mixin -skew-x-0 {
  @include skew-x-(-0deg);
}

@mixin -skew-y-0 {
  @include skew-y-(-0deg);
}

@mixin -skew-x-1 {
  @include skew-x-(-1deg);
}

@mixin -skew-y-1 {
  @include skew-y-(-1deg);
}

@mixin -skew-x-2 {
  @include skew-x-(-2deg);
}

@mixin -skew-y-2 {
  @include skew-y-(-2deg);
}

@mixin -skew-x-3 {
  @include skew-x-(-3deg);
}

@mixin -skew-y-3 {
  @include skew-y-(-3deg);
}

@mixin -skew-x-6 {
  @include skew-x-(-6deg);
}

@mixin -skew-y-6 {
  @include skew-y-(-6deg);
}

@mixin -skew-x-12 {
  @include skew-x-(-12deg);
}

@mixin -skew-y-12 {
  @include skew-y-(-12deg);
}

@mixin sm\:-skew-x-0 {
  @include skew-x-(-0deg, $sm);
}

@mixin sm\:-skew-y-0 {
  @include skew-y-(-0deg, $sm);
}

@mixin sm\:-skew-x-1 {
  @include skew-x-(-1deg, $sm);
}

@mixin sm\:-skew-y-1 {
  @include skew-y-(-1deg, $sm);
}

@mixin sm\:-skew-x-2 {
  @include skew-x-(-2deg, $sm);
}

@mixin sm\:-skew-y-2 {
  @include skew-y-(-2deg, $sm);
}

@mixin sm\:-skew-x-3 {
  @include skew-x-(-3deg, $sm);
}

@mixin sm\:-skew-y-3 {
  @include skew-y-(-3deg, $sm);
}

@mixin sm\:-skew-x-6 {
  @include skew-x-(-6deg, $sm);
}

@mixin sm\:-skew-y-6 {
  @include skew-y-(-6deg, $sm);
}

@mixin sm\:-skew-x-12 {
  @include skew-x-(-12deg, $sm);
}

@mixin sm\:-skew-y-12 {
  @include skew-y-(-12deg, $sm);
}

@mixin md\:-skew-x-0 {
  @include skew-x-(-0deg, $md);
}

@mixin md\:-skew-y-0 {
  @include skew-y-(-0deg, $md);
}

@mixin md\:-skew-x-1 {
  @include skew-x-(-1deg, $md);
}

@mixin md\:-skew-y-1 {
  @include skew-y-(-1deg, $md);
}

@mixin md\:-skew-x-2 {
  @include skew-x-(-2deg, $md);
}

@mixin md\:-skew-y-2 {
  @include skew-y-(-2deg, $md);
}

@mixin md\:-skew-x-3 {
  @include skew-x-(-3deg, $md);
}

@mixin md\:-skew-y-3 {
  @include skew-y-(-3deg, $md);
}

@mixin md\:-skew-x-6 {
  @include skew-x-(-6deg, $md);
}

@mixin md\:-skew-y-6 {
  @include skew-y-(-6deg, $md);
}

@mixin md\:-skew-x-12 {
  @include skew-x-(-12deg, $md);
}

@mixin md\:-skew-y-12 {
  @include skew-y-(-12deg, $md);
}

@mixin lg\:-skew-x-0 {
  @include skew-x-(-0deg, $lg);
}

@mixin lg\:-skew-y-0 {
  @include skew-y-(-0deg, $lg);
}

@mixin lg\:-skew-x-1 {
  @include skew-x-(-1deg, $lg);
}

@mixin lg\:-skew-y-1 {
  @include skew-y-(-1deg, $lg);
}

@mixin lg\:-skew-x-2 {
  @include skew-x-(-2deg, $lg);
}

@mixin lg\:-skew-y-2 {
  @include skew-y-(-2deg, $lg);
}

@mixin lg\:-skew-x-3 {
  @include skew-x-(-3deg, $lg);
}

@mixin lg\:-skew-y-3 {
  @include skew-y-(-3deg, $lg);
}

@mixin lg\:-skew-x-6 {
  @include skew-x-(-6deg, $lg);
}

@mixin lg\:-skew-y-6 {
  @include skew-y-(-6deg, $lg);
}

@mixin lg\:-skew-x-12 {
  @include skew-x-(-12deg, $lg);
}

@mixin lg\:-skew-y-12 {
  @include skew-y-(-12deg, $lg);
}

@mixin xl\:-skew-x-0 {
  @include skew-x-(-0deg, $xl);
}

@mixin xl\:-skew-y-0 {
  @include skew-y-(-0deg, $xl);
}

@mixin xl\:-skew-x-1 {
  @include skew-x-(-1deg, $xl);
}

@mixin xl\:-skew-y-1 {
  @include skew-y-(-1deg, $xl);
}

@mixin xl\:-skew-x-2 {
  @include skew-x-(-2deg, $xl);
}

@mixin xl\:-skew-y-2 {
  @include skew-y-(-2deg, $xl);
}

@mixin xl\:-skew-x-3 {
  @include skew-x-(-3deg, $xl);
}

@mixin xl\:-skew-y-3 {
  @include skew-y-(-3deg, $xl);
}

@mixin xl\:-skew-x-6 {
  @include skew-x-(-6deg, $xl);
}

@mixin xl\:-skew-y-6 {
  @include skew-y-(-6deg, $xl);
}

@mixin xl\:-skew-x-12 {
  @include skew-x-(-12deg, $xl);
}

@mixin xl\:-skew-y-12 {
  @include skew-y-(-12deg, $xl);
}

@mixin \2xl\:-skew-x-0 {
  @include skew-x-(-0deg, $\2xl);
}

@mixin \2xl\:-skew-y-0 {
  @include skew-y-(-0deg, $\2xl);
}

@mixin \2xl\:-skew-x-1 {
  @include skew-x-(-1deg, $\2xl);
}

@mixin \2xl\:-skew-y-1 {
  @include skew-y-(-1deg, $\2xl);
}

@mixin \2xl\:-skew-x-2 {
  @include skew-x-(-2deg, $\2xl);
}

@mixin \2xl\:-skew-y-2 {
  @include skew-y-(-2deg, $\2xl);
}

@mixin \2xl\:-skew-x-3 {
  @include skew-x-(-3deg, $\2xl);
}

@mixin \2xl\:-skew-y-3 {
  @include skew-y-(-3deg, $\2xl);
}

@mixin \2xl\:-skew-x-6 {
  @include skew-x-(-6deg, $\2xl);
}

@mixin \2xl\:-skew-y-6 {
  @include skew-y-(-6deg, $\2xl);
}

@mixin \2xl\:-skew-x-12 {
  @include skew-x-(-12deg, $\2xl);
}

@mixin \2xl\:-skew-y-12 {
  @include skew-y-(-12deg, $\2xl);
}

@include describe("12.Transforms") {
  @include describe("Skew") {
    @include describe("Basic") {
      @include it("skew-x-0") {
        @include assert {
          @include output {
            @include skew-x-0;
            @include clear;
          }
      
          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }
      
      @include it("skew-y-0") {
        @include assert {
          @include output {
            @include skew-y-0;
            @include clear;
          }
      
          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }
      
      @include it("skew-x-1") {
        @include assert {
          @include output {
            @include skew-x-1;
            @include clear;
          }
      
          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(1deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }
      
      @include it("skew-y-1") {
        @include assert {
          @include output {
            @include skew-y-1;
            @include clear;
          }
      
          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(1deg) scaleX(1) scaleY(1);
          }
        }
      }
      
      @include it("skew-x-2") {
        @include assert {
          @include output {
            @include skew-x-2;
            @include clear;
          }
      
          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(2deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }
      
      @include it("skew-y-2") {
        @include assert {
          @include output {
            @include skew-y-2;
            @include clear;
          }
      
          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(2deg) scaleX(1) scaleY(1);
          }
        }
      }
      
      @include it("skew-x-3") {
        @include assert {
          @include output {
            @include skew-x-3;
            @include clear;
          }
      
          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(3deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }
      
      @include it("skew-y-3") {
        @include assert {
          @include output {
            @include skew-y-3;
            @include clear;
          }
      
          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(3deg) scaleX(1) scaleY(1);
          }
        }
      }
      
      @include it("skew-x-6") {
        @include assert {
          @include output {
            @include skew-x-6;
            @include clear;
          }
      
          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(6deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }
      
      @include it("skew-y-6") {
        @include assert {
          @include output {
            @include skew-y-6;
            @include clear;
          }
      
          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(6deg) scaleX(1) scaleY(1);
          }
        }
      }
      
      @include it("skew-x-12") {
        @include assert {
          @include output {
            @include skew-x-12;
            @include clear;
          }
      
          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(12deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }
      
      @include it("skew-y-12") {
        @include assert {
          @include output {
            @include skew-y-12;
            @include clear;
          }
      
          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(12deg) scaleX(1) scaleY(1);
          }
        }
      }
    
      @include it("-skew-x-0") {
        @include assert {
          @include output {
            @include -skew-x-0;
            @include clear;
          }
    
          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }
    
      @include it("-skew-y-0") {
        @include assert {
          @include output {
            @include -skew-y-0;
            @include clear;
          }
    
          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }
    
      @include it("-skew-x-1") {
        @include assert {
          @include output {
            @include -skew-x-1;
            @include clear;
          }
    
          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(-1deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }
    
      @include it("-skew-y-1") {
        @include assert {
          @include output {
            @include -skew-y-1;
            @include clear;
          }
    
          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-1deg) scaleX(1) scaleY(1);
          }
        }
      }
    
      @include it("-skew-x-2") {
        @include assert {
          @include output {
            @include -skew-x-2;
            @include clear;
          }
    
          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(-2deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }
    
      @include it("-skew-y-2") {
        @include assert {
          @include output {
            @include -skew-y-2;
            @include clear;
          }
    
          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-2deg) scaleX(1) scaleY(1);
          }
        }
      }
    
      @include it("-skew-x-3") {
        @include assert {
          @include output {
            @include -skew-x-3;
            @include clear;
          }
    
          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(-3deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }
    
      @include it("-skew-y-3") {
        @include assert {
          @include output {
            @include -skew-y-3;
            @include clear;
          }
    
          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-3deg) scaleX(1) scaleY(1);
          }
        }
      }
    
      @include it("-skew-x-6") {
        @include assert {
          @include output {
            @include -skew-x-6;
            @include clear;
          }
    
          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(-6deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }
    
      @include it("-skew-y-6") {
        @include assert {
          @include output {
            @include -skew-y-6;
            @include clear;
          }
    
          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-6deg) scaleX(1) scaleY(1);
          }
        }
      }
    
      @include it("-skew-x-12") {
        @include assert {
          @include output {
            @include -skew-x-12;
            @include clear;
          }
    
          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(-12deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }
    
      @include it("-skew-y-12") {
        @include assert {
          @include output {
            @include -skew-y-12;
            @include clear;
          }
    
          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-12deg) scaleX(1) scaleY(1);
          }
        }
      }
    }

    @include describe("Rwd") {
      @include it("sm\:skew-x-0") {
        @include assert {
          @include output {
            @include sm\:skew-x-0;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("sm\:skew-y-0") {
        @include assert {
          @include output {
            @include sm\:skew-y-0;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("sm\:skew-x-1") {
        @include assert {
          @include output {
            @include sm\:skew-x-1;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$sm) {
              transform: translate(0, 0) rotate(0deg) skewX(1deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("sm\:skew-y-1") {
        @include assert {
          @include output {
            @include sm\:skew-y-1;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(1deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("sm\:skew-x-2") {
        @include assert {
          @include output {
            @include sm\:skew-x-2;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$sm) {
              transform: translate(0, 0) rotate(0deg) skewX(2deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("sm\:skew-y-2") {
        @include assert {
          @include output {
            @include sm\:skew-y-2;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(2deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("sm\:skew-x-3") {
        @include assert {
          @include output {
            @include sm\:skew-x-3;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$sm) {
              transform: translate(0, 0) rotate(0deg) skewX(3deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("sm\:skew-y-3") {
        @include assert {
          @include output {
            @include sm\:skew-y-3;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(3deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("sm\:skew-x-6") {
        @include assert {
          @include output {
            @include sm\:skew-x-6;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$sm) {
              transform: translate(0, 0) rotate(0deg) skewX(6deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("sm\:skew-y-6") {
        @include assert {
          @include output {
            @include sm\:skew-y-6;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(6deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("sm\:skew-x-12") {
        @include assert {
          @include output {
            @include sm\:skew-x-12;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$sm) {
              transform: translate(0, 0) rotate(0deg) skewX(12deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("sm\:skew-y-12") {
        @include assert {
          @include output {
            @include sm\:skew-y-12;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(12deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("sm\:-skew-x-0") {
        @include assert {
          @include output {
            @include sm\:-skew-x-0;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("sm\:-skew-y-0") {
        @include assert {
          @include output {
            @include sm\:-skew-y-0;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("sm\:-skew-x-1") {
        @include assert {
          @include output {
            @include sm\:-skew-x-1;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$sm) {
              transform: translate(0, 0) rotate(0deg) skewX(-1deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("sm\:-skew-y-1") {
        @include assert {
          @include output {
            @include sm\:-skew-y-1;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-1deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("sm\:-skew-x-2") {
        @include assert {
          @include output {
            @include sm\:-skew-x-2;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$sm) {
              transform: translate(0, 0) rotate(0deg) skewX(-2deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("sm\:-skew-y-2") {
        @include assert {
          @include output {
            @include sm\:-skew-y-2;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-2deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("sm\:-skew-x-3") {
        @include assert {
          @include output {
            @include sm\:-skew-x-3;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$sm) {
              transform: translate(0, 0) rotate(0deg) skewX(-3deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("sm\:-skew-y-3") {
        @include assert {
          @include output {
            @include sm\:-skew-y-3;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-3deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("sm\:-skew-x-6") {
        @include assert {
          @include output {
            @include sm\:-skew-x-6;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$sm) {
              transform: translate(0, 0) rotate(0deg) skewX(-6deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("sm\:-skew-y-6") {
        @include assert {
          @include output {
            @include sm\:-skew-y-6;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-6deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("sm\:-skew-x-12") {
        @include assert {
          @include output {
            @include sm\:-skew-x-12;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$sm) {
              transform: translate(0, 0) rotate(0deg) skewX(-12deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("sm\:-skew-y-12") {
        @include assert {
          @include output {
            @include sm\:-skew-y-12;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-12deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("md\:skew-x-0") {
        @include assert {
          @include output {
            @include md\:skew-x-0;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("md\:skew-y-0") {
        @include assert {
          @include output {
            @include md\:skew-y-0;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("md\:skew-x-1") {
        @include assert {
          @include output {
            @include md\:skew-x-1;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$md) {
              transform: translate(0, 0) rotate(0deg) skewX(1deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("md\:skew-y-1") {
        @include assert {
          @include output {
            @include md\:skew-y-1;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(1deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("md\:skew-x-2") {
        @include assert {
          @include output {
            @include md\:skew-x-2;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$md) {
              transform: translate(0, 0) rotate(0deg) skewX(2deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("md\:skew-y-2") {
        @include assert {
          @include output {
            @include md\:skew-y-2;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(2deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("md\:skew-x-3") {
        @include assert {
          @include output {
            @include md\:skew-x-3;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$md) {
              transform: translate(0, 0) rotate(0deg) skewX(3deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("md\:skew-y-3") {
        @include assert {
          @include output {
            @include md\:skew-y-3;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(3deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("md\:skew-x-6") {
        @include assert {
          @include output {
            @include md\:skew-x-6;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$md) {
              transform: translate(0, 0) rotate(0deg) skewX(6deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("md\:skew-y-6") {
        @include assert {
          @include output {
            @include md\:skew-y-6;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(6deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("md\:skew-x-12") {
        @include assert {
          @include output {
            @include md\:skew-x-12;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$md) {
              transform: translate(0, 0) rotate(0deg) skewX(12deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("md\:skew-y-12") {
        @include assert {
          @include output {
            @include md\:skew-y-12;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(12deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("md\:-skew-x-0") {
        @include assert {
          @include output {
            @include md\:-skew-x-0;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("md\:-skew-y-0") {
        @include assert {
          @include output {
            @include md\:-skew-y-0;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("md\:-skew-x-1") {
        @include assert {
          @include output {
            @include md\:-skew-x-1;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$md) {
              transform: translate(0, 0) rotate(0deg) skewX(-1deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("md\:-skew-y-1") {
        @include assert {
          @include output {
            @include md\:-skew-y-1;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-1deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("md\:-skew-x-2") {
        @include assert {
          @include output {
            @include md\:-skew-x-2;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$md) {
              transform: translate(0, 0) rotate(0deg) skewX(-2deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("md\:-skew-y-2") {
        @include assert {
          @include output {
            @include md\:-skew-y-2;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-2deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("md\:-skew-x-3") {
        @include assert {
          @include output {
            @include md\:-skew-x-3;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$md) {
              transform: translate(0, 0) rotate(0deg) skewX(-3deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("md\:-skew-y-3") {
        @include assert {
          @include output {
            @include md\:-skew-y-3;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-3deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("md\:-skew-x-6") {
        @include assert {
          @include output {
            @include md\:-skew-x-6;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$md) {
              transform: translate(0, 0) rotate(0deg) skewX(-6deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("md\:-skew-y-6") {
        @include assert {
          @include output {
            @include md\:-skew-y-6;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-6deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("md\:-skew-x-12") {
        @include assert {
          @include output {
            @include md\:-skew-x-12;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$md) {
              transform: translate(0, 0) rotate(0deg) skewX(-12deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("md\:-skew-y-12") {
        @include assert {
          @include output {
            @include md\:-skew-y-12;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-12deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("lg\:skew-x-0") {
        @include assert {
          @include output {
            @include lg\:skew-x-0;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("lg\:skew-y-0") {
        @include assert {
          @include output {
            @include lg\:skew-y-0;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("lg\:skew-x-1") {
        @include assert {
          @include output {
            @include lg\:skew-x-1;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$lg) {
              transform: translate(0, 0) rotate(0deg) skewX(1deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("lg\:skew-y-1") {
        @include assert {
          @include output {
            @include lg\:skew-y-1;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(1deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("lg\:skew-x-2") {
        @include assert {
          @include output {
            @include lg\:skew-x-2;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$lg) {
              transform: translate(0, 0) rotate(0deg) skewX(2deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("lg\:skew-y-2") {
        @include assert {
          @include output {
            @include lg\:skew-y-2;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(2deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("lg\:skew-x-3") {
        @include assert {
          @include output {
            @include lg\:skew-x-3;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$lg) {
              transform: translate(0, 0) rotate(0deg) skewX(3deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("lg\:skew-y-3") {
        @include assert {
          @include output {
            @include lg\:skew-y-3;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(3deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("lg\:skew-x-6") {
        @include assert {
          @include output {
            @include lg\:skew-x-6;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$lg) {
              transform: translate(0, 0) rotate(0deg) skewX(6deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("lg\:skew-y-6") {
        @include assert {
          @include output {
            @include lg\:skew-y-6;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(6deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("lg\:skew-x-12") {
        @include assert {
          @include output {
            @include lg\:skew-x-12;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$lg) {
              transform: translate(0, 0) rotate(0deg) skewX(12deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("lg\:skew-y-12") {
        @include assert {
          @include output {
            @include lg\:skew-y-12;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(12deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("lg\:-skew-x-0") {
        @include assert {
          @include output {
            @include lg\:-skew-x-0;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("lg\:-skew-y-0") {
        @include assert {
          @include output {
            @include lg\:-skew-y-0;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("lg\:-skew-x-1") {
        @include assert {
          @include output {
            @include lg\:-skew-x-1;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$lg) {
              transform: translate(0, 0) rotate(0deg) skewX(-1deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("lg\:-skew-y-1") {
        @include assert {
          @include output {
            @include lg\:-skew-y-1;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-1deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("lg\:-skew-x-2") {
        @include assert {
          @include output {
            @include lg\:-skew-x-2;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$lg) {
              transform: translate(0, 0) rotate(0deg) skewX(-2deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("lg\:-skew-y-2") {
        @include assert {
          @include output {
            @include lg\:-skew-y-2;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-2deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("lg\:-skew-x-3") {
        @include assert {
          @include output {
            @include lg\:-skew-x-3;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$lg) {
              transform: translate(0, 0) rotate(0deg) skewX(-3deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("lg\:-skew-y-3") {
        @include assert {
          @include output {
            @include lg\:-skew-y-3;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-3deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("lg\:-skew-x-6") {
        @include assert {
          @include output {
            @include lg\:-skew-x-6;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$lg) {
              transform: translate(0, 0) rotate(0deg) skewX(-6deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("lg\:-skew-y-6") {
        @include assert {
          @include output {
            @include lg\:-skew-y-6;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-6deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("lg\:-skew-x-12") {
        @include assert {
          @include output {
            @include lg\:-skew-x-12;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$lg) {
              transform: translate(0, 0) rotate(0deg) skewX(-12deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("lg\:-skew-y-12") {
        @include assert {
          @include output {
            @include lg\:-skew-y-12;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-12deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("xl\:skew-x-0") {
        @include assert {
          @include output {
            @include xl\:skew-x-0;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("xl\:skew-y-0") {
        @include assert {
          @include output {
            @include xl\:skew-y-0;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("xl\:skew-x-1") {
        @include assert {
          @include output {
            @include xl\:skew-x-1;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$xl) {
              transform: translate(0, 0) rotate(0deg) skewX(1deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("xl\:skew-y-1") {
        @include assert {
          @include output {
            @include xl\:skew-y-1;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(1deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("xl\:skew-x-2") {
        @include assert {
          @include output {
            @include xl\:skew-x-2;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$xl) {
              transform: translate(0, 0) rotate(0deg) skewX(2deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("xl\:skew-y-2") {
        @include assert {
          @include output {
            @include xl\:skew-y-2;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(2deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("xl\:skew-x-3") {
        @include assert {
          @include output {
            @include xl\:skew-x-3;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$xl) {
              transform: translate(0, 0) rotate(0deg) skewX(3deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("xl\:skew-y-3") {
        @include assert {
          @include output {
            @include xl\:skew-y-3;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(3deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("xl\:skew-x-6") {
        @include assert {
          @include output {
            @include xl\:skew-x-6;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$xl) {
              transform: translate(0, 0) rotate(0deg) skewX(6deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("xl\:skew-y-6") {
        @include assert {
          @include output {
            @include xl\:skew-y-6;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(6deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("xl\:skew-x-12") {
        @include assert {
          @include output {
            @include xl\:skew-x-12;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$xl) {
              transform: translate(0, 0) rotate(0deg) skewX(12deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("xl\:skew-y-12") {
        @include assert {
          @include output {
            @include xl\:skew-y-12;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(12deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("xl\:-skew-x-0") {
        @include assert {
          @include output {
            @include xl\:-skew-x-0;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("xl\:-skew-y-0") {
        @include assert {
          @include output {
            @include xl\:-skew-y-0;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("xl\:-skew-x-1") {
        @include assert {
          @include output {
            @include xl\:-skew-x-1;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$xl) {
              transform: translate(0, 0) rotate(0deg) skewX(-1deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("xl\:-skew-y-1") {
        @include assert {
          @include output {
            @include xl\:-skew-y-1;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-1deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("xl\:-skew-x-2") {
        @include assert {
          @include output {
            @include xl\:-skew-x-2;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$xl) {
              transform: translate(0, 0) rotate(0deg) skewX(-2deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("xl\:-skew-y-2") {
        @include assert {
          @include output {
            @include xl\:-skew-y-2;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-2deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("xl\:-skew-x-3") {
        @include assert {
          @include output {
            @include xl\:-skew-x-3;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$xl) {
              transform: translate(0, 0) rotate(0deg) skewX(-3deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("xl\:-skew-y-3") {
        @include assert {
          @include output {
            @include xl\:-skew-y-3;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-3deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("xl\:-skew-x-6") {
        @include assert {
          @include output {
            @include xl\:-skew-x-6;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$xl) {
              transform: translate(0, 0) rotate(0deg) skewX(-6deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("xl\:-skew-y-6") {
        @include assert {
          @include output {
            @include xl\:-skew-y-6;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-6deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("xl\:-skew-x-12") {
        @include assert {
          @include output {
            @include xl\:-skew-x-12;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$xl) {
              transform: translate(0, 0) rotate(0deg) skewX(-12deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("xl\:-skew-y-12") {
        @include assert {
          @include output {
            @include xl\:-skew-y-12;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-12deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("\2xl\:skew-x-0") {
        @include assert {
          @include output {
            @include \2xl\:skew-x-0;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("\2xl\:skew-y-0") {
        @include assert {
          @include output {
            @include \2xl\:skew-y-0;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("\2xl\:skew-x-1") {
        @include assert {
          @include output {
            @include \2xl\:skew-x-1;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(1deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("\2xl\:skew-y-1") {
        @include assert {
          @include output {
            @include \2xl\:skew-y-1;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(1deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("\2xl\:skew-x-2") {
        @include assert {
          @include output {
            @include \2xl\:skew-x-2;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(2deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("\2xl\:skew-y-2") {
        @include assert {
          @include output {
            @include \2xl\:skew-y-2;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(2deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("\2xl\:skew-x-3") {
        @include assert {
          @include output {
            @include \2xl\:skew-x-3;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(3deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("\2xl\:skew-y-3") {
        @include assert {
          @include output {
            @include \2xl\:skew-y-3;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(3deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("\2xl\:skew-x-6") {
        @include assert {
          @include output {
            @include \2xl\:skew-x-6;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(6deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("\2xl\:skew-y-6") {
        @include assert {
          @include output {
            @include \2xl\:skew-y-6;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(6deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("\2xl\:skew-x-12") {
        @include assert {
          @include output {
            @include \2xl\:skew-x-12;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(12deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("\2xl\:skew-y-12") {
        @include assert {
          @include output {
            @include \2xl\:skew-y-12;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(12deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("\2xl\:-skew-x-0") {
        @include assert {
          @include output {
            @include \2xl\:-skew-x-0;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("\2xl\:-skew-y-0") {
        @include assert {
          @include output {
            @include \2xl\:-skew-y-0;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("\2xl\:-skew-x-1") {
        @include assert {
          @include output {
            @include \2xl\:-skew-x-1;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(-1deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("\2xl\:-skew-y-1") {
        @include assert {
          @include output {
            @include \2xl\:-skew-y-1;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-1deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("\2xl\:-skew-x-2") {
        @include assert {
          @include output {
            @include \2xl\:-skew-x-2;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(-2deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("\2xl\:-skew-y-2") {
        @include assert {
          @include output {
            @include \2xl\:-skew-y-2;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-2deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("\2xl\:-skew-x-3") {
        @include assert {
          @include output {
            @include \2xl\:-skew-x-3;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(-3deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("\2xl\:-skew-y-3") {
        @include assert {
          @include output {
            @include \2xl\:-skew-y-3;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-3deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("\2xl\:-skew-x-6") {
        @include assert {
          @include output {
            @include \2xl\:-skew-x-6;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(-6deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("\2xl\:-skew-y-6") {
        @include assert {
          @include output {
            @include \2xl\:-skew-y-6;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-6deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("\2xl\:-skew-x-12") {
        @include assert {
          @include output {
            @include \2xl\:-skew-x-12;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(-12deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    
      @include it("\2xl\:-skew-y-12") {
        @include assert {
          @include output {
            @include \2xl\:-skew-y-12;
            @include clear;
          }
    
          @include expect {
            @media(min-width:$\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(-12deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    }

    @include describe("Custom") {
      @include it("skew-x-(17deg)") {
        @include assert {
          @include output {
            @include skew-x-(17deg);
            @include clear;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(17deg) skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("skew-y-(17deg)") {
        @include assert {
          @include output {
            @include skew-y-(17deg);
            @include clear;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(17deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("sm\:skew-x-(17deg)") {
        @include assert {
          @include output {
            @include sm\:skew-x-(17deg);
            @include clear;
          }

          @include expect {
            @media(min-width:$sm) {
              transform: translate(0, 0) rotate(0deg) skewX(17deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:skew-y-(17deg)") {
        @include assert {
          @include output {
            @include sm\:skew-y-(17deg);
            @include clear;
          }

          @include expect {
            @media(min-width:$sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(17deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:skew-x-(17deg)") {
        @include assert {
          @include output {
            @include md\:skew-x-(17deg);
            @include clear;
          }

          @include expect {
            @media(min-width:$md) {
              transform: translate(0, 0) rotate(0deg) skewX(17deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:skew-y-(17deg)") {
        @include assert {
          @include output {
            @include md\:skew-y-(17deg);
            @include clear;
          }

          @include expect {
            @media(min-width:$md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(17deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:skew-x-(17deg)") {
        @include assert {
          @include output {
            @include lg\:skew-x-(17deg);
            @include clear;
          }

          @include expect {
            @media(min-width:$lg) {
              transform: translate(0, 0) rotate(0deg) skewX(17deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:skew-y-(17deg)") {
        @include assert {
          @include output {
            @include lg\:skew-y-(17deg);
            @include clear;
          }

          @include expect {
            @media(min-width:$lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(17deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:skew-x-(17deg)") {
        @include assert {
          @include output {
            @include xl\:skew-x-(17deg);
            @include clear;
          }

          @include expect {
            @media(min-width:$xl) {
              transform: translate(0, 0) rotate(0deg) skewX(17deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:skew-y-(17deg)") {
        @include assert {
          @include output {
            @include xl\:skew-y-(17deg);
            @include clear;
          }

          @include expect {
            @media(min-width:$xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(17deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:skew-x-(17deg)") {
        @include assert {
          @include output {
            @include \2xl\:skew-x-(17deg);
            @include clear;
          }

          @include expect {
            @media(min-width:$\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(17deg) skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:skew-y-(17deg)") {
        @include assert {
          @include output {
            @include \2xl\:skew-y-(17deg);
            @include clear;
          }

          @include expect {
            @media(min-width:$\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(17deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

    }
  }
}