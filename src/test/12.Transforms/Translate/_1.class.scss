@use "../../mode0" as *;
@use "true" as *;

// for testing negative value
@mixin -translate-x-0 {
  @include translate-x-(-($\0));
}

@mixin -translate-y-0 {
  @include translate-y-(-($\0));
}

@mixin -translate-x-px {
  @include translate-x-(-($\px));
}

@mixin -translate-y-px {
  @include translate-y-(-($\px));
}

@mixin -translate-x-0\.5 {
  @include translate-x-(-($\0\.5));
}

@mixin -translate-y-0\.5 {
  @include translate-y-(-($\0\.5));
}

@mixin -translate-x-1 {
  @include translate-x-(-($\1));
}

@mixin -translate-y-1 {
  @include translate-y-(-($\1));
}

@mixin -translate-x-1\.5 {
  @include translate-x-(-($\1\.5));
}

@mixin -translate-y-1\.5 {
  @include translate-y-(-($\1\.5));
}

@mixin -translate-x-2 {
  @include translate-x-(-($\2));
}

@mixin -translate-y-2 {
  @include translate-y-(-($\2));
}

@mixin -translate-x-2\.5 {
  @include translate-x-(-($\2\.5));
}

@mixin -translate-y-2\.5 {
  @include translate-y-(-($\2\.5));
}

@mixin -translate-x-3 {
  @include translate-x-(-($\3));
}

@mixin -translate-y-3 {
  @include translate-y-(-($\3));
}

@mixin -translate-x-3\.5 {
  @include translate-x-(-($\3\.5));
}

@mixin -translate-y-3\.5 {
  @include translate-y-(-($\3\.5));
}

@mixin -translate-x-4 {
  @include translate-x-(-($\4));
}

@mixin -translate-y-4 {
  @include translate-y-(-($\4));
}

@mixin -translate-x-5 {
  @include translate-x-(-($\5));
}

@mixin -translate-y-5 {
  @include translate-y-(-($\5));
}

@mixin -translate-x-6 {
  @include translate-x-(-($\6));
}

@mixin -translate-y-6 {
  @include translate-y-(-($\6));
}

@mixin -translate-x-7 {
  @include translate-x-(-($\7));
}

@mixin -translate-y-7 {
  @include translate-y-(-($\7));
}

@mixin -translate-x-8 {
  @include translate-x-(-($\8));
}

@mixin -translate-y-8 {
  @include translate-y-(-($\8));
}

@mixin -translate-x-9 {
  @include translate-x-(-($\9));
}

@mixin -translate-y-9 {
  @include translate-y-(-($\9));
}

@mixin -translate-x-10 {
  @include translate-x-(-($\10));
}

@mixin -translate-y-10 {
  @include translate-y-(-($\10));
}

@mixin -translate-x-11 {
  @include translate-x-(-($\11));
}

@mixin -translate-y-11 {
  @include translate-y-(-($\11));
}

@mixin -translate-x-12 {
  @include translate-x-(-($\12));
}

@mixin -translate-y-12 {
  @include translate-y-(-($\12));
}

@mixin -translate-x-14 {
  @include translate-x-(-($\14));
}

@mixin -translate-y-14 {
  @include translate-y-(-($\14));
}

@mixin -translate-x-16 {
  @include translate-x-(-($\16));
}

@mixin -translate-y-16 {
  @include translate-y-(-($\16));
}

@mixin -translate-x-20 {
  @include translate-x-(-($\20));
}

@mixin -translate-y-20 {
  @include translate-y-(-($\20));
}

@mixin -translate-x-24 {
  @include translate-x-(-($\24));
}

@mixin -translate-y-24 {
  @include translate-y-(-($\24));
}

@mixin -translate-x-28 {
  @include translate-x-(-($\28));
}

@mixin -translate-y-28 {
  @include translate-y-(-($\28));
}

@mixin -translate-x-32 {
  @include translate-x-(-($\32));
}

@mixin -translate-y-32 {
  @include translate-y-(-($\32));
}

@mixin -translate-x-36 {
  @include translate-x-(-($\36));
}

@mixin -translate-y-36 {
  @include translate-y-(-($\36));
}

@mixin -translate-x-40 {
  @include translate-x-(-($\40));
}

@mixin -translate-y-40 {
  @include translate-y-(-($\40));
}

@mixin -translate-x-44 {
  @include translate-x-(-($\44));
}

@mixin -translate-y-44 {
  @include translate-y-(-($\44));
}

@mixin -translate-x-48 {
  @include translate-x-(-($\48));
}

@mixin -translate-y-48 {
  @include translate-y-(-($\48));
}

@mixin -translate-x-52 {
  @include translate-x-(-($\52));
}

@mixin -translate-y-52 {
  @include translate-y-(-($\52));
}

@mixin -translate-x-56 {
  @include translate-x-(-($\56));
}

@mixin -translate-y-56 {
  @include translate-y-(-($\56));
}

@mixin -translate-x-60 {
  @include translate-x-(-($\60));
}

@mixin -translate-y-60 {
  @include translate-y-(-($\60));
}

@mixin -translate-x-64 {
  @include translate-x-(-($\64));
}

@mixin -translate-y-64 {
  @include translate-y-(-($\64));
}

@mixin -translate-x-72 {
  @include translate-x-(-($\72));
}

@mixin -translate-y-72 {
  @include translate-y-(-($\72));
}

@mixin -translate-x-80 {
  @include translate-x-(-($\80));
}

@mixin -translate-y-80 {
  @include translate-y-(-($\80));
}

@mixin -translate-x-96 {
  @include translate-x-(-($\96));
}

@mixin -translate-y-96 {
  @include translate-y-(-($\96));
}

@mixin -translate-x-1\/2 {
  @include translate-x-(-50%);
}

@mixin -translate-x-1\/3 {
  @include translate-x-(-33.333333%);
}

@mixin -translate-x-2\/3 {
  @include translate-x-(-66.666667%);
}

@mixin -translate-x-1\/4 {
  @include translate-x-(-25%);
}

@mixin -translate-x-2\/4 {
  @include translate-x-(-50%);
}

@mixin -translate-x-3\/4 {
  @include translate-x-(-75%);
}

@mixin -translate-x-full {
  @include translate-x-(-100%);
}

@mixin -translate-y-1\/2 {
  @include translate-y-(-50%);
}

@mixin -translate-y-1\/3 {
  @include translate-y-(-33.333333%);
}

@mixin -translate-y-2\/3 {
  @include translate-y-(-66.666667%);
}

@mixin -translate-y-1\/4 {
  @include translate-y-(-25%);
}

@mixin -translate-y-2\/4 {
  @include translate-y-(-50%);
}

@mixin -translate-y-3\/4 {
  @include translate-y-(-75%);
}

@mixin -translate-y-full {
  @include translate-y-(-100%);
}

@mixin sm\:-translate-x-0 {
  @include translate-x-(-($\0), $sm);
}

@mixin sm\:-translate-y-0 {
  @include translate-y-(-($\0), $sm);
}

@mixin sm\:-translate-x-px {
  @include translate-x-(-($\px), $sm);
}

@mixin sm\:-translate-y-px {
  @include translate-y-(-($\px), $sm);
}

@mixin sm\:-translate-x-0\.5 {
  @include translate-x-(-($\0\.5), $sm);
}

@mixin sm\:-translate-y-0\.5 {
  @include translate-y-(-($\0\.5), $sm);
}

@mixin sm\:-translate-x-1 {
  @include translate-x-(-($\1), $sm);
}

@mixin sm\:-translate-y-1 {
  @include translate-y-(-($\1), $sm);
}

@mixin sm\:-translate-x-1\.5 {
  @include translate-x-(-($\1\.5), $sm);
}

@mixin sm\:-translate-y-1\.5 {
  @include translate-y-(-($\1\.5), $sm);
}

@mixin sm\:-translate-x-2 {
  @include translate-x-(-($\2), $sm);
}

@mixin sm\:-translate-y-2 {
  @include translate-y-(-($\2), $sm);
}

@mixin sm\:-translate-x-2\.5 {
  @include translate-x-(-($\2\.5), $sm);
}

@mixin sm\:-translate-y-2\.5 {
  @include translate-y-(-($\2\.5), $sm);
}

@mixin sm\:-translate-x-3 {
  @include translate-x-(-($\3), $sm);
}

@mixin sm\:-translate-y-3 {
  @include translate-y-(-($\3), $sm);
}

@mixin sm\:-translate-x-3\.5 {
  @include translate-x-(-($\3\.5), $sm);
}

@mixin sm\:-translate-y-3\.5 {
  @include translate-y-(-($\3\.5), $sm);
}

@mixin sm\:-translate-x-4 {
  @include translate-x-(-($\4), $sm);
}

@mixin sm\:-translate-y-4 {
  @include translate-y-(-($\4), $sm);
}

@mixin sm\:-translate-x-5 {
  @include translate-x-(-($\5), $sm);
}

@mixin sm\:-translate-y-5 {
  @include translate-y-(-($\5), $sm);
}

@mixin sm\:-translate-x-6 {
  @include translate-x-(-($\6), $sm);
}

@mixin sm\:-translate-y-6 {
  @include translate-y-(-($\6), $sm);
}

@mixin sm\:-translate-x-7 {
  @include translate-x-(-($\7), $sm);
}

@mixin sm\:-translate-y-7 {
  @include translate-y-(-($\7), $sm);
}

@mixin sm\:-translate-x-8 {
  @include translate-x-(-($\8), $sm);
}

@mixin sm\:-translate-y-8 {
  @include translate-y-(-($\8), $sm);
}

@mixin sm\:-translate-x-9 {
  @include translate-x-(-($\9), $sm);
}

@mixin sm\:-translate-y-9 {
  @include translate-y-(-($\9), $sm);
}

@mixin sm\:-translate-x-10 {
  @include translate-x-(-($\10), $sm);
}

@mixin sm\:-translate-y-10 {
  @include translate-y-(-($\10), $sm);
}

@mixin sm\:-translate-x-11 {
  @include translate-x-(-($\11), $sm);
}

@mixin sm\:-translate-y-11 {
  @include translate-y-(-($\11), $sm);
}

@mixin sm\:-translate-x-12 {
  @include translate-x-(-($\12), $sm);
}

@mixin sm\:-translate-y-12 {
  @include translate-y-(-($\12), $sm);
}

@mixin sm\:-translate-x-14 {
  @include translate-x-(-($\14), $sm);
}

@mixin sm\:-translate-y-14 {
  @include translate-y-(-($\14), $sm);
}

@mixin sm\:-translate-x-16 {
  @include translate-x-(-($\16), $sm);
}

@mixin sm\:-translate-y-16 {
  @include translate-y-(-($\16), $sm);
}

@mixin sm\:-translate-x-20 {
  @include translate-x-(-($\20), $sm);
}

@mixin sm\:-translate-y-20 {
  @include translate-y-(-($\20), $sm);
}

@mixin sm\:-translate-x-24 {
  @include translate-x-(-($\24), $sm);
}

@mixin sm\:-translate-y-24 {
  @include translate-y-(-($\24), $sm);
}

@mixin sm\:-translate-x-28 {
  @include translate-x-(-($\28), $sm);
}

@mixin sm\:-translate-y-28 {
  @include translate-y-(-($\28), $sm);
}

@mixin sm\:-translate-x-32 {
  @include translate-x-(-($\32), $sm);
}

@mixin sm\:-translate-y-32 {
  @include translate-y-(-($\32), $sm);
}

@mixin sm\:-translate-x-36 {
  @include translate-x-(-($\36), $sm);
}

@mixin sm\:-translate-y-36 {
  @include translate-y-(-($\36), $sm);
}

@mixin sm\:-translate-x-40 {
  @include translate-x-(-($\40), $sm);
}

@mixin sm\:-translate-y-40 {
  @include translate-y-(-($\40), $sm);
}

@mixin sm\:-translate-x-44 {
  @include translate-x-(-($\44), $sm);
}

@mixin sm\:-translate-y-44 {
  @include translate-y-(-($\44), $sm);
}

@mixin sm\:-translate-x-48 {
  @include translate-x-(-($\48), $sm);
}

@mixin sm\:-translate-y-48 {
  @include translate-y-(-($\48), $sm);
}

@mixin sm\:-translate-x-52 {
  @include translate-x-(-($\52), $sm);
}

@mixin sm\:-translate-y-52 {
  @include translate-y-(-($\52), $sm);
}

@mixin sm\:-translate-x-56 {
  @include translate-x-(-($\56), $sm);
}

@mixin sm\:-translate-y-56 {
  @include translate-y-(-($\56), $sm);
}

@mixin sm\:-translate-x-60 {
  @include translate-x-(-($\60), $sm);
}

@mixin sm\:-translate-y-60 {
  @include translate-y-(-($\60), $sm);
}

@mixin sm\:-translate-x-64 {
  @include translate-x-(-($\64), $sm);
}

@mixin sm\:-translate-y-64 {
  @include translate-y-(-($\64), $sm);
}

@mixin sm\:-translate-x-72 {
  @include translate-x-(-($\72), $sm);
}

@mixin sm\:-translate-y-72 {
  @include translate-y-(-($\72), $sm);
}

@mixin sm\:-translate-x-80 {
  @include translate-x-(-($\80), $sm);
}

@mixin sm\:-translate-y-80 {
  @include translate-y-(-($\80), $sm);
}

@mixin sm\:-translate-x-96 {
  @include translate-x-(-($\96), $sm);
}

@mixin sm\:-translate-y-96 {
  @include translate-y-(-($\96), $sm);
}

@mixin sm\:-translate-x-1\/2 {
  @include translate-x-(-50%, $sm);
}

@mixin sm\:-translate-x-1\/3 {
  @include translate-x-(-33.333333%, $sm);
}

@mixin sm\:-translate-x-2\/3 {
  @include translate-x-(-66.666667%, $sm);
}

@mixin sm\:-translate-x-1\/4 {
  @include translate-x-(-25%, $sm);
}

@mixin sm\:-translate-x-2\/4 {
  @include translate-x-(-50%, $sm);
}

@mixin sm\:-translate-x-3\/4 {
  @include translate-x-(-75%, $sm);
}

@mixin sm\:-translate-x-full {
  @include translate-x-(-100%, $sm);
}

@mixin sm\:-translate-y-1\/2 {
  @include translate-y-(-50%, $sm);
}

@mixin sm\:-translate-y-1\/3 {
  @include translate-y-(-33.333333%, $sm);
}

@mixin sm\:-translate-y-2\/3 {
  @include translate-y-(-66.666667%, $sm);
}

@mixin sm\:-translate-y-1\/4 {
  @include translate-y-(-25%, $sm);
}

@mixin sm\:-translate-y-2\/4 {
  @include translate-y-(-50%, $sm);
}

@mixin sm\:-translate-y-3\/4 {
  @include translate-y-(-75%, $sm);
}

@mixin sm\:-translate-y-full {
  @include translate-y-(-100%, $sm);
}

@mixin md\:-translate-x-0 {
  @include translate-x-(-($\0), $md);
}

@mixin md\:-translate-y-0 {
  @include translate-y-(-($\0), $md);
}

@mixin md\:-translate-x-px {
  @include translate-x-(-($\px), $md);
}

@mixin md\:-translate-y-px {
  @include translate-y-(-($\px), $md);
}

@mixin md\:-translate-x-0\.5 {
  @include translate-x-(-($\0\.5), $md);
}

@mixin md\:-translate-y-0\.5 {
  @include translate-y-(-($\0\.5), $md);
}

@mixin md\:-translate-x-1 {
  @include translate-x-(-($\1), $md);
}

@mixin md\:-translate-y-1 {
  @include translate-y-(-($\1), $md);
}

@mixin md\:-translate-x-1\.5 {
  @include translate-x-(-($\1\.5), $md);
}

@mixin md\:-translate-y-1\.5 {
  @include translate-y-(-($\1\.5), $md);
}

@mixin md\:-translate-x-2 {
  @include translate-x-(-($\2), $md);
}

@mixin md\:-translate-y-2 {
  @include translate-y-(-($\2), $md);
}

@mixin md\:-translate-x-2\.5 {
  @include translate-x-(-($\2\.5), $md);
}

@mixin md\:-translate-y-2\.5 {
  @include translate-y-(-($\2\.5), $md);
}

@mixin md\:-translate-x-3 {
  @include translate-x-(-($\3), $md);
}

@mixin md\:-translate-y-3 {
  @include translate-y-(-($\3), $md);
}

@mixin md\:-translate-x-3\.5 {
  @include translate-x-(-($\3\.5), $md);
}

@mixin md\:-translate-y-3\.5 {
  @include translate-y-(-($\3\.5), $md);
}

@mixin md\:-translate-x-4 {
  @include translate-x-(-($\4), $md);
}

@mixin md\:-translate-y-4 {
  @include translate-y-(-($\4), $md);
}

@mixin md\:-translate-x-5 {
  @include translate-x-(-($\5), $md);
}

@mixin md\:-translate-y-5 {
  @include translate-y-(-($\5), $md);
}

@mixin md\:-translate-x-6 {
  @include translate-x-(-($\6), $md);
}

@mixin md\:-translate-y-6 {
  @include translate-y-(-($\6), $md);
}

@mixin md\:-translate-x-7 {
  @include translate-x-(-($\7), $md);
}

@mixin md\:-translate-y-7 {
  @include translate-y-(-($\7), $md);
}

@mixin md\:-translate-x-8 {
  @include translate-x-(-($\8), $md);
}

@mixin md\:-translate-y-8 {
  @include translate-y-(-($\8), $md);
}

@mixin md\:-translate-x-9 {
  @include translate-x-(-($\9), $md);
}

@mixin md\:-translate-y-9 {
  @include translate-y-(-($\9), $md);
}

@mixin md\:-translate-x-10 {
  @include translate-x-(-($\10), $md);
}

@mixin md\:-translate-y-10 {
  @include translate-y-(-($\10), $md);
}

@mixin md\:-translate-x-11 {
  @include translate-x-(-($\11), $md);
}

@mixin md\:-translate-y-11 {
  @include translate-y-(-($\11), $md);
}

@mixin md\:-translate-x-12 {
  @include translate-x-(-($\12), $md);
}

@mixin md\:-translate-y-12 {
  @include translate-y-(-($\12), $md);
}

@mixin md\:-translate-x-14 {
  @include translate-x-(-($\14), $md);
}

@mixin md\:-translate-y-14 {
  @include translate-y-(-($\14), $md);
}

@mixin md\:-translate-x-16 {
  @include translate-x-(-($\16), $md);
}

@mixin md\:-translate-y-16 {
  @include translate-y-(-($\16), $md);
}

@mixin md\:-translate-x-20 {
  @include translate-x-(-($\20), $md);
}

@mixin md\:-translate-y-20 {
  @include translate-y-(-($\20), $md);
}

@mixin md\:-translate-x-24 {
  @include translate-x-(-($\24), $md);
}

@mixin md\:-translate-y-24 {
  @include translate-y-(-($\24), $md);
}

@mixin md\:-translate-x-28 {
  @include translate-x-(-($\28), $md);
}

@mixin md\:-translate-y-28 {
  @include translate-y-(-($\28), $md);
}

@mixin md\:-translate-x-32 {
  @include translate-x-(-($\32), $md);
}

@mixin md\:-translate-y-32 {
  @include translate-y-(-($\32), $md);
}

@mixin md\:-translate-x-36 {
  @include translate-x-(-($\36), $md);
}

@mixin md\:-translate-y-36 {
  @include translate-y-(-($\36), $md);
}

@mixin md\:-translate-x-40 {
  @include translate-x-(-($\40), $md);
}

@mixin md\:-translate-y-40 {
  @include translate-y-(-($\40), $md);
}

@mixin md\:-translate-x-44 {
  @include translate-x-(-($\44), $md);
}

@mixin md\:-translate-y-44 {
  @include translate-y-(-($\44), $md);
}

@mixin md\:-translate-x-48 {
  @include translate-x-(-($\48), $md);
}

@mixin md\:-translate-y-48 {
  @include translate-y-(-($\48), $md);
}

@mixin md\:-translate-x-52 {
  @include translate-x-(-($\52), $md);
}

@mixin md\:-translate-y-52 {
  @include translate-y-(-($\52), $md);
}

@mixin md\:-translate-x-56 {
  @include translate-x-(-($\56), $md);
}

@mixin md\:-translate-y-56 {
  @include translate-y-(-($\56), $md);
}

@mixin md\:-translate-x-60 {
  @include translate-x-(-($\60), $md);
}

@mixin md\:-translate-y-60 {
  @include translate-y-(-($\60), $md);
}

@mixin md\:-translate-x-64 {
  @include translate-x-(-($\64), $md);
}

@mixin md\:-translate-y-64 {
  @include translate-y-(-($\64), $md);
}

@mixin md\:-translate-x-72 {
  @include translate-x-(-($\72), $md);
}

@mixin md\:-translate-y-72 {
  @include translate-y-(-($\72), $md);
}

@mixin md\:-translate-x-80 {
  @include translate-x-(-($\80), $md);
}

@mixin md\:-translate-y-80 {
  @include translate-y-(-($\80), $md);
}

@mixin md\:-translate-x-96 {
  @include translate-x-(-($\96), $md);
}

@mixin md\:-translate-y-96 {
  @include translate-y-(-($\96), $md);
}

@mixin md\:-translate-x-1\/2 {
  @include translate-x-(-50%, $md);
}

@mixin md\:-translate-x-1\/3 {
  @include translate-x-(-33.333333%, $md);
}

@mixin md\:-translate-x-2\/3 {
  @include translate-x-(-66.666667%, $md);
}

@mixin md\:-translate-x-1\/4 {
  @include translate-x-(-25%, $md);
}

@mixin md\:-translate-x-2\/4 {
  @include translate-x-(-50%, $md);
}

@mixin md\:-translate-x-3\/4 {
  @include translate-x-(-75%, $md);
}

@mixin md\:-translate-x-full {
  @include translate-x-(-100%, $md);
}

@mixin md\:-translate-y-1\/2 {
  @include translate-y-(-50%, $md);
}

@mixin md\:-translate-y-1\/3 {
  @include translate-y-(-33.333333%, $md);
}

@mixin md\:-translate-y-2\/3 {
  @include translate-y-(-66.666667%, $md);
}

@mixin md\:-translate-y-1\/4 {
  @include translate-y-(-25%, $md);
}

@mixin md\:-translate-y-2\/4 {
  @include translate-y-(-50%, $md);
}

@mixin md\:-translate-y-3\/4 {
  @include translate-y-(-75%, $md);
}

@mixin md\:-translate-y-full {
  @include translate-y-(-100%, $md);
}

@mixin lg\:-translate-x-0 {
  @include translate-x-(-($\0), $lg);
}

@mixin lg\:-translate-y-0 {
  @include translate-y-(-($\0), $lg);
}

@mixin lg\:-translate-x-px {
  @include translate-x-(-($\px), $lg);
}

@mixin lg\:-translate-y-px {
  @include translate-y-(-($\px), $lg);
}

@mixin lg\:-translate-x-0\.5 {
  @include translate-x-(-($\0\.5), $lg);
}

@mixin lg\:-translate-y-0\.5 {
  @include translate-y-(-($\0\.5), $lg);
}

@mixin lg\:-translate-x-1 {
  @include translate-x-(-($\1), $lg);
}

@mixin lg\:-translate-y-1 {
  @include translate-y-(-($\1), $lg);
}

@mixin lg\:-translate-x-1\.5 {
  @include translate-x-(-($\1\.5), $lg);
}

@mixin lg\:-translate-y-1\.5 {
  @include translate-y-(-($\1\.5), $lg);
}

@mixin lg\:-translate-x-2 {
  @include translate-x-(-($\2), $lg);
}

@mixin lg\:-translate-y-2 {
  @include translate-y-(-($\2), $lg);
}

@mixin lg\:-translate-x-2\.5 {
  @include translate-x-(-($\2\.5), $lg);
}

@mixin lg\:-translate-y-2\.5 {
  @include translate-y-(-($\2\.5), $lg);
}

@mixin lg\:-translate-x-3 {
  @include translate-x-(-($\3), $lg);
}

@mixin lg\:-translate-y-3 {
  @include translate-y-(-($\3), $lg);
}

@mixin lg\:-translate-x-3\.5 {
  @include translate-x-(-($\3\.5), $lg);
}

@mixin lg\:-translate-y-3\.5 {
  @include translate-y-(-($\3\.5), $lg);
}

@mixin lg\:-translate-x-4 {
  @include translate-x-(-($\4), $lg);
}

@mixin lg\:-translate-y-4 {
  @include translate-y-(-($\4), $lg);
}

@mixin lg\:-translate-x-5 {
  @include translate-x-(-($\5), $lg);
}

@mixin lg\:-translate-y-5 {
  @include translate-y-(-($\5), $lg);
}

@mixin lg\:-translate-x-6 {
  @include translate-x-(-($\6), $lg);
}

@mixin lg\:-translate-y-6 {
  @include translate-y-(-($\6), $lg);
}

@mixin lg\:-translate-x-7 {
  @include translate-x-(-($\7), $lg);
}

@mixin lg\:-translate-y-7 {
  @include translate-y-(-($\7), $lg);
}

@mixin lg\:-translate-x-8 {
  @include translate-x-(-($\8), $lg);
}

@mixin lg\:-translate-y-8 {
  @include translate-y-(-($\8), $lg);
}

@mixin lg\:-translate-x-9 {
  @include translate-x-(-($\9), $lg);
}

@mixin lg\:-translate-y-9 {
  @include translate-y-(-($\9), $lg);
}

@mixin lg\:-translate-x-10 {
  @include translate-x-(-($\10), $lg);
}

@mixin lg\:-translate-y-10 {
  @include translate-y-(-($\10), $lg);
}

@mixin lg\:-translate-x-11 {
  @include translate-x-(-($\11), $lg);
}

@mixin lg\:-translate-y-11 {
  @include translate-y-(-($\11), $lg);
}

@mixin lg\:-translate-x-12 {
  @include translate-x-(-($\12), $lg);
}

@mixin lg\:-translate-y-12 {
  @include translate-y-(-($\12), $lg);
}

@mixin lg\:-translate-x-14 {
  @include translate-x-(-($\14), $lg);
}

@mixin lg\:-translate-y-14 {
  @include translate-y-(-($\14), $lg);
}

@mixin lg\:-translate-x-16 {
  @include translate-x-(-($\16), $lg);
}

@mixin lg\:-translate-y-16 {
  @include translate-y-(-($\16), $lg);
}

@mixin lg\:-translate-x-20 {
  @include translate-x-(-($\20), $lg);
}

@mixin lg\:-translate-y-20 {
  @include translate-y-(-($\20), $lg);
}

@mixin lg\:-translate-x-24 {
  @include translate-x-(-($\24), $lg);
}

@mixin lg\:-translate-y-24 {
  @include translate-y-(-($\24), $lg);
}

@mixin lg\:-translate-x-28 {
  @include translate-x-(-($\28), $lg);
}

@mixin lg\:-translate-y-28 {
  @include translate-y-(-($\28), $lg);
}

@mixin lg\:-translate-x-32 {
  @include translate-x-(-($\32), $lg);
}

@mixin lg\:-translate-y-32 {
  @include translate-y-(-($\32), $lg);
}

@mixin lg\:-translate-x-36 {
  @include translate-x-(-($\36), $lg);
}

@mixin lg\:-translate-y-36 {
  @include translate-y-(-($\36), $lg);
}

@mixin lg\:-translate-x-40 {
  @include translate-x-(-($\40), $lg);
}

@mixin lg\:-translate-y-40 {
  @include translate-y-(-($\40), $lg);
}

@mixin lg\:-translate-x-44 {
  @include translate-x-(-($\44), $lg);
}

@mixin lg\:-translate-y-44 {
  @include translate-y-(-($\44), $lg);
}

@mixin lg\:-translate-x-48 {
  @include translate-x-(-($\48), $lg);
}

@mixin lg\:-translate-y-48 {
  @include translate-y-(-($\48), $lg);
}

@mixin lg\:-translate-x-52 {
  @include translate-x-(-($\52), $lg);
}

@mixin lg\:-translate-y-52 {
  @include translate-y-(-($\52), $lg);
}

@mixin lg\:-translate-x-56 {
  @include translate-x-(-($\56), $lg);
}

@mixin lg\:-translate-y-56 {
  @include translate-y-(-($\56), $lg);
}

@mixin lg\:-translate-x-60 {
  @include translate-x-(-($\60), $lg);
}

@mixin lg\:-translate-y-60 {
  @include translate-y-(-($\60), $lg);
}

@mixin lg\:-translate-x-64 {
  @include translate-x-(-($\64), $lg);
}

@mixin lg\:-translate-y-64 {
  @include translate-y-(-($\64), $lg);
}

@mixin lg\:-translate-x-72 {
  @include translate-x-(-($\72), $lg);
}

@mixin lg\:-translate-y-72 {
  @include translate-y-(-($\72), $lg);
}

@mixin lg\:-translate-x-80 {
  @include translate-x-(-($\80), $lg);
}

@mixin lg\:-translate-y-80 {
  @include translate-y-(-($\80), $lg);
}

@mixin lg\:-translate-x-96 {
  @include translate-x-(-($\96), $lg);
}

@mixin lg\:-translate-y-96 {
  @include translate-y-(-($\96), $lg);
}

@mixin lg\:-translate-x-1\/2 {
  @include translate-x-(-50%, $lg);
}

@mixin lg\:-translate-x-1\/3 {
  @include translate-x-(-33.333333%, $lg);
}

@mixin lg\:-translate-x-2\/3 {
  @include translate-x-(-66.666667%, $lg);
}

@mixin lg\:-translate-x-1\/4 {
  @include translate-x-(-25%, $lg);
}

@mixin lg\:-translate-x-2\/4 {
  @include translate-x-(-50%, $lg);
}

@mixin lg\:-translate-x-3\/4 {
  @include translate-x-(-75%, $lg);
}

@mixin lg\:-translate-x-full {
  @include translate-x-(-100%, $lg);
}

@mixin lg\:-translate-y-1\/2 {
  @include translate-y-(-50%, $lg);
}

@mixin lg\:-translate-y-1\/3 {
  @include translate-y-(-33.333333%, $lg);
}

@mixin lg\:-translate-y-2\/3 {
  @include translate-y-(-66.666667%, $lg);
}

@mixin lg\:-translate-y-1\/4 {
  @include translate-y-(-25%, $lg);
}

@mixin lg\:-translate-y-2\/4 {
  @include translate-y-(-50%, $lg);
}

@mixin lg\:-translate-y-3\/4 {
  @include translate-y-(-75%, $lg);
}

@mixin lg\:-translate-y-full {
  @include translate-y-(-100%, $lg);
}

@mixin xl\:-translate-x-0 {
  @include translate-x-(-($\0), $xl);
}

@mixin xl\:-translate-y-0 {
  @include translate-y-(-($\0), $xl);
}

@mixin xl\:-translate-x-px {
  @include translate-x-(-($\px), $xl);
}

@mixin xl\:-translate-y-px {
  @include translate-y-(-($\px), $xl);
}

@mixin xl\:-translate-x-0\.5 {
  @include translate-x-(-($\0\.5), $xl);
}

@mixin xl\:-translate-y-0\.5 {
  @include translate-y-(-($\0\.5), $xl);
}

@mixin xl\:-translate-x-1 {
  @include translate-x-(-($\1), $xl);
}

@mixin xl\:-translate-y-1 {
  @include translate-y-(-($\1), $xl);
}

@mixin xl\:-translate-x-1\.5 {
  @include translate-x-(-($\1\.5), $xl);
}

@mixin xl\:-translate-y-1\.5 {
  @include translate-y-(-($\1\.5), $xl);
}

@mixin xl\:-translate-x-2 {
  @include translate-x-(-($\2), $xl);
}

@mixin xl\:-translate-y-2 {
  @include translate-y-(-($\2), $xl);
}

@mixin xl\:-translate-x-2\.5 {
  @include translate-x-(-($\2\.5), $xl);
}

@mixin xl\:-translate-y-2\.5 {
  @include translate-y-(-($\2\.5), $xl);
}

@mixin xl\:-translate-x-3 {
  @include translate-x-(-($\3), $xl);
}

@mixin xl\:-translate-y-3 {
  @include translate-y-(-($\3), $xl);
}

@mixin xl\:-translate-x-3\.5 {
  @include translate-x-(-($\3\.5), $xl);
}

@mixin xl\:-translate-y-3\.5 {
  @include translate-y-(-($\3\.5), $xl);
}

@mixin xl\:-translate-x-4 {
  @include translate-x-(-($\4), $xl);
}

@mixin xl\:-translate-y-4 {
  @include translate-y-(-($\4), $xl);
}

@mixin xl\:-translate-x-5 {
  @include translate-x-(-($\5), $xl);
}

@mixin xl\:-translate-y-5 {
  @include translate-y-(-($\5), $xl);
}

@mixin xl\:-translate-x-6 {
  @include translate-x-(-($\6), $xl);
}

@mixin xl\:-translate-y-6 {
  @include translate-y-(-($\6), $xl);
}

@mixin xl\:-translate-x-7 {
  @include translate-x-(-($\7), $xl);
}

@mixin xl\:-translate-y-7 {
  @include translate-y-(-($\7), $xl);
}

@mixin xl\:-translate-x-8 {
  @include translate-x-(-($\8), $xl);
}

@mixin xl\:-translate-y-8 {
  @include translate-y-(-($\8), $xl);
}

@mixin xl\:-translate-x-9 {
  @include translate-x-(-($\9), $xl);
}

@mixin xl\:-translate-y-9 {
  @include translate-y-(-($\9), $xl);
}

@mixin xl\:-translate-x-10 {
  @include translate-x-(-($\10), $xl);
}

@mixin xl\:-translate-y-10 {
  @include translate-y-(-($\10), $xl);
}

@mixin xl\:-translate-x-11 {
  @include translate-x-(-($\11), $xl);
}

@mixin xl\:-translate-y-11 {
  @include translate-y-(-($\11), $xl);
}

@mixin xl\:-translate-x-12 {
  @include translate-x-(-($\12), $xl);
}

@mixin xl\:-translate-y-12 {
  @include translate-y-(-($\12), $xl);
}

@mixin xl\:-translate-x-14 {
  @include translate-x-(-($\14), $xl);
}

@mixin xl\:-translate-y-14 {
  @include translate-y-(-($\14), $xl);
}

@mixin xl\:-translate-x-16 {
  @include translate-x-(-($\16), $xl);
}

@mixin xl\:-translate-y-16 {
  @include translate-y-(-($\16), $xl);
}

@mixin xl\:-translate-x-20 {
  @include translate-x-(-($\20), $xl);
}

@mixin xl\:-translate-y-20 {
  @include translate-y-(-($\20), $xl);
}

@mixin xl\:-translate-x-24 {
  @include translate-x-(-($\24), $xl);
}

@mixin xl\:-translate-y-24 {
  @include translate-y-(-($\24), $xl);
}

@mixin xl\:-translate-x-28 {
  @include translate-x-(-($\28), $xl);
}

@mixin xl\:-translate-y-28 {
  @include translate-y-(-($\28), $xl);
}

@mixin xl\:-translate-x-32 {
  @include translate-x-(-($\32), $xl);
}

@mixin xl\:-translate-y-32 {
  @include translate-y-(-($\32), $xl);
}

@mixin xl\:-translate-x-36 {
  @include translate-x-(-($\36), $xl);
}

@mixin xl\:-translate-y-36 {
  @include translate-y-(-($\36), $xl);
}

@mixin xl\:-translate-x-40 {
  @include translate-x-(-($\40), $xl);
}

@mixin xl\:-translate-y-40 {
  @include translate-y-(-($\40), $xl);
}

@mixin xl\:-translate-x-44 {
  @include translate-x-(-($\44), $xl);
}

@mixin xl\:-translate-y-44 {
  @include translate-y-(-($\44), $xl);
}

@mixin xl\:-translate-x-48 {
  @include translate-x-(-($\48), $xl);
}

@mixin xl\:-translate-y-48 {
  @include translate-y-(-($\48), $xl);
}

@mixin xl\:-translate-x-52 {
  @include translate-x-(-($\52), $xl);
}

@mixin xl\:-translate-y-52 {
  @include translate-y-(-($\52), $xl);
}

@mixin xl\:-translate-x-56 {
  @include translate-x-(-($\56), $xl);
}

@mixin xl\:-translate-y-56 {
  @include translate-y-(-($\56), $xl);
}

@mixin xl\:-translate-x-60 {
  @include translate-x-(-($\60), $xl);
}

@mixin xl\:-translate-y-60 {
  @include translate-y-(-($\60), $xl);
}

@mixin xl\:-translate-x-64 {
  @include translate-x-(-($\64), $xl);
}

@mixin xl\:-translate-y-64 {
  @include translate-y-(-($\64), $xl);
}

@mixin xl\:-translate-x-72 {
  @include translate-x-(-($\72), $xl);
}

@mixin xl\:-translate-y-72 {
  @include translate-y-(-($\72), $xl);
}

@mixin xl\:-translate-x-80 {
  @include translate-x-(-($\80), $xl);
}

@mixin xl\:-translate-y-80 {
  @include translate-y-(-($\80), $xl);
}

@mixin xl\:-translate-x-96 {
  @include translate-x-(-($\96), $xl);
}

@mixin xl\:-translate-y-96 {
  @include translate-y-(-($\96), $xl);
}

@mixin xl\:-translate-x-1\/2 {
  @include translate-x-(-50%, $xl);
}

@mixin xl\:-translate-x-1\/3 {
  @include translate-x-(-33.333333%, $xl);
}

@mixin xl\:-translate-x-2\/3 {
  @include translate-x-(-66.666667%, $xl);
}

@mixin xl\:-translate-x-1\/4 {
  @include translate-x-(-25%, $xl);
}

@mixin xl\:-translate-x-2\/4 {
  @include translate-x-(-50%, $xl);
}

@mixin xl\:-translate-x-3\/4 {
  @include translate-x-(-75%, $xl);
}

@mixin xl\:-translate-x-full {
  @include translate-x-(-100%, $xl);
}

@mixin xl\:-translate-y-1\/2 {
  @include translate-y-(-50%, $xl);
}

@mixin xl\:-translate-y-1\/3 {
  @include translate-y-(-33.333333%, $xl);
}

@mixin xl\:-translate-y-2\/3 {
  @include translate-y-(-66.666667%, $xl);
}

@mixin xl\:-translate-y-1\/4 {
  @include translate-y-(-25%, $xl);
}

@mixin xl\:-translate-y-2\/4 {
  @include translate-y-(-50%, $xl);
}

@mixin xl\:-translate-y-3\/4 {
  @include translate-y-(-75%, $xl);
}

@mixin xl\:-translate-y-full {
  @include translate-y-(-100%, $xl);
}

@mixin \2xl\:-translate-x-0 {
  @include translate-x-(-($\0), $\2xl);
}

@mixin \2xl\:-translate-y-0 {
  @include translate-y-(-($\0), $\2xl);
}

@mixin \2xl\:-translate-x-px {
  @include translate-x-(-($\px), $\2xl);
}

@mixin \2xl\:-translate-y-px {
  @include translate-y-(-($\px), $\2xl);
}

@mixin \2xl\:-translate-x-0\.5 {
  @include translate-x-(-($\0\.5), $\2xl);
}

@mixin \2xl\:-translate-y-0\.5 {
  @include translate-y-(-($\0\.5), $\2xl);
}

@mixin \2xl\:-translate-x-1 {
  @include translate-x-(-($\1), $\2xl);
}

@mixin \2xl\:-translate-y-1 {
  @include translate-y-(-($\1), $\2xl);
}

@mixin \2xl\:-translate-x-1\.5 {
  @include translate-x-(-($\1\.5), $\2xl);
}

@mixin \2xl\:-translate-y-1\.5 {
  @include translate-y-(-($\1\.5), $\2xl);
}

@mixin \2xl\:-translate-x-2 {
  @include translate-x-(-($\2), $\2xl);
}

@mixin \2xl\:-translate-y-2 {
  @include translate-y-(-($\2), $\2xl);
}

@mixin \2xl\:-translate-x-2\.5 {
  @include translate-x-(-($\2\.5), $\2xl);
}

@mixin \2xl\:-translate-y-2\.5 {
  @include translate-y-(-($\2\.5), $\2xl);
}

@mixin \2xl\:-translate-x-3 {
  @include translate-x-(-($\3), $\2xl);
}

@mixin \2xl\:-translate-y-3 {
  @include translate-y-(-($\3), $\2xl);
}

@mixin \2xl\:-translate-x-3\.5 {
  @include translate-x-(-($\3\.5), $\2xl);
}

@mixin \2xl\:-translate-y-3\.5 {
  @include translate-y-(-($\3\.5), $\2xl);
}

@mixin \2xl\:-translate-x-4 {
  @include translate-x-(-($\4), $\2xl);
}

@mixin \2xl\:-translate-y-4 {
  @include translate-y-(-($\4), $\2xl);
}

@mixin \2xl\:-translate-x-5 {
  @include translate-x-(-($\5), $\2xl);
}

@mixin \2xl\:-translate-y-5 {
  @include translate-y-(-($\5), $\2xl);
}

@mixin \2xl\:-translate-x-6 {
  @include translate-x-(-($\6), $\2xl);
}

@mixin \2xl\:-translate-y-6 {
  @include translate-y-(-($\6), $\2xl);
}

@mixin \2xl\:-translate-x-7 {
  @include translate-x-(-($\7), $\2xl);
}

@mixin \2xl\:-translate-y-7 {
  @include translate-y-(-($\7), $\2xl);
}

@mixin \2xl\:-translate-x-8 {
  @include translate-x-(-($\8), $\2xl);
}

@mixin \2xl\:-translate-y-8 {
  @include translate-y-(-($\8), $\2xl);
}

@mixin \2xl\:-translate-x-9 {
  @include translate-x-(-($\9), $\2xl);
}

@mixin \2xl\:-translate-y-9 {
  @include translate-y-(-($\9), $\2xl);
}

@mixin \2xl\:-translate-x-10 {
  @include translate-x-(-($\10), $\2xl);
}

@mixin \2xl\:-translate-y-10 {
  @include translate-y-(-($\10), $\2xl);
}

@mixin \2xl\:-translate-x-11 {
  @include translate-x-(-($\11), $\2xl);
}

@mixin \2xl\:-translate-y-11 {
  @include translate-y-(-($\11), $\2xl);
}

@mixin \2xl\:-translate-x-12 {
  @include translate-x-(-($\12), $\2xl);
}

@mixin \2xl\:-translate-y-12 {
  @include translate-y-(-($\12), $\2xl);
}

@mixin \2xl\:-translate-x-14 {
  @include translate-x-(-($\14), $\2xl);
}

@mixin \2xl\:-translate-y-14 {
  @include translate-y-(-($\14), $\2xl);
}

@mixin \2xl\:-translate-x-16 {
  @include translate-x-(-($\16), $\2xl);
}

@mixin \2xl\:-translate-y-16 {
  @include translate-y-(-($\16), $\2xl);
}

@mixin \2xl\:-translate-x-20 {
  @include translate-x-(-($\20), $\2xl);
}

@mixin \2xl\:-translate-y-20 {
  @include translate-y-(-($\20), $\2xl);
}

@mixin \2xl\:-translate-x-24 {
  @include translate-x-(-($\24), $\2xl);
}

@mixin \2xl\:-translate-y-24 {
  @include translate-y-(-($\24), $\2xl);
}

@mixin \2xl\:-translate-x-28 {
  @include translate-x-(-($\28), $\2xl);
}

@mixin \2xl\:-translate-y-28 {
  @include translate-y-(-($\28), $\2xl);
}

@mixin \2xl\:-translate-x-32 {
  @include translate-x-(-($\32), $\2xl);
}

@mixin \2xl\:-translate-y-32 {
  @include translate-y-(-($\32), $\2xl);
}

@mixin \2xl\:-translate-x-36 {
  @include translate-x-(-($\36), $\2xl);
}

@mixin \2xl\:-translate-y-36 {
  @include translate-y-(-($\36), $\2xl);
}

@mixin \2xl\:-translate-x-40 {
  @include translate-x-(-($\40), $\2xl);
}

@mixin \2xl\:-translate-y-40 {
  @include translate-y-(-($\40), $\2xl);
}

@mixin \2xl\:-translate-x-44 {
  @include translate-x-(-($\44), $\2xl);
}

@mixin \2xl\:-translate-y-44 {
  @include translate-y-(-($\44), $\2xl);
}

@mixin \2xl\:-translate-x-48 {
  @include translate-x-(-($\48), $\2xl);
}

@mixin \2xl\:-translate-y-48 {
  @include translate-y-(-($\48), $\2xl);
}

@mixin \2xl\:-translate-x-52 {
  @include translate-x-(-($\52), $\2xl);
}

@mixin \2xl\:-translate-y-52 {
  @include translate-y-(-($\52), $\2xl);
}

@mixin \2xl\:-translate-x-56 {
  @include translate-x-(-($\56), $\2xl);
}

@mixin \2xl\:-translate-y-56 {
  @include translate-y-(-($\56), $\2xl);
}

@mixin \2xl\:-translate-x-60 {
  @include translate-x-(-($\60), $\2xl);
}

@mixin \2xl\:-translate-y-60 {
  @include translate-y-(-($\60), $\2xl);
}

@mixin \2xl\:-translate-x-64 {
  @include translate-x-(-($\64), $\2xl);
}

@mixin \2xl\:-translate-y-64 {
  @include translate-y-(-($\64), $\2xl);
}

@mixin \2xl\:-translate-x-72 {
  @include translate-x-(-($\72), $\2xl);
}

@mixin \2xl\:-translate-y-72 {
  @include translate-y-(-($\72), $\2xl);
}

@mixin \2xl\:-translate-x-80 {
  @include translate-x-(-($\80), $\2xl);
}

@mixin \2xl\:-translate-y-80 {
  @include translate-y-(-($\80), $\2xl);
}

@mixin \2xl\:-translate-x-96 {
  @include translate-x-(-($\96), $\2xl);
}

@mixin \2xl\:-translate-y-96 {
  @include translate-y-(-($\96), $\2xl);
}

@mixin \2xl\:-translate-x-1\/2 {
  @include translate-x-(-50%, $\2xl);
}

@mixin \2xl\:-translate-x-1\/3 {
  @include translate-x-(-33.333333%, $\2xl);
}

@mixin \2xl\:-translate-x-2\/3 {
  @include translate-x-(-66.666667%, $\2xl);
}

@mixin \2xl\:-translate-x-1\/4 {
  @include translate-x-(-25%, $\2xl);
}

@mixin \2xl\:-translate-x-2\/4 {
  @include translate-x-(-50%, $\2xl);
}

@mixin \2xl\:-translate-x-3\/4 {
  @include translate-x-(-75%, $\2xl);
}

@mixin \2xl\:-translate-x-full {
  @include translate-x-(-100%, $\2xl);
}

@mixin \2xl\:-translate-y-1\/2 {
  @include translate-y-(-50%, $\2xl);
}

@mixin \2xl\:-translate-y-1\/3 {
  @include translate-y-(-33.333333%, $\2xl);
}

@mixin \2xl\:-translate-y-2\/3 {
  @include translate-y-(-66.666667%, $\2xl);
}

@mixin \2xl\:-translate-y-1\/4 {
  @include translate-y-(-25%, $\2xl);
}

@mixin \2xl\:-translate-y-2\/4 {
  @include translate-y-(-50%, $\2xl);
}

@mixin \2xl\:-translate-y-3\/4 {
  @include translate-y-(-75%, $\2xl);
}

@mixin \2xl\:-translate-y-full {
  @include translate-y-(-100%, $\2xl);
}

@mixin -translate-x-($v) {
  @include translate-x-(-($v));
}

@mixin -translate-y-($v) {
  @include translate-y-(-($v));
}

@mixin sm\:-translate-x-($v) {
  @include translate-x-(-($v), $sm);
}

@mixin sm\:-translate-y-($v) {
  @include translate-y-(-($v), $sm);
}

@mixin md\:-translate-x-($v) {
  @include translate-x-(-($v), $md);
}

@mixin md\:-translate-y-($v) {
  @include translate-y-(-($v), $md);
}

@mixin lg\:-translate-x-($v) {
  @include translate-x-(-($v), $lg);
}

@mixin lg\:-translate-y-($v) {
  @include translate-y-(-($v), $lg);
}

@mixin xl\:-translate-x-($v) {
  @include translate-x-(-($v), $xl);
}

@mixin xl\:-translate-y-($v) {
  @include translate-y-(-($v), $xl);
}

@mixin \2xl\:-translate-x-($v) {
  @include translate-x-(-($v), $\2xl);
}

@mixin \2xl\:-translate-y-($v) {
  @include translate-y-(-($v), $\2xl);
}

@include describe("12.Transforms") {
  @include describe("Translate") {
    @include describe("Basic") {
      @include it("translate-x-0") {
        @include assert {
          @include output {
            @include translate-x-0;
            @include reset;
          }

          @include expect {
            transform: translate(0px, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-0") {
        @include assert {
          @include output {
            @include translate-y-0;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0px) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-px") {
        @include assert {
          @include output {
            @include translate-x-px;
            @include reset;
          }

          @include expect {
            transform: translate(1px, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-px") {
        @include assert {
          @include output {
            @include translate-y-px;
            @include reset;
          }

          @include expect {
            transform: translate(0, 1px) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-0\.5") {
        @include assert {
          @include output {
            @include translate-x-0\.5;
            @include reset;
          }

          @include expect {
            transform: translate(0.125rem, 0) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-0\.5") {
        @include assert {
          @include output {
            @include translate-y-0\.5;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0.125rem) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-1") {
        @include assert {
          @include output {
            @include translate-x-1;
            @include reset;
          }

          @include expect {
            transform: translate(0.25rem, 0) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-1") {
        @include assert {
          @include output {
            @include translate-y-1;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0.25rem) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-1\.5") {
        @include assert {
          @include output {
            @include translate-x-1\.5;
            @include reset;
          }

          @include expect {
            transform: translate(0.375rem, 0) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-1\.5") {
        @include assert {
          @include output {
            @include translate-y-1\.5;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0.375rem) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-2") {
        @include assert {
          @include output {
            @include translate-x-2;
            @include reset;
          }

          @include expect {
            transform: translate(0.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-2") {
        @include assert {
          @include output {
            @include translate-y-2;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0.5rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-2\.5") {
        @include assert {
          @include output {
            @include translate-x-2\.5;
            @include reset;
          }

          @include expect {
            transform: translate(0.625rem, 0) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-2\.5") {
        @include assert {
          @include output {
            @include translate-y-2\.5;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0.625rem) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-3") {
        @include assert {
          @include output {
            @include translate-x-3;
            @include reset;
          }

          @include expect {
            transform: translate(0.75rem, 0) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-3") {
        @include assert {
          @include output {
            @include translate-y-3;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0.75rem) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-3\.5") {
        @include assert {
          @include output {
            @include translate-x-3\.5;
            @include reset;
          }

          @include expect {
            transform: translate(0.875rem, 0) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-3\.5") {
        @include assert {
          @include output {
            @include translate-y-3\.5;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0.875rem) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-4") {
        @include assert {
          @include output {
            @include translate-x-4;
            @include reset;
          }

          @include expect {
            transform: translate(1rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-4") {
        @include assert {
          @include output {
            @include translate-y-4;
            @include reset;
          }

          @include expect {
            transform: translate(0, 1rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-5") {
        @include assert {
          @include output {
            @include translate-x-5;
            @include reset;
          }

          @include expect {
            transform: translate(1.25rem, 0) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-5") {
        @include assert {
          @include output {
            @include translate-y-5;
            @include reset;
          }

          @include expect {
            transform: translate(0, 1.25rem) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-6") {
        @include assert {
          @include output {
            @include translate-x-6;
            @include reset;
          }

          @include expect {
            transform: translate(1.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-6") {
        @include assert {
          @include output {
            @include translate-y-6;
            @include reset;
          }

          @include expect {
            transform: translate(0, 1.5rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-7") {
        @include assert {
          @include output {
            @include translate-x-7;
            @include reset;
          }

          @include expect {
            transform: translate(1.75rem, 0) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-7") {
        @include assert {
          @include output {
            @include translate-y-7;
            @include reset;
          }

          @include expect {
            transform: translate(0, 1.75rem) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-8") {
        @include assert {
          @include output {
            @include translate-x-8;
            @include reset;
          }

          @include expect {
            transform: translate(2rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-8") {
        @include assert {
          @include output {
            @include translate-y-8;
            @include reset;
          }

          @include expect {
            transform: translate(0, 2rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-9") {
        @include assert {
          @include output {
            @include translate-x-9;
            @include reset;
          }

          @include expect {
            transform: translate(2.25rem, 0) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-9") {
        @include assert {
          @include output {
            @include translate-y-9;
            @include reset;
          }

          @include expect {
            transform: translate(0, 2.25rem) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-10") {
        @include assert {
          @include output {
            @include translate-x-10;
            @include reset;
          }

          @include expect {
            transform: translate(2.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-10") {
        @include assert {
          @include output {
            @include translate-y-10;
            @include reset;
          }

          @include expect {
            transform: translate(0, 2.5rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-11") {
        @include assert {
          @include output {
            @include translate-x-11;
            @include reset;
          }

          @include expect {
            transform: translate(2.75rem, 0) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-11") {
        @include assert {
          @include output {
            @include translate-y-11;
            @include reset;
          }

          @include expect {
            transform: translate(0, 2.75rem) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-12") {
        @include assert {
          @include output {
            @include translate-x-12;
            @include reset;
          }

          @include expect {
            transform: translate(3rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-12") {
        @include assert {
          @include output {
            @include translate-y-12;
            @include reset;
          }

          @include expect {
            transform: translate(0, 3rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-14") {
        @include assert {
          @include output {
            @include translate-x-14;
            @include reset;
          }

          @include expect {
            transform: translate(3.5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-14") {
        @include assert {
          @include output {
            @include translate-y-14;
            @include reset;
          }

          @include expect {
            transform: translate(0, 3.5rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-16") {
        @include assert {
          @include output {
            @include translate-x-16;
            @include reset;
          }

          @include expect {
            transform: translate(4rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-16") {
        @include assert {
          @include output {
            @include translate-y-16;
            @include reset;
          }

          @include expect {
            transform: translate(0, 4rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-20") {
        @include assert {
          @include output {
            @include translate-x-20;
            @include reset;
          }

          @include expect {
            transform: translate(5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-20") {
        @include assert {
          @include output {
            @include translate-y-20;
            @include reset;
          }

          @include expect {
            transform: translate(0, 5rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-24") {
        @include assert {
          @include output {
            @include translate-x-24;
            @include reset;
          }

          @include expect {
            transform: translate(6rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-24") {
        @include assert {
          @include output {
            @include translate-y-24;
            @include reset;
          }

          @include expect {
            transform: translate(0, 6rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-28") {
        @include assert {
          @include output {
            @include translate-x-28;
            @include reset;
          }

          @include expect {
            transform: translate(7rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-28") {
        @include assert {
          @include output {
            @include translate-y-28;
            @include reset;
          }

          @include expect {
            transform: translate(0, 7rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-32") {
        @include assert {
          @include output {
            @include translate-x-32;
            @include reset;
          }

          @include expect {
            transform: translate(8rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-32") {
        @include assert {
          @include output {
            @include translate-y-32;
            @include reset;
          }

          @include expect {
            transform: translate(0, 8rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-36") {
        @include assert {
          @include output {
            @include translate-x-36;
            @include reset;
          }

          @include expect {
            transform: translate(9rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-36") {
        @include assert {
          @include output {
            @include translate-y-36;
            @include reset;
          }

          @include expect {
            transform: translate(0, 9rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-40") {
        @include assert {
          @include output {
            @include translate-x-40;
            @include reset;
          }

          @include expect {
            transform: translate(10rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-40") {
        @include assert {
          @include output {
            @include translate-y-40;
            @include reset;
          }

          @include expect {
            transform: translate(0, 10rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-44") {
        @include assert {
          @include output {
            @include translate-x-44;
            @include reset;
          }

          @include expect {
            transform: translate(11rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-44") {
        @include assert {
          @include output {
            @include translate-y-44;
            @include reset;
          }

          @include expect {
            transform: translate(0, 11rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-48") {
        @include assert {
          @include output {
            @include translate-x-48;
            @include reset;
          }

          @include expect {
            transform: translate(12rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-48") {
        @include assert {
          @include output {
            @include translate-y-48;
            @include reset;
          }

          @include expect {
            transform: translate(0, 12rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-52") {
        @include assert {
          @include output {
            @include translate-x-52;
            @include reset;
          }

          @include expect {
            transform: translate(13rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-52") {
        @include assert {
          @include output {
            @include translate-y-52;
            @include reset;
          }

          @include expect {
            transform: translate(0, 13rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-56") {
        @include assert {
          @include output {
            @include translate-x-56;
            @include reset;
          }

          @include expect {
            transform: translate(14rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-56") {
        @include assert {
          @include output {
            @include translate-y-56;
            @include reset;
          }

          @include expect {
            transform: translate(0, 14rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-60") {
        @include assert {
          @include output {
            @include translate-x-60;
            @include reset;
          }

          @include expect {
            transform: translate(15rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-60") {
        @include assert {
          @include output {
            @include translate-y-60;
            @include reset;
          }

          @include expect {
            transform: translate(0, 15rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-64") {
        @include assert {
          @include output {
            @include translate-x-64;
            @include reset;
          }

          @include expect {
            transform: translate(16rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-64") {
        @include assert {
          @include output {
            @include translate-y-64;
            @include reset;
          }

          @include expect {
            transform: translate(0, 16rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-72") {
        @include assert {
          @include output {
            @include translate-x-72;
            @include reset;
          }

          @include expect {
            transform: translate(18rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-72") {
        @include assert {
          @include output {
            @include translate-y-72;
            @include reset;
          }

          @include expect {
            transform: translate(0, 18rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-80") {
        @include assert {
          @include output {
            @include translate-x-80;
            @include reset;
          }

          @include expect {
            transform: translate(20rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-80") {
        @include assert {
          @include output {
            @include translate-y-80;
            @include reset;
          }

          @include expect {
            transform: translate(0, 20rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-96") {
        @include assert {
          @include output {
            @include translate-x-96;
            @include reset;
          }

          @include expect {
            transform: translate(24rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-96") {
        @include assert {
          @include output {
            @include translate-y-96;
            @include reset;
          }

          @include expect {
            transform: translate(0, 24rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-1\/2") {
        @include assert {
          @include output {
            @include translate-x-1\/2;
            @include reset;
          }

          @include expect {
            transform: translate(50%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-1\/3") {
        @include assert {
          @include output {
            @include translate-x-1\/3;
            @include reset;
          }

          @include expect {
            transform: translate(33.333333%, 0) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-2\/3") {
        @include assert {
          @include output {
            @include translate-x-2\/3;
            @include reset;
          }

          @include expect {
            transform: translate(66.666667%, 0) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-1\/4") {
        @include assert {
          @include output {
            @include translate-x-1\/4;
            @include reset;
          }

          @include expect {
            transform: translate(25%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-2\/4") {
        @include assert {
          @include output {
            @include translate-x-2\/4;
            @include reset;
          }

          @include expect {
            transform: translate(50%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-3\/4") {
        @include assert {
          @include output {
            @include translate-x-3\/4;
            @include reset;
          }

          @include expect {
            transform: translate(75%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-x-full") {
        @include assert {
          @include output {
            @include translate-x-full;
            @include reset;
          }

          @include expect {
            transform: translate(100%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-1\/2") {
        @include assert {
          @include output {
            @include translate-y-1\/2;
            @include reset;
          }

          @include expect {
            transform: translate(0, 50%) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-1\/3") {
        @include assert {
          @include output {
            @include translate-y-1\/3;
            @include reset;
          }

          @include expect {
            transform: translate(0, 33.333333%) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-2\/3") {
        @include assert {
          @include output {
            @include translate-y-2\/3;
            @include reset;
          }

          @include expect {
            transform: translate(0, 66.666667%) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-1\/4") {
        @include assert {
          @include output {
            @include translate-y-1\/4;
            @include reset;
          }

          @include expect {
            transform: translate(0, 25%) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-2\/4") {
        @include assert {
          @include output {
            @include translate-y-2\/4;
            @include reset;
          }

          @include expect {
            transform: translate(0, 50%) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-3\/4") {
        @include assert {
          @include output {
            @include translate-y-3\/4;
            @include reset;
          }

          @include expect {
            transform: translate(0, 75%) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-full") {
        @include assert {
          @include output {
            @include translate-y-full;
            @include reset;
          }

          @include expect {
            transform: translate(0, 100%) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-0") {
        @include assert {
          @include output {
            @include -translate-x-0;
            @include reset;
          }

          @include expect {
            transform: translate(-0px, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-0") {
        @include assert {
          @include output {
            @include -translate-y-0;
            @include reset;
          }

          @include expect {
            transform: translate(0, -0px) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-px") {
        @include assert {
          @include output {
            @include -translate-x-px;
            @include reset;
          }

          @include expect {
            transform: translate(-1px, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-px") {
        @include assert {
          @include output {
            @include -translate-y-px;
            @include reset;
          }

          @include expect {
            transform: translate(0, -1px) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-0\.5") {
        @include assert {
          @include output {
            @include -translate-x-0\.5;
            @include reset;
          }

          @include expect {
            transform: translate(-0.125rem, 0) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-0\.5") {
        @include assert {
          @include output {
            @include -translate-y-0\.5;
            @include reset;
          }

          @include expect {
            transform: translate(0, -0.125rem) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-1") {
        @include assert {
          @include output {
            @include -translate-x-1;
            @include reset;
          }

          @include expect {
            transform: translate(-0.25rem, 0) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-1") {
        @include assert {
          @include output {
            @include -translate-y-1;
            @include reset;
          }

          @include expect {
            transform: translate(0, -0.25rem) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-1\.5") {
        @include assert {
          @include output {
            @include -translate-x-1\.5;
            @include reset;
          }

          @include expect {
            transform: translate(-0.375rem, 0) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-1\.5") {
        @include assert {
          @include output {
            @include -translate-y-1\.5;
            @include reset;
          }

          @include expect {
            transform: translate(0, -0.375rem) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-2") {
        @include assert {
          @include output {
            @include -translate-x-2;
            @include reset;
          }

          @include expect {
            transform: translate(-0.5rem, 0) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-2") {
        @include assert {
          @include output {
            @include -translate-y-2;
            @include reset;
          }

          @include expect {
            transform: translate(0, -0.5rem) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-2\.5") {
        @include assert {
          @include output {
            @include -translate-x-2\.5;
            @include reset;
          }

          @include expect {
            transform: translate(-0.625rem, 0) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-2\.5") {
        @include assert {
          @include output {
            @include -translate-y-2\.5;
            @include reset;
          }

          @include expect {
            transform: translate(0, -0.625rem) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-3") {
        @include assert {
          @include output {
            @include -translate-x-3;
            @include reset;
          }

          @include expect {
            transform: translate(-0.75rem, 0) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-3") {
        @include assert {
          @include output {
            @include -translate-y-3;
            @include reset;
          }

          @include expect {
            transform: translate(0, -0.75rem) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-3\.5") {
        @include assert {
          @include output {
            @include -translate-x-3\.5;
            @include reset;
          }

          @include expect {
            transform: translate(-0.875rem, 0) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-3\.5") {
        @include assert {
          @include output {
            @include -translate-y-3\.5;
            @include reset;
          }

          @include expect {
            transform: translate(0, -0.875rem) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-4") {
        @include assert {
          @include output {
            @include -translate-x-4;
            @include reset;
          }

          @include expect {
            transform: translate(-1rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-4") {
        @include assert {
          @include output {
            @include -translate-y-4;
            @include reset;
          }

          @include expect {
            transform: translate(0, -1rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-5") {
        @include assert {
          @include output {
            @include -translate-x-5;
            @include reset;
          }

          @include expect {
            transform: translate(-1.25rem, 0) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-5") {
        @include assert {
          @include output {
            @include -translate-y-5;
            @include reset;
          }

          @include expect {
            transform: translate(0, -1.25rem) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-6") {
        @include assert {
          @include output {
            @include -translate-x-6;
            @include reset;
          }

          @include expect {
            transform: translate(-1.5rem, 0) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-6") {
        @include assert {
          @include output {
            @include -translate-y-6;
            @include reset;
          }

          @include expect {
            transform: translate(0, -1.5rem) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-7") {
        @include assert {
          @include output {
            @include -translate-x-7;
            @include reset;
          }

          @include expect {
            transform: translate(-1.75rem, 0) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-7") {
        @include assert {
          @include output {
            @include -translate-y-7;
            @include reset;
          }

          @include expect {
            transform: translate(0, -1.75rem) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-8") {
        @include assert {
          @include output {
            @include -translate-x-8;
            @include reset;
          }

          @include expect {
            transform: translate(-2rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-8") {
        @include assert {
          @include output {
            @include -translate-y-8;
            @include reset;
          }

          @include expect {
            transform: translate(0, -2rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-9") {
        @include assert {
          @include output {
            @include -translate-x-9;
            @include reset;
          }

          @include expect {
            transform: translate(-2.25rem, 0) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-9") {
        @include assert {
          @include output {
            @include -translate-y-9;
            @include reset;
          }

          @include expect {
            transform: translate(0, -2.25rem) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-10") {
        @include assert {
          @include output {
            @include -translate-x-10;
            @include reset;
          }

          @include expect {
            transform: translate(-2.5rem, 0) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-10") {
        @include assert {
          @include output {
            @include -translate-y-10;
            @include reset;
          }

          @include expect {
            transform: translate(0, -2.5rem) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-11") {
        @include assert {
          @include output {
            @include -translate-x-11;
            @include reset;
          }

          @include expect {
            transform: translate(-2.75rem, 0) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-11") {
        @include assert {
          @include output {
            @include -translate-y-11;
            @include reset;
          }

          @include expect {
            transform: translate(0, -2.75rem) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-12") {
        @include assert {
          @include output {
            @include -translate-x-12;
            @include reset;
          }

          @include expect {
            transform: translate(-3rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-12") {
        @include assert {
          @include output {
            @include -translate-y-12;
            @include reset;
          }

          @include expect {
            transform: translate(0, -3rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-14") {
        @include assert {
          @include output {
            @include -translate-x-14;
            @include reset;
          }

          @include expect {
            transform: translate(-3.5rem, 0) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-14") {
        @include assert {
          @include output {
            @include -translate-y-14;
            @include reset;
          }

          @include expect {
            transform: translate(0, -3.5rem) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-16") {
        @include assert {
          @include output {
            @include -translate-x-16;
            @include reset;
          }

          @include expect {
            transform: translate(-4rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-16") {
        @include assert {
          @include output {
            @include -translate-y-16;
            @include reset;
          }

          @include expect {
            transform: translate(0, -4rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-20") {
        @include assert {
          @include output {
            @include -translate-x-20;
            @include reset;
          }

          @include expect {
            transform: translate(-5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-20") {
        @include assert {
          @include output {
            @include -translate-y-20;
            @include reset;
          }

          @include expect {
            transform: translate(0, -5rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-24") {
        @include assert {
          @include output {
            @include -translate-x-24;
            @include reset;
          }

          @include expect {
            transform: translate(-6rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-24") {
        @include assert {
          @include output {
            @include -translate-y-24;
            @include reset;
          }

          @include expect {
            transform: translate(0, -6rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-28") {
        @include assert {
          @include output {
            @include -translate-x-28;
            @include reset;
          }

          @include expect {
            transform: translate(-7rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-28") {
        @include assert {
          @include output {
            @include -translate-y-28;
            @include reset;
          }

          @include expect {
            transform: translate(0, -7rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-32") {
        @include assert {
          @include output {
            @include -translate-x-32;
            @include reset;
          }

          @include expect {
            transform: translate(-8rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-32") {
        @include assert {
          @include output {
            @include -translate-y-32;
            @include reset;
          }

          @include expect {
            transform: translate(0, -8rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-36") {
        @include assert {
          @include output {
            @include -translate-x-36;
            @include reset;
          }

          @include expect {
            transform: translate(-9rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-36") {
        @include assert {
          @include output {
            @include -translate-y-36;
            @include reset;
          }

          @include expect {
            transform: translate(0, -9rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-40") {
        @include assert {
          @include output {
            @include -translate-x-40;
            @include reset;
          }

          @include expect {
            transform: translate(-10rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-40") {
        @include assert {
          @include output {
            @include -translate-y-40;
            @include reset;
          }

          @include expect {
            transform: translate(0, -10rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-44") {
        @include assert {
          @include output {
            @include -translate-x-44;
            @include reset;
          }

          @include expect {
            transform: translate(-11rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-44") {
        @include assert {
          @include output {
            @include -translate-y-44;
            @include reset;
          }

          @include expect {
            transform: translate(0, -11rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-48") {
        @include assert {
          @include output {
            @include -translate-x-48;
            @include reset;
          }

          @include expect {
            transform: translate(-12rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-48") {
        @include assert {
          @include output {
            @include -translate-y-48;
            @include reset;
          }

          @include expect {
            transform: translate(0, -12rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-52") {
        @include assert {
          @include output {
            @include -translate-x-52;
            @include reset;
          }

          @include expect {
            transform: translate(-13rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-52") {
        @include assert {
          @include output {
            @include -translate-y-52;
            @include reset;
          }

          @include expect {
            transform: translate(0, -13rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-56") {
        @include assert {
          @include output {
            @include -translate-x-56;
            @include reset;
          }

          @include expect {
            transform: translate(-14rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-56") {
        @include assert {
          @include output {
            @include -translate-y-56;
            @include reset;
          }

          @include expect {
            transform: translate(0, -14rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-60") {
        @include assert {
          @include output {
            @include -translate-x-60;
            @include reset;
          }

          @include expect {
            transform: translate(-15rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-60") {
        @include assert {
          @include output {
            @include -translate-y-60;
            @include reset;
          }

          @include expect {
            transform: translate(0, -15rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-64") {
        @include assert {
          @include output {
            @include -translate-x-64;
            @include reset;
          }

          @include expect {
            transform: translate(-16rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-64") {
        @include assert {
          @include output {
            @include -translate-y-64;
            @include reset;
          }

          @include expect {
            transform: translate(0, -16rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-72") {
        @include assert {
          @include output {
            @include -translate-x-72;
            @include reset;
          }

          @include expect {
            transform: translate(-18rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-72") {
        @include assert {
          @include output {
            @include -translate-y-72;
            @include reset;
          }

          @include expect {
            transform: translate(0, -18rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-80") {
        @include assert {
          @include output {
            @include -translate-x-80;
            @include reset;
          }

          @include expect {
            transform: translate(-20rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-80") {
        @include assert {
          @include output {
            @include -translate-y-80;
            @include reset;
          }

          @include expect {
            transform: translate(0, -20rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-96") {
        @include assert {
          @include output {
            @include -translate-x-96;
            @include reset;
          }

          @include expect {
            transform: translate(-24rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-96") {
        @include assert {
          @include output {
            @include -translate-y-96;
            @include reset;
          }

          @include expect {
            transform: translate(0, -24rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-1\/2") {
        @include assert {
          @include output {
            @include -translate-x-1\/2;
            @include reset;
          }

          @include expect {
            transform: translate(-50%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-1\/3") {
        @include assert {
          @include output {
            @include -translate-x-1\/3;
            @include reset;
          }

          @include expect {
            transform: translate(-33.333333%, 0) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-2\/3") {
        @include assert {
          @include output {
            @include -translate-x-2\/3;
            @include reset;
          }

          @include expect {
            transform: translate(-66.666667%, 0) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-1\/4") {
        @include assert {
          @include output {
            @include -translate-x-1\/4;
            @include reset;
          }

          @include expect {
            transform: translate(-25%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-2\/4") {
        @include assert {
          @include output {
            @include -translate-x-2\/4;
            @include reset;
          }

          @include expect {
            transform: translate(-50%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-3\/4") {
        @include assert {
          @include output {
            @include -translate-x-3\/4;
            @include reset;
          }

          @include expect {
            transform: translate(-75%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-full") {
        @include assert {
          @include output {
            @include -translate-x-full;
            @include reset;
          }

          @include expect {
            transform: translate(-100%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-1\/2") {
        @include assert {
          @include output {
            @include -translate-y-1\/2;
            @include reset;
          }

          @include expect {
            transform: translate(0, -50%) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-1\/3") {
        @include assert {
          @include output {
            @include -translate-y-1\/3;
            @include reset;
          }

          @include expect {
            transform: translate(0, -33.333333%) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-2\/3") {
        @include assert {
          @include output {
            @include -translate-y-2\/3;
            @include reset;
          }

          @include expect {
            transform: translate(0, -66.666667%) rotate(0deg) skewX(0deg)
              skewY(0deg) scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-1\/4") {
        @include assert {
          @include output {
            @include -translate-y-1\/4;
            @include reset;
          }

          @include expect {
            transform: translate(0, -25%) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-2\/4") {
        @include assert {
          @include output {
            @include -translate-y-2\/4;
            @include reset;
          }

          @include expect {
            transform: translate(0, -50%) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-3\/4") {
        @include assert {
          @include output {
            @include -translate-y-3\/4;
            @include reset;
          }

          @include expect {
            transform: translate(0, -75%) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-full") {
        @include assert {
          @include output {
            @include -translate-y-full;
            @include reset;
          }

          @include expect {
            transform: translate(0, -100%) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }
    }

    @include describe("Rwd") {
      @include it("sm\:translate-x-0") {
        @include assert {
          @include output {
            @include sm\:translate-x-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0px, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-0") {
        @include assert {
          @include output {
            @include sm\:translate-y-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0px) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-px") {
        @include assert {
          @include output {
            @include sm\:translate-x-px;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(1px, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-px") {
        @include assert {
          @include output {
            @include sm\:translate-y-px;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 1px) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-0\.5") {
        @include assert {
          @include output {
            @include sm\:translate-x-0\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0.125rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-0\.5") {
        @include assert {
          @include output {
            @include sm\:translate-y-0\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0.125rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-1") {
        @include assert {
          @include output {
            @include sm\:translate-x-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-1") {
        @include assert {
          @include output {
            @include sm\:translate-y-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-1\.5") {
        @include assert {
          @include output {
            @include sm\:translate-x-1\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0.375rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-1\.5") {
        @include assert {
          @include output {
            @include sm\:translate-y-1\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0.375rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-2") {
        @include assert {
          @include output {
            @include sm\:translate-x-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-2") {
        @include assert {
          @include output {
            @include sm\:translate-y-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-2\.5") {
        @include assert {
          @include output {
            @include sm\:translate-x-2\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0.625rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-2\.5") {
        @include assert {
          @include output {
            @include sm\:translate-y-2\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0.625rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-3") {
        @include assert {
          @include output {
            @include sm\:translate-x-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-3") {
        @include assert {
          @include output {
            @include sm\:translate-y-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-3\.5") {
        @include assert {
          @include output {
            @include sm\:translate-x-3\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0.875rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-3\.5") {
        @include assert {
          @include output {
            @include sm\:translate-y-3\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0.875rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-4") {
        @include assert {
          @include output {
            @include sm\:translate-x-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(1rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-4") {
        @include assert {
          @include output {
            @include sm\:translate-y-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 1rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-5") {
        @include assert {
          @include output {
            @include sm\:translate-x-5;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(1.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-5") {
        @include assert {
          @include output {
            @include sm\:translate-y-5;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 1.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-6") {
        @include assert {
          @include output {
            @include sm\:translate-x-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(1.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-6") {
        @include assert {
          @include output {
            @include sm\:translate-y-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 1.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-7") {
        @include assert {
          @include output {
            @include sm\:translate-x-7;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(1.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-7") {
        @include assert {
          @include output {
            @include sm\:translate-y-7;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 1.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-8") {
        @include assert {
          @include output {
            @include sm\:translate-x-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(2rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-8") {
        @include assert {
          @include output {
            @include sm\:translate-y-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 2rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-9") {
        @include assert {
          @include output {
            @include sm\:translate-x-9;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(2.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-9") {
        @include assert {
          @include output {
            @include sm\:translate-y-9;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 2.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-10") {
        @include assert {
          @include output {
            @include sm\:translate-x-10;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(2.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-10") {
        @include assert {
          @include output {
            @include sm\:translate-y-10;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 2.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-11") {
        @include assert {
          @include output {
            @include sm\:translate-x-11;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(2.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-11") {
        @include assert {
          @include output {
            @include sm\:translate-y-11;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 2.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-12") {
        @include assert {
          @include output {
            @include sm\:translate-x-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(3rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-12") {
        @include assert {
          @include output {
            @include sm\:translate-y-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 3rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-14") {
        @include assert {
          @include output {
            @include sm\:translate-x-14;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(3.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-14") {
        @include assert {
          @include output {
            @include sm\:translate-y-14;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 3.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-16") {
        @include assert {
          @include output {
            @include sm\:translate-x-16;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(4rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-16") {
        @include assert {
          @include output {
            @include sm\:translate-y-16;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 4rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-20") {
        @include assert {
          @include output {
            @include sm\:translate-x-20;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-20") {
        @include assert {
          @include output {
            @include sm\:translate-y-20;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 5rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-24") {
        @include assert {
          @include output {
            @include sm\:translate-x-24;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(6rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-24") {
        @include assert {
          @include output {
            @include sm\:translate-y-24;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 6rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-28") {
        @include assert {
          @include output {
            @include sm\:translate-x-28;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(7rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-28") {
        @include assert {
          @include output {
            @include sm\:translate-y-28;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 7rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-32") {
        @include assert {
          @include output {
            @include sm\:translate-x-32;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(8rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-32") {
        @include assert {
          @include output {
            @include sm\:translate-y-32;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 8rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-36") {
        @include assert {
          @include output {
            @include sm\:translate-x-36;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(9rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-36") {
        @include assert {
          @include output {
            @include sm\:translate-y-36;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 9rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-40") {
        @include assert {
          @include output {
            @include sm\:translate-x-40;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(10rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-40") {
        @include assert {
          @include output {
            @include sm\:translate-y-40;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 10rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-44") {
        @include assert {
          @include output {
            @include sm\:translate-x-44;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(11rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-44") {
        @include assert {
          @include output {
            @include sm\:translate-y-44;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 11rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-48") {
        @include assert {
          @include output {
            @include sm\:translate-x-48;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(12rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-48") {
        @include assert {
          @include output {
            @include sm\:translate-y-48;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 12rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-52") {
        @include assert {
          @include output {
            @include sm\:translate-x-52;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(13rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-52") {
        @include assert {
          @include output {
            @include sm\:translate-y-52;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 13rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-56") {
        @include assert {
          @include output {
            @include sm\:translate-x-56;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(14rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-56") {
        @include assert {
          @include output {
            @include sm\:translate-y-56;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 14rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-60") {
        @include assert {
          @include output {
            @include sm\:translate-x-60;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(15rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-60") {
        @include assert {
          @include output {
            @include sm\:translate-y-60;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 15rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-64") {
        @include assert {
          @include output {
            @include sm\:translate-x-64;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(16rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-64") {
        @include assert {
          @include output {
            @include sm\:translate-y-64;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 16rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-72") {
        @include assert {
          @include output {
            @include sm\:translate-x-72;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(18rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-72") {
        @include assert {
          @include output {
            @include sm\:translate-y-72;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 18rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-80") {
        @include assert {
          @include output {
            @include sm\:translate-x-80;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(20rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-80") {
        @include assert {
          @include output {
            @include sm\:translate-y-80;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 20rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-96") {
        @include assert {
          @include output {
            @include sm\:translate-x-96;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(24rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-96") {
        @include assert {
          @include output {
            @include sm\:translate-y-96;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 24rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-1\/2") {
        @include assert {
          @include output {
            @include sm\:translate-x-1\/2;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(50%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-1\/3") {
        @include assert {
          @include output {
            @include sm\:translate-x-1\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(33.333333%, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-2\/3") {
        @include assert {
          @include output {
            @include sm\:translate-x-2\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(66.666667%, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-1\/4") {
        @include assert {
          @include output {
            @include sm\:translate-x-1\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(25%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-2\/4") {
        @include assert {
          @include output {
            @include sm\:translate-x-2\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(50%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-3\/4") {
        @include assert {
          @include output {
            @include sm\:translate-x-3\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(75%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-x-full") {
        @include assert {
          @include output {
            @include sm\:translate-x-full;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(100%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-1\/2") {
        @include assert {
          @include output {
            @include sm\:translate-y-1\/2;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 50%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-1\/3") {
        @include assert {
          @include output {
            @include sm\:translate-y-1\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 33.333333%) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-2\/3") {
        @include assert {
          @include output {
            @include sm\:translate-y-2\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 66.666667%) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-1\/4") {
        @include assert {
          @include output {
            @include sm\:translate-y-1\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 25%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-2\/4") {
        @include assert {
          @include output {
            @include sm\:translate-y-2\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 50%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-3\/4") {
        @include assert {
          @include output {
            @include sm\:translate-y-3\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 75%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-full") {
        @include assert {
          @include output {
            @include sm\:translate-y-full;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 100%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-0") {
        @include assert {
          @include output {
            @include sm\:-translate-x-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-0px, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-0") {
        @include assert {
          @include output {
            @include sm\:-translate-y-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -0px) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-px") {
        @include assert {
          @include output {
            @include sm\:-translate-x-px;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-1px, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-px") {
        @include assert {
          @include output {
            @include sm\:-translate-y-px;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -1px) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-0\.5") {
        @include assert {
          @include output {
            @include sm\:-translate-x-0\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-0.125rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-0\.5") {
        @include assert {
          @include output {
            @include sm\:-translate-y-0\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -0.125rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-1") {
        @include assert {
          @include output {
            @include sm\:-translate-x-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-0.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-1") {
        @include assert {
          @include output {
            @include sm\:-translate-y-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -0.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-1\.5") {
        @include assert {
          @include output {
            @include sm\:-translate-x-1\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-0.375rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-1\.5") {
        @include assert {
          @include output {
            @include sm\:-translate-y-1\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -0.375rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-2") {
        @include assert {
          @include output {
            @include sm\:-translate-x-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-0.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-2") {
        @include assert {
          @include output {
            @include sm\:-translate-y-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -0.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-2\.5") {
        @include assert {
          @include output {
            @include sm\:-translate-x-2\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-0.625rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-2\.5") {
        @include assert {
          @include output {
            @include sm\:-translate-y-2\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -0.625rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-3") {
        @include assert {
          @include output {
            @include sm\:-translate-x-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-0.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-3") {
        @include assert {
          @include output {
            @include sm\:-translate-y-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -0.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-3\.5") {
        @include assert {
          @include output {
            @include sm\:-translate-x-3\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-0.875rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-3\.5") {
        @include assert {
          @include output {
            @include sm\:-translate-y-3\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -0.875rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-4") {
        @include assert {
          @include output {
            @include sm\:-translate-x-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-1rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-4") {
        @include assert {
          @include output {
            @include sm\:-translate-y-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -1rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-5") {
        @include assert {
          @include output {
            @include sm\:-translate-x-5;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-1.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-5") {
        @include assert {
          @include output {
            @include sm\:-translate-y-5;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -1.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-6") {
        @include assert {
          @include output {
            @include sm\:-translate-x-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-1.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-6") {
        @include assert {
          @include output {
            @include sm\:-translate-y-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -1.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-7") {
        @include assert {
          @include output {
            @include sm\:-translate-x-7;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-1.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-7") {
        @include assert {
          @include output {
            @include sm\:-translate-y-7;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -1.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-8") {
        @include assert {
          @include output {
            @include sm\:-translate-x-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-2rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-8") {
        @include assert {
          @include output {
            @include sm\:-translate-y-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -2rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-9") {
        @include assert {
          @include output {
            @include sm\:-translate-x-9;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-2.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-9") {
        @include assert {
          @include output {
            @include sm\:-translate-y-9;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -2.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-10") {
        @include assert {
          @include output {
            @include sm\:-translate-x-10;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-2.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-10") {
        @include assert {
          @include output {
            @include sm\:-translate-y-10;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -2.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-11") {
        @include assert {
          @include output {
            @include sm\:-translate-x-11;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-2.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-11") {
        @include assert {
          @include output {
            @include sm\:-translate-y-11;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -2.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-12") {
        @include assert {
          @include output {
            @include sm\:-translate-x-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-3rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-12") {
        @include assert {
          @include output {
            @include sm\:-translate-y-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -3rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-14") {
        @include assert {
          @include output {
            @include sm\:-translate-x-14;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-3.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-14") {
        @include assert {
          @include output {
            @include sm\:-translate-y-14;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -3.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-16") {
        @include assert {
          @include output {
            @include sm\:-translate-x-16;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-4rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-16") {
        @include assert {
          @include output {
            @include sm\:-translate-y-16;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -4rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-20") {
        @include assert {
          @include output {
            @include sm\:-translate-x-20;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-20") {
        @include assert {
          @include output {
            @include sm\:-translate-y-20;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-24") {
        @include assert {
          @include output {
            @include sm\:-translate-x-24;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-6rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-24") {
        @include assert {
          @include output {
            @include sm\:-translate-y-24;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -6rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-28") {
        @include assert {
          @include output {
            @include sm\:-translate-x-28;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-7rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-28") {
        @include assert {
          @include output {
            @include sm\:-translate-y-28;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -7rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-32") {
        @include assert {
          @include output {
            @include sm\:-translate-x-32;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-8rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-32") {
        @include assert {
          @include output {
            @include sm\:-translate-y-32;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -8rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-36") {
        @include assert {
          @include output {
            @include sm\:-translate-x-36;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-9rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-36") {
        @include assert {
          @include output {
            @include sm\:-translate-y-36;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -9rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-40") {
        @include assert {
          @include output {
            @include sm\:-translate-x-40;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-10rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-40") {
        @include assert {
          @include output {
            @include sm\:-translate-y-40;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -10rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-44") {
        @include assert {
          @include output {
            @include sm\:-translate-x-44;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-11rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-44") {
        @include assert {
          @include output {
            @include sm\:-translate-y-44;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -11rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-48") {
        @include assert {
          @include output {
            @include sm\:-translate-x-48;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-12rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-48") {
        @include assert {
          @include output {
            @include sm\:-translate-y-48;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -12rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-52") {
        @include assert {
          @include output {
            @include sm\:-translate-x-52;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-13rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-52") {
        @include assert {
          @include output {
            @include sm\:-translate-y-52;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -13rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-56") {
        @include assert {
          @include output {
            @include sm\:-translate-x-56;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-14rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-56") {
        @include assert {
          @include output {
            @include sm\:-translate-y-56;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -14rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-60") {
        @include assert {
          @include output {
            @include sm\:-translate-x-60;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-15rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-60") {
        @include assert {
          @include output {
            @include sm\:-translate-y-60;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -15rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-64") {
        @include assert {
          @include output {
            @include sm\:-translate-x-64;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-16rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-64") {
        @include assert {
          @include output {
            @include sm\:-translate-y-64;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -16rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-72") {
        @include assert {
          @include output {
            @include sm\:-translate-x-72;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-18rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-72") {
        @include assert {
          @include output {
            @include sm\:-translate-y-72;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -18rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-80") {
        @include assert {
          @include output {
            @include sm\:-translate-x-80;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-20rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-80") {
        @include assert {
          @include output {
            @include sm\:-translate-y-80;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -20rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-96") {
        @include assert {
          @include output {
            @include sm\:-translate-x-96;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-24rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-96") {
        @include assert {
          @include output {
            @include sm\:-translate-y-96;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -24rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-1\/2") {
        @include assert {
          @include output {
            @include sm\:-translate-x-1\/2;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-50%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-1\/3") {
        @include assert {
          @include output {
            @include sm\:-translate-x-1\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-33.333333%, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-2\/3") {
        @include assert {
          @include output {
            @include sm\:-translate-x-2\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-66.666667%, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-1\/4") {
        @include assert {
          @include output {
            @include sm\:-translate-x-1\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-25%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-2\/4") {
        @include assert {
          @include output {
            @include sm\:-translate-x-2\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-50%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-3\/4") {
        @include assert {
          @include output {
            @include sm\:-translate-x-3\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-75%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-full") {
        @include assert {
          @include output {
            @include sm\:-translate-x-full;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-100%, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-1\/2") {
        @include assert {
          @include output {
            @include sm\:-translate-y-1\/2;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -50%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-1\/3") {
        @include assert {
          @include output {
            @include sm\:-translate-y-1\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -33.333333%) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-2\/3") {
        @include assert {
          @include output {
            @include sm\:-translate-y-2\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -66.666667%) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-1\/4") {
        @include assert {
          @include output {
            @include sm\:-translate-y-1\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -25%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-2\/4") {
        @include assert {
          @include output {
            @include sm\:-translate-y-2\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -50%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-3\/4") {
        @include assert {
          @include output {
            @include sm\:-translate-y-3\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -75%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-full") {
        @include assert {
          @include output {
            @include sm\:-translate-y-full;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -100%) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-0") {
        @include assert {
          @include output {
            @include md\:translate-x-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0px, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-0") {
        @include assert {
          @include output {
            @include md\:translate-y-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0px) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-px") {
        @include assert {
          @include output {
            @include md\:translate-x-px;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(1px, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-px") {
        @include assert {
          @include output {
            @include md\:translate-y-px;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 1px) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-0\.5") {
        @include assert {
          @include output {
            @include md\:translate-x-0\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0.125rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-0\.5") {
        @include assert {
          @include output {
            @include md\:translate-y-0\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0.125rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-1") {
        @include assert {
          @include output {
            @include md\:translate-x-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-1") {
        @include assert {
          @include output {
            @include md\:translate-y-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-1\.5") {
        @include assert {
          @include output {
            @include md\:translate-x-1\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0.375rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-1\.5") {
        @include assert {
          @include output {
            @include md\:translate-y-1\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0.375rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-2") {
        @include assert {
          @include output {
            @include md\:translate-x-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-2") {
        @include assert {
          @include output {
            @include md\:translate-y-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-2\.5") {
        @include assert {
          @include output {
            @include md\:translate-x-2\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0.625rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-2\.5") {
        @include assert {
          @include output {
            @include md\:translate-y-2\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0.625rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-3") {
        @include assert {
          @include output {
            @include md\:translate-x-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-3") {
        @include assert {
          @include output {
            @include md\:translate-y-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-3\.5") {
        @include assert {
          @include output {
            @include md\:translate-x-3\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0.875rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-3\.5") {
        @include assert {
          @include output {
            @include md\:translate-y-3\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0.875rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-4") {
        @include assert {
          @include output {
            @include md\:translate-x-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(1rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-4") {
        @include assert {
          @include output {
            @include md\:translate-y-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 1rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-5") {
        @include assert {
          @include output {
            @include md\:translate-x-5;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(1.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-5") {
        @include assert {
          @include output {
            @include md\:translate-y-5;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 1.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-6") {
        @include assert {
          @include output {
            @include md\:translate-x-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(1.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-6") {
        @include assert {
          @include output {
            @include md\:translate-y-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 1.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-7") {
        @include assert {
          @include output {
            @include md\:translate-x-7;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(1.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-7") {
        @include assert {
          @include output {
            @include md\:translate-y-7;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 1.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-8") {
        @include assert {
          @include output {
            @include md\:translate-x-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(2rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-8") {
        @include assert {
          @include output {
            @include md\:translate-y-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 2rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-9") {
        @include assert {
          @include output {
            @include md\:translate-x-9;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(2.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-9") {
        @include assert {
          @include output {
            @include md\:translate-y-9;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 2.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-10") {
        @include assert {
          @include output {
            @include md\:translate-x-10;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(2.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-10") {
        @include assert {
          @include output {
            @include md\:translate-y-10;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 2.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-11") {
        @include assert {
          @include output {
            @include md\:translate-x-11;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(2.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-11") {
        @include assert {
          @include output {
            @include md\:translate-y-11;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 2.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-12") {
        @include assert {
          @include output {
            @include md\:translate-x-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(3rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-12") {
        @include assert {
          @include output {
            @include md\:translate-y-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 3rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-14") {
        @include assert {
          @include output {
            @include md\:translate-x-14;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(3.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-14") {
        @include assert {
          @include output {
            @include md\:translate-y-14;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 3.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-16") {
        @include assert {
          @include output {
            @include md\:translate-x-16;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(4rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-16") {
        @include assert {
          @include output {
            @include md\:translate-y-16;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 4rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-20") {
        @include assert {
          @include output {
            @include md\:translate-x-20;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-20") {
        @include assert {
          @include output {
            @include md\:translate-y-20;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 5rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-24") {
        @include assert {
          @include output {
            @include md\:translate-x-24;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(6rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-24") {
        @include assert {
          @include output {
            @include md\:translate-y-24;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 6rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-28") {
        @include assert {
          @include output {
            @include md\:translate-x-28;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(7rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-28") {
        @include assert {
          @include output {
            @include md\:translate-y-28;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 7rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-32") {
        @include assert {
          @include output {
            @include md\:translate-x-32;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(8rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-32") {
        @include assert {
          @include output {
            @include md\:translate-y-32;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 8rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-36") {
        @include assert {
          @include output {
            @include md\:translate-x-36;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(9rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-36") {
        @include assert {
          @include output {
            @include md\:translate-y-36;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 9rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-40") {
        @include assert {
          @include output {
            @include md\:translate-x-40;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(10rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-40") {
        @include assert {
          @include output {
            @include md\:translate-y-40;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 10rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-44") {
        @include assert {
          @include output {
            @include md\:translate-x-44;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(11rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-44") {
        @include assert {
          @include output {
            @include md\:translate-y-44;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 11rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-48") {
        @include assert {
          @include output {
            @include md\:translate-x-48;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(12rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-48") {
        @include assert {
          @include output {
            @include md\:translate-y-48;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 12rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-52") {
        @include assert {
          @include output {
            @include md\:translate-x-52;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(13rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-52") {
        @include assert {
          @include output {
            @include md\:translate-y-52;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 13rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-56") {
        @include assert {
          @include output {
            @include md\:translate-x-56;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(14rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-56") {
        @include assert {
          @include output {
            @include md\:translate-y-56;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 14rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-60") {
        @include assert {
          @include output {
            @include md\:translate-x-60;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(15rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-60") {
        @include assert {
          @include output {
            @include md\:translate-y-60;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 15rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-64") {
        @include assert {
          @include output {
            @include md\:translate-x-64;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(16rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-64") {
        @include assert {
          @include output {
            @include md\:translate-y-64;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 16rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-72") {
        @include assert {
          @include output {
            @include md\:translate-x-72;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(18rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-72") {
        @include assert {
          @include output {
            @include md\:translate-y-72;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 18rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-80") {
        @include assert {
          @include output {
            @include md\:translate-x-80;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(20rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-80") {
        @include assert {
          @include output {
            @include md\:translate-y-80;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 20rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-96") {
        @include assert {
          @include output {
            @include md\:translate-x-96;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(24rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-96") {
        @include assert {
          @include output {
            @include md\:translate-y-96;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 24rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-1\/2") {
        @include assert {
          @include output {
            @include md\:translate-x-1\/2;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(50%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-1\/3") {
        @include assert {
          @include output {
            @include md\:translate-x-1\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(33.333333%, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-2\/3") {
        @include assert {
          @include output {
            @include md\:translate-x-2\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(66.666667%, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-1\/4") {
        @include assert {
          @include output {
            @include md\:translate-x-1\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(25%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-2\/4") {
        @include assert {
          @include output {
            @include md\:translate-x-2\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(50%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-3\/4") {
        @include assert {
          @include output {
            @include md\:translate-x-3\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(75%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-full") {
        @include assert {
          @include output {
            @include md\:translate-x-full;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(100%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-1\/2") {
        @include assert {
          @include output {
            @include md\:translate-y-1\/2;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 50%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-1\/3") {
        @include assert {
          @include output {
            @include md\:translate-y-1\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 33.333333%) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-2\/3") {
        @include assert {
          @include output {
            @include md\:translate-y-2\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 66.666667%) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-1\/4") {
        @include assert {
          @include output {
            @include md\:translate-y-1\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 25%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-2\/4") {
        @include assert {
          @include output {
            @include md\:translate-y-2\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 50%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-3\/4") {
        @include assert {
          @include output {
            @include md\:translate-y-3\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 75%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-full") {
        @include assert {
          @include output {
            @include md\:translate-y-full;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 100%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-0") {
        @include assert {
          @include output {
            @include md\:-translate-x-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-0px, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-0") {
        @include assert {
          @include output {
            @include md\:-translate-y-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -0px) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-px") {
        @include assert {
          @include output {
            @include md\:-translate-x-px;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-1px, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-px") {
        @include assert {
          @include output {
            @include md\:-translate-y-px;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -1px) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-0\.5") {
        @include assert {
          @include output {
            @include md\:-translate-x-0\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-0.125rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-0\.5") {
        @include assert {
          @include output {
            @include md\:-translate-y-0\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -0.125rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-1") {
        @include assert {
          @include output {
            @include md\:-translate-x-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-0.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-1") {
        @include assert {
          @include output {
            @include md\:-translate-y-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -0.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-1\.5") {
        @include assert {
          @include output {
            @include md\:-translate-x-1\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-0.375rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-1\.5") {
        @include assert {
          @include output {
            @include md\:-translate-y-1\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -0.375rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-2") {
        @include assert {
          @include output {
            @include md\:-translate-x-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-0.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-2") {
        @include assert {
          @include output {
            @include md\:-translate-y-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -0.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-2\.5") {
        @include assert {
          @include output {
            @include md\:-translate-x-2\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-0.625rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-2\.5") {
        @include assert {
          @include output {
            @include md\:-translate-y-2\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -0.625rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-3") {
        @include assert {
          @include output {
            @include md\:-translate-x-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-0.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-3") {
        @include assert {
          @include output {
            @include md\:-translate-y-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -0.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-3\.5") {
        @include assert {
          @include output {
            @include md\:-translate-x-3\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-0.875rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-3\.5") {
        @include assert {
          @include output {
            @include md\:-translate-y-3\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -0.875rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-4") {
        @include assert {
          @include output {
            @include md\:-translate-x-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-1rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-4") {
        @include assert {
          @include output {
            @include md\:-translate-y-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -1rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-5") {
        @include assert {
          @include output {
            @include md\:-translate-x-5;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-1.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-5") {
        @include assert {
          @include output {
            @include md\:-translate-y-5;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -1.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-6") {
        @include assert {
          @include output {
            @include md\:-translate-x-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-1.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-6") {
        @include assert {
          @include output {
            @include md\:-translate-y-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -1.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-7") {
        @include assert {
          @include output {
            @include md\:-translate-x-7;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-1.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-7") {
        @include assert {
          @include output {
            @include md\:-translate-y-7;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -1.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-8") {
        @include assert {
          @include output {
            @include md\:-translate-x-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-2rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-8") {
        @include assert {
          @include output {
            @include md\:-translate-y-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -2rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-9") {
        @include assert {
          @include output {
            @include md\:-translate-x-9;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-2.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-9") {
        @include assert {
          @include output {
            @include md\:-translate-y-9;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -2.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-10") {
        @include assert {
          @include output {
            @include md\:-translate-x-10;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-2.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-10") {
        @include assert {
          @include output {
            @include md\:-translate-y-10;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -2.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-11") {
        @include assert {
          @include output {
            @include md\:-translate-x-11;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-2.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-11") {
        @include assert {
          @include output {
            @include md\:-translate-y-11;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -2.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-12") {
        @include assert {
          @include output {
            @include md\:-translate-x-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-3rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-12") {
        @include assert {
          @include output {
            @include md\:-translate-y-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -3rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-14") {
        @include assert {
          @include output {
            @include md\:-translate-x-14;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-3.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-14") {
        @include assert {
          @include output {
            @include md\:-translate-y-14;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -3.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-16") {
        @include assert {
          @include output {
            @include md\:-translate-x-16;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-4rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-16") {
        @include assert {
          @include output {
            @include md\:-translate-y-16;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -4rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-20") {
        @include assert {
          @include output {
            @include md\:-translate-x-20;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-20") {
        @include assert {
          @include output {
            @include md\:-translate-y-20;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-24") {
        @include assert {
          @include output {
            @include md\:-translate-x-24;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-6rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-24") {
        @include assert {
          @include output {
            @include md\:-translate-y-24;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -6rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-28") {
        @include assert {
          @include output {
            @include md\:-translate-x-28;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-7rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-28") {
        @include assert {
          @include output {
            @include md\:-translate-y-28;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -7rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-32") {
        @include assert {
          @include output {
            @include md\:-translate-x-32;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-8rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-32") {
        @include assert {
          @include output {
            @include md\:-translate-y-32;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -8rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-36") {
        @include assert {
          @include output {
            @include md\:-translate-x-36;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-9rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-36") {
        @include assert {
          @include output {
            @include md\:-translate-y-36;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -9rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-40") {
        @include assert {
          @include output {
            @include md\:-translate-x-40;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-10rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-40") {
        @include assert {
          @include output {
            @include md\:-translate-y-40;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -10rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-44") {
        @include assert {
          @include output {
            @include md\:-translate-x-44;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-11rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-44") {
        @include assert {
          @include output {
            @include md\:-translate-y-44;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -11rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-48") {
        @include assert {
          @include output {
            @include md\:-translate-x-48;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-12rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-48") {
        @include assert {
          @include output {
            @include md\:-translate-y-48;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -12rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-52") {
        @include assert {
          @include output {
            @include md\:-translate-x-52;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-13rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-52") {
        @include assert {
          @include output {
            @include md\:-translate-y-52;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -13rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-56") {
        @include assert {
          @include output {
            @include md\:-translate-x-56;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-14rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-56") {
        @include assert {
          @include output {
            @include md\:-translate-y-56;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -14rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-60") {
        @include assert {
          @include output {
            @include md\:-translate-x-60;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-15rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-60") {
        @include assert {
          @include output {
            @include md\:-translate-y-60;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -15rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-64") {
        @include assert {
          @include output {
            @include md\:-translate-x-64;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-16rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-64") {
        @include assert {
          @include output {
            @include md\:-translate-y-64;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -16rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-72") {
        @include assert {
          @include output {
            @include md\:-translate-x-72;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-18rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-72") {
        @include assert {
          @include output {
            @include md\:-translate-y-72;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -18rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-80") {
        @include assert {
          @include output {
            @include md\:-translate-x-80;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-20rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-80") {
        @include assert {
          @include output {
            @include md\:-translate-y-80;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -20rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-96") {
        @include assert {
          @include output {
            @include md\:-translate-x-96;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-24rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-96") {
        @include assert {
          @include output {
            @include md\:-translate-y-96;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -24rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-1\/2") {
        @include assert {
          @include output {
            @include md\:-translate-x-1\/2;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-50%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-1\/3") {
        @include assert {
          @include output {
            @include md\:-translate-x-1\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-33.333333%, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-2\/3") {
        @include assert {
          @include output {
            @include md\:-translate-x-2\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-66.666667%, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-1\/4") {
        @include assert {
          @include output {
            @include md\:-translate-x-1\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-25%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-2\/4") {
        @include assert {
          @include output {
            @include md\:-translate-x-2\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-50%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-3\/4") {
        @include assert {
          @include output {
            @include md\:-translate-x-3\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-75%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-full") {
        @include assert {
          @include output {
            @include md\:-translate-x-full;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-100%, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-1\/2") {
        @include assert {
          @include output {
            @include md\:-translate-y-1\/2;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -50%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-1\/3") {
        @include assert {
          @include output {
            @include md\:-translate-y-1\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -33.333333%) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-2\/3") {
        @include assert {
          @include output {
            @include md\:-translate-y-2\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -66.666667%) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-1\/4") {
        @include assert {
          @include output {
            @include md\:-translate-y-1\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -25%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-2\/4") {
        @include assert {
          @include output {
            @include md\:-translate-y-2\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -50%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-3\/4") {
        @include assert {
          @include output {
            @include md\:-translate-y-3\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -75%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-full") {
        @include assert {
          @include output {
            @include md\:-translate-y-full;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -100%) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-0") {
        @include assert {
          @include output {
            @include lg\:translate-x-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0px, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-0") {
        @include assert {
          @include output {
            @include lg\:translate-y-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0px) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-px") {
        @include assert {
          @include output {
            @include lg\:translate-x-px;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(1px, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-px") {
        @include assert {
          @include output {
            @include lg\:translate-y-px;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 1px) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-0\.5") {
        @include assert {
          @include output {
            @include lg\:translate-x-0\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0.125rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-0\.5") {
        @include assert {
          @include output {
            @include lg\:translate-y-0\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0.125rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-1") {
        @include assert {
          @include output {
            @include lg\:translate-x-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-1") {
        @include assert {
          @include output {
            @include lg\:translate-y-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-1\.5") {
        @include assert {
          @include output {
            @include lg\:translate-x-1\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0.375rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-1\.5") {
        @include assert {
          @include output {
            @include lg\:translate-y-1\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0.375rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-2") {
        @include assert {
          @include output {
            @include lg\:translate-x-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-2") {
        @include assert {
          @include output {
            @include lg\:translate-y-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-2\.5") {
        @include assert {
          @include output {
            @include lg\:translate-x-2\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0.625rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-2\.5") {
        @include assert {
          @include output {
            @include lg\:translate-y-2\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0.625rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-3") {
        @include assert {
          @include output {
            @include lg\:translate-x-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-3") {
        @include assert {
          @include output {
            @include lg\:translate-y-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-3\.5") {
        @include assert {
          @include output {
            @include lg\:translate-x-3\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0.875rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-3\.5") {
        @include assert {
          @include output {
            @include lg\:translate-y-3\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0.875rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-4") {
        @include assert {
          @include output {
            @include lg\:translate-x-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(1rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-4") {
        @include assert {
          @include output {
            @include lg\:translate-y-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 1rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-5") {
        @include assert {
          @include output {
            @include lg\:translate-x-5;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(1.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-5") {
        @include assert {
          @include output {
            @include lg\:translate-y-5;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 1.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-6") {
        @include assert {
          @include output {
            @include lg\:translate-x-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(1.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-6") {
        @include assert {
          @include output {
            @include lg\:translate-y-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 1.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-7") {
        @include assert {
          @include output {
            @include lg\:translate-x-7;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(1.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-7") {
        @include assert {
          @include output {
            @include lg\:translate-y-7;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 1.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-8") {
        @include assert {
          @include output {
            @include lg\:translate-x-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(2rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-8") {
        @include assert {
          @include output {
            @include lg\:translate-y-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 2rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-9") {
        @include assert {
          @include output {
            @include lg\:translate-x-9;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(2.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-9") {
        @include assert {
          @include output {
            @include lg\:translate-y-9;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 2.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-10") {
        @include assert {
          @include output {
            @include lg\:translate-x-10;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(2.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-10") {
        @include assert {
          @include output {
            @include lg\:translate-y-10;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 2.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-11") {
        @include assert {
          @include output {
            @include lg\:translate-x-11;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(2.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-11") {
        @include assert {
          @include output {
            @include lg\:translate-y-11;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 2.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-12") {
        @include assert {
          @include output {
            @include lg\:translate-x-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(3rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-12") {
        @include assert {
          @include output {
            @include lg\:translate-y-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 3rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-14") {
        @include assert {
          @include output {
            @include lg\:translate-x-14;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(3.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-14") {
        @include assert {
          @include output {
            @include lg\:translate-y-14;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 3.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-16") {
        @include assert {
          @include output {
            @include lg\:translate-x-16;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(4rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-16") {
        @include assert {
          @include output {
            @include lg\:translate-y-16;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 4rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-20") {
        @include assert {
          @include output {
            @include lg\:translate-x-20;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-20") {
        @include assert {
          @include output {
            @include lg\:translate-y-20;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 5rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-24") {
        @include assert {
          @include output {
            @include lg\:translate-x-24;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(6rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-24") {
        @include assert {
          @include output {
            @include lg\:translate-y-24;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 6rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-28") {
        @include assert {
          @include output {
            @include lg\:translate-x-28;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(7rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-28") {
        @include assert {
          @include output {
            @include lg\:translate-y-28;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 7rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-32") {
        @include assert {
          @include output {
            @include lg\:translate-x-32;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(8rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-32") {
        @include assert {
          @include output {
            @include lg\:translate-y-32;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 8rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-36") {
        @include assert {
          @include output {
            @include lg\:translate-x-36;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(9rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-36") {
        @include assert {
          @include output {
            @include lg\:translate-y-36;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 9rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-40") {
        @include assert {
          @include output {
            @include lg\:translate-x-40;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(10rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-40") {
        @include assert {
          @include output {
            @include lg\:translate-y-40;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 10rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-44") {
        @include assert {
          @include output {
            @include lg\:translate-x-44;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(11rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-44") {
        @include assert {
          @include output {
            @include lg\:translate-y-44;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 11rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-48") {
        @include assert {
          @include output {
            @include lg\:translate-x-48;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(12rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-48") {
        @include assert {
          @include output {
            @include lg\:translate-y-48;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 12rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-52") {
        @include assert {
          @include output {
            @include lg\:translate-x-52;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(13rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-52") {
        @include assert {
          @include output {
            @include lg\:translate-y-52;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 13rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-56") {
        @include assert {
          @include output {
            @include lg\:translate-x-56;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(14rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-56") {
        @include assert {
          @include output {
            @include lg\:translate-y-56;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 14rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-60") {
        @include assert {
          @include output {
            @include lg\:translate-x-60;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(15rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-60") {
        @include assert {
          @include output {
            @include lg\:translate-y-60;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 15rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-64") {
        @include assert {
          @include output {
            @include lg\:translate-x-64;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(16rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-64") {
        @include assert {
          @include output {
            @include lg\:translate-y-64;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 16rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-72") {
        @include assert {
          @include output {
            @include lg\:translate-x-72;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(18rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-72") {
        @include assert {
          @include output {
            @include lg\:translate-y-72;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 18rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-80") {
        @include assert {
          @include output {
            @include lg\:translate-x-80;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(20rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-80") {
        @include assert {
          @include output {
            @include lg\:translate-y-80;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 20rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-96") {
        @include assert {
          @include output {
            @include lg\:translate-x-96;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(24rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-96") {
        @include assert {
          @include output {
            @include lg\:translate-y-96;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 24rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-1\/2") {
        @include assert {
          @include output {
            @include lg\:translate-x-1\/2;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(50%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-1\/3") {
        @include assert {
          @include output {
            @include lg\:translate-x-1\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(33.333333%, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-2\/3") {
        @include assert {
          @include output {
            @include lg\:translate-x-2\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(66.666667%, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-1\/4") {
        @include assert {
          @include output {
            @include lg\:translate-x-1\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(25%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-2\/4") {
        @include assert {
          @include output {
            @include lg\:translate-x-2\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(50%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-3\/4") {
        @include assert {
          @include output {
            @include lg\:translate-x-3\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(75%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-full") {
        @include assert {
          @include output {
            @include lg\:translate-x-full;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(100%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-1\/2") {
        @include assert {
          @include output {
            @include lg\:translate-y-1\/2;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 50%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-1\/3") {
        @include assert {
          @include output {
            @include lg\:translate-y-1\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 33.333333%) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-2\/3") {
        @include assert {
          @include output {
            @include lg\:translate-y-2\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 66.666667%) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-1\/4") {
        @include assert {
          @include output {
            @include lg\:translate-y-1\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 25%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-2\/4") {
        @include assert {
          @include output {
            @include lg\:translate-y-2\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 50%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-3\/4") {
        @include assert {
          @include output {
            @include lg\:translate-y-3\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 75%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-full") {
        @include assert {
          @include output {
            @include lg\:translate-y-full;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 100%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-0") {
        @include assert {
          @include output {
            @include lg\:-translate-x-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-0px, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-0") {
        @include assert {
          @include output {
            @include lg\:-translate-y-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -0px) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-px") {
        @include assert {
          @include output {
            @include lg\:-translate-x-px;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-1px, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-px") {
        @include assert {
          @include output {
            @include lg\:-translate-y-px;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -1px) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-0\.5") {
        @include assert {
          @include output {
            @include lg\:-translate-x-0\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-0.125rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-0\.5") {
        @include assert {
          @include output {
            @include lg\:-translate-y-0\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -0.125rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-1") {
        @include assert {
          @include output {
            @include lg\:-translate-x-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-0.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-1") {
        @include assert {
          @include output {
            @include lg\:-translate-y-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -0.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-1\.5") {
        @include assert {
          @include output {
            @include lg\:-translate-x-1\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-0.375rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-1\.5") {
        @include assert {
          @include output {
            @include lg\:-translate-y-1\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -0.375rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-2") {
        @include assert {
          @include output {
            @include lg\:-translate-x-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-0.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-2") {
        @include assert {
          @include output {
            @include lg\:-translate-y-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -0.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-2\.5") {
        @include assert {
          @include output {
            @include lg\:-translate-x-2\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-0.625rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-2\.5") {
        @include assert {
          @include output {
            @include lg\:-translate-y-2\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -0.625rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-3") {
        @include assert {
          @include output {
            @include lg\:-translate-x-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-0.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-3") {
        @include assert {
          @include output {
            @include lg\:-translate-y-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -0.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-3\.5") {
        @include assert {
          @include output {
            @include lg\:-translate-x-3\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-0.875rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-3\.5") {
        @include assert {
          @include output {
            @include lg\:-translate-y-3\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -0.875rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-4") {
        @include assert {
          @include output {
            @include lg\:-translate-x-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-1rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-4") {
        @include assert {
          @include output {
            @include lg\:-translate-y-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -1rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-5") {
        @include assert {
          @include output {
            @include lg\:-translate-x-5;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-1.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-5") {
        @include assert {
          @include output {
            @include lg\:-translate-y-5;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -1.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-6") {
        @include assert {
          @include output {
            @include lg\:-translate-x-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-1.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-6") {
        @include assert {
          @include output {
            @include lg\:-translate-y-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -1.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-7") {
        @include assert {
          @include output {
            @include lg\:-translate-x-7;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-1.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-7") {
        @include assert {
          @include output {
            @include lg\:-translate-y-7;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -1.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-8") {
        @include assert {
          @include output {
            @include lg\:-translate-x-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-2rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-8") {
        @include assert {
          @include output {
            @include lg\:-translate-y-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -2rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-9") {
        @include assert {
          @include output {
            @include lg\:-translate-x-9;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-2.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-9") {
        @include assert {
          @include output {
            @include lg\:-translate-y-9;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -2.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-10") {
        @include assert {
          @include output {
            @include lg\:-translate-x-10;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-2.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-10") {
        @include assert {
          @include output {
            @include lg\:-translate-y-10;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -2.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-11") {
        @include assert {
          @include output {
            @include lg\:-translate-x-11;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-2.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-11") {
        @include assert {
          @include output {
            @include lg\:-translate-y-11;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -2.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-12") {
        @include assert {
          @include output {
            @include lg\:-translate-x-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-3rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-12") {
        @include assert {
          @include output {
            @include lg\:-translate-y-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -3rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-14") {
        @include assert {
          @include output {
            @include lg\:-translate-x-14;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-3.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-14") {
        @include assert {
          @include output {
            @include lg\:-translate-y-14;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -3.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-16") {
        @include assert {
          @include output {
            @include lg\:-translate-x-16;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-4rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-16") {
        @include assert {
          @include output {
            @include lg\:-translate-y-16;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -4rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-20") {
        @include assert {
          @include output {
            @include lg\:-translate-x-20;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-20") {
        @include assert {
          @include output {
            @include lg\:-translate-y-20;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-24") {
        @include assert {
          @include output {
            @include lg\:-translate-x-24;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-6rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-24") {
        @include assert {
          @include output {
            @include lg\:-translate-y-24;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -6rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-28") {
        @include assert {
          @include output {
            @include lg\:-translate-x-28;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-7rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-28") {
        @include assert {
          @include output {
            @include lg\:-translate-y-28;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -7rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-32") {
        @include assert {
          @include output {
            @include lg\:-translate-x-32;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-8rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-32") {
        @include assert {
          @include output {
            @include lg\:-translate-y-32;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -8rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-36") {
        @include assert {
          @include output {
            @include lg\:-translate-x-36;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-9rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-36") {
        @include assert {
          @include output {
            @include lg\:-translate-y-36;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -9rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-40") {
        @include assert {
          @include output {
            @include lg\:-translate-x-40;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-10rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-40") {
        @include assert {
          @include output {
            @include lg\:-translate-y-40;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -10rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-44") {
        @include assert {
          @include output {
            @include lg\:-translate-x-44;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-11rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-44") {
        @include assert {
          @include output {
            @include lg\:-translate-y-44;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -11rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-48") {
        @include assert {
          @include output {
            @include lg\:-translate-x-48;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-12rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-48") {
        @include assert {
          @include output {
            @include lg\:-translate-y-48;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -12rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-52") {
        @include assert {
          @include output {
            @include lg\:-translate-x-52;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-13rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-52") {
        @include assert {
          @include output {
            @include lg\:-translate-y-52;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -13rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-56") {
        @include assert {
          @include output {
            @include lg\:-translate-x-56;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-14rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-56") {
        @include assert {
          @include output {
            @include lg\:-translate-y-56;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -14rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-60") {
        @include assert {
          @include output {
            @include lg\:-translate-x-60;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-15rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-60") {
        @include assert {
          @include output {
            @include lg\:-translate-y-60;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -15rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-64") {
        @include assert {
          @include output {
            @include lg\:-translate-x-64;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-16rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-64") {
        @include assert {
          @include output {
            @include lg\:-translate-y-64;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -16rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-72") {
        @include assert {
          @include output {
            @include lg\:-translate-x-72;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-18rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-72") {
        @include assert {
          @include output {
            @include lg\:-translate-y-72;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -18rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-80") {
        @include assert {
          @include output {
            @include lg\:-translate-x-80;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-20rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-80") {
        @include assert {
          @include output {
            @include lg\:-translate-y-80;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -20rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-96") {
        @include assert {
          @include output {
            @include lg\:-translate-x-96;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-24rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-96") {
        @include assert {
          @include output {
            @include lg\:-translate-y-96;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -24rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-1\/2") {
        @include assert {
          @include output {
            @include lg\:-translate-x-1\/2;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-50%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-1\/3") {
        @include assert {
          @include output {
            @include lg\:-translate-x-1\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-33.333333%, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-2\/3") {
        @include assert {
          @include output {
            @include lg\:-translate-x-2\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-66.666667%, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-1\/4") {
        @include assert {
          @include output {
            @include lg\:-translate-x-1\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-25%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-2\/4") {
        @include assert {
          @include output {
            @include lg\:-translate-x-2\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-50%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-3\/4") {
        @include assert {
          @include output {
            @include lg\:-translate-x-3\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-75%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-full") {
        @include assert {
          @include output {
            @include lg\:-translate-x-full;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-100%, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-1\/2") {
        @include assert {
          @include output {
            @include lg\:-translate-y-1\/2;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -50%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-1\/3") {
        @include assert {
          @include output {
            @include lg\:-translate-y-1\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -33.333333%) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-2\/3") {
        @include assert {
          @include output {
            @include lg\:-translate-y-2\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -66.666667%) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-1\/4") {
        @include assert {
          @include output {
            @include lg\:-translate-y-1\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -25%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-2\/4") {
        @include assert {
          @include output {
            @include lg\:-translate-y-2\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -50%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-3\/4") {
        @include assert {
          @include output {
            @include lg\:-translate-y-3\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -75%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-full") {
        @include assert {
          @include output {
            @include lg\:-translate-y-full;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -100%) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-0") {
        @include assert {
          @include output {
            @include xl\:translate-x-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0px, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-0") {
        @include assert {
          @include output {
            @include xl\:translate-y-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0px) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-px") {
        @include assert {
          @include output {
            @include xl\:translate-x-px;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(1px, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-px") {
        @include assert {
          @include output {
            @include xl\:translate-y-px;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 1px) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-0\.5") {
        @include assert {
          @include output {
            @include xl\:translate-x-0\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0.125rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-0\.5") {
        @include assert {
          @include output {
            @include xl\:translate-y-0\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0.125rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-1") {
        @include assert {
          @include output {
            @include xl\:translate-x-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-1") {
        @include assert {
          @include output {
            @include xl\:translate-y-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-1\.5") {
        @include assert {
          @include output {
            @include xl\:translate-x-1\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0.375rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-1\.5") {
        @include assert {
          @include output {
            @include xl\:translate-y-1\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0.375rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-2") {
        @include assert {
          @include output {
            @include xl\:translate-x-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-2") {
        @include assert {
          @include output {
            @include xl\:translate-y-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-2\.5") {
        @include assert {
          @include output {
            @include xl\:translate-x-2\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0.625rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-2\.5") {
        @include assert {
          @include output {
            @include xl\:translate-y-2\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0.625rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-3") {
        @include assert {
          @include output {
            @include xl\:translate-x-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-3") {
        @include assert {
          @include output {
            @include xl\:translate-y-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-3\.5") {
        @include assert {
          @include output {
            @include xl\:translate-x-3\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0.875rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-3\.5") {
        @include assert {
          @include output {
            @include xl\:translate-y-3\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0.875rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-4") {
        @include assert {
          @include output {
            @include xl\:translate-x-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(1rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-4") {
        @include assert {
          @include output {
            @include xl\:translate-y-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 1rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-5") {
        @include assert {
          @include output {
            @include xl\:translate-x-5;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(1.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-5") {
        @include assert {
          @include output {
            @include xl\:translate-y-5;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 1.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-6") {
        @include assert {
          @include output {
            @include xl\:translate-x-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(1.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-6") {
        @include assert {
          @include output {
            @include xl\:translate-y-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 1.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-7") {
        @include assert {
          @include output {
            @include xl\:translate-x-7;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(1.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-7") {
        @include assert {
          @include output {
            @include xl\:translate-y-7;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 1.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-8") {
        @include assert {
          @include output {
            @include xl\:translate-x-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(2rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-8") {
        @include assert {
          @include output {
            @include xl\:translate-y-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 2rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-9") {
        @include assert {
          @include output {
            @include xl\:translate-x-9;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(2.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-9") {
        @include assert {
          @include output {
            @include xl\:translate-y-9;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 2.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-10") {
        @include assert {
          @include output {
            @include xl\:translate-x-10;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(2.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-10") {
        @include assert {
          @include output {
            @include xl\:translate-y-10;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 2.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-11") {
        @include assert {
          @include output {
            @include xl\:translate-x-11;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(2.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-11") {
        @include assert {
          @include output {
            @include xl\:translate-y-11;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 2.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-12") {
        @include assert {
          @include output {
            @include xl\:translate-x-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(3rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-12") {
        @include assert {
          @include output {
            @include xl\:translate-y-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 3rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-14") {
        @include assert {
          @include output {
            @include xl\:translate-x-14;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(3.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-14") {
        @include assert {
          @include output {
            @include xl\:translate-y-14;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 3.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-16") {
        @include assert {
          @include output {
            @include xl\:translate-x-16;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(4rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-16") {
        @include assert {
          @include output {
            @include xl\:translate-y-16;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 4rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-20") {
        @include assert {
          @include output {
            @include xl\:translate-x-20;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-20") {
        @include assert {
          @include output {
            @include xl\:translate-y-20;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 5rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-24") {
        @include assert {
          @include output {
            @include xl\:translate-x-24;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(6rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-24") {
        @include assert {
          @include output {
            @include xl\:translate-y-24;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 6rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-28") {
        @include assert {
          @include output {
            @include xl\:translate-x-28;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(7rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-28") {
        @include assert {
          @include output {
            @include xl\:translate-y-28;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 7rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-32") {
        @include assert {
          @include output {
            @include xl\:translate-x-32;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(8rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-32") {
        @include assert {
          @include output {
            @include xl\:translate-y-32;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 8rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-36") {
        @include assert {
          @include output {
            @include xl\:translate-x-36;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(9rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-36") {
        @include assert {
          @include output {
            @include xl\:translate-y-36;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 9rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-40") {
        @include assert {
          @include output {
            @include xl\:translate-x-40;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(10rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-40") {
        @include assert {
          @include output {
            @include xl\:translate-y-40;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 10rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-44") {
        @include assert {
          @include output {
            @include xl\:translate-x-44;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(11rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-44") {
        @include assert {
          @include output {
            @include xl\:translate-y-44;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 11rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-48") {
        @include assert {
          @include output {
            @include xl\:translate-x-48;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(12rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-48") {
        @include assert {
          @include output {
            @include xl\:translate-y-48;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 12rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-52") {
        @include assert {
          @include output {
            @include xl\:translate-x-52;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(13rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-52") {
        @include assert {
          @include output {
            @include xl\:translate-y-52;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 13rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-56") {
        @include assert {
          @include output {
            @include xl\:translate-x-56;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(14rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-56") {
        @include assert {
          @include output {
            @include xl\:translate-y-56;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 14rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-60") {
        @include assert {
          @include output {
            @include xl\:translate-x-60;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(15rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-60") {
        @include assert {
          @include output {
            @include xl\:translate-y-60;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 15rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-64") {
        @include assert {
          @include output {
            @include xl\:translate-x-64;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(16rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-64") {
        @include assert {
          @include output {
            @include xl\:translate-y-64;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 16rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-72") {
        @include assert {
          @include output {
            @include xl\:translate-x-72;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(18rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-72") {
        @include assert {
          @include output {
            @include xl\:translate-y-72;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 18rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-80") {
        @include assert {
          @include output {
            @include xl\:translate-x-80;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(20rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-80") {
        @include assert {
          @include output {
            @include xl\:translate-y-80;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 20rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-96") {
        @include assert {
          @include output {
            @include xl\:translate-x-96;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(24rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-96") {
        @include assert {
          @include output {
            @include xl\:translate-y-96;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 24rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-1\/2") {
        @include assert {
          @include output {
            @include xl\:translate-x-1\/2;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(50%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-1\/3") {
        @include assert {
          @include output {
            @include xl\:translate-x-1\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(33.333333%, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-2\/3") {
        @include assert {
          @include output {
            @include xl\:translate-x-2\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(66.666667%, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-1\/4") {
        @include assert {
          @include output {
            @include xl\:translate-x-1\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(25%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-2\/4") {
        @include assert {
          @include output {
            @include xl\:translate-x-2\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(50%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-3\/4") {
        @include assert {
          @include output {
            @include xl\:translate-x-3\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(75%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-full") {
        @include assert {
          @include output {
            @include xl\:translate-x-full;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(100%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-1\/2") {
        @include assert {
          @include output {
            @include xl\:translate-y-1\/2;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 50%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-1\/3") {
        @include assert {
          @include output {
            @include xl\:translate-y-1\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 33.333333%) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-2\/3") {
        @include assert {
          @include output {
            @include xl\:translate-y-2\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 66.666667%) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-1\/4") {
        @include assert {
          @include output {
            @include xl\:translate-y-1\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 25%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-2\/4") {
        @include assert {
          @include output {
            @include xl\:translate-y-2\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 50%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-3\/4") {
        @include assert {
          @include output {
            @include xl\:translate-y-3\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 75%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-full") {
        @include assert {
          @include output {
            @include xl\:translate-y-full;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 100%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-0") {
        @include assert {
          @include output {
            @include xl\:-translate-x-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-0px, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-0") {
        @include assert {
          @include output {
            @include xl\:-translate-y-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -0px) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-px") {
        @include assert {
          @include output {
            @include xl\:-translate-x-px;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-1px, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-px") {
        @include assert {
          @include output {
            @include xl\:-translate-y-px;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -1px) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-0\.5") {
        @include assert {
          @include output {
            @include xl\:-translate-x-0\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-0.125rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-0\.5") {
        @include assert {
          @include output {
            @include xl\:-translate-y-0\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -0.125rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-1") {
        @include assert {
          @include output {
            @include xl\:-translate-x-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-0.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-1") {
        @include assert {
          @include output {
            @include xl\:-translate-y-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -0.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-1\.5") {
        @include assert {
          @include output {
            @include xl\:-translate-x-1\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-0.375rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-1\.5") {
        @include assert {
          @include output {
            @include xl\:-translate-y-1\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -0.375rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-2") {
        @include assert {
          @include output {
            @include xl\:-translate-x-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-0.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-2") {
        @include assert {
          @include output {
            @include xl\:-translate-y-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -0.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-2\.5") {
        @include assert {
          @include output {
            @include xl\:-translate-x-2\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-0.625rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-2\.5") {
        @include assert {
          @include output {
            @include xl\:-translate-y-2\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -0.625rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-3") {
        @include assert {
          @include output {
            @include xl\:-translate-x-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-0.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-3") {
        @include assert {
          @include output {
            @include xl\:-translate-y-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -0.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-3\.5") {
        @include assert {
          @include output {
            @include xl\:-translate-x-3\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-0.875rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-3\.5") {
        @include assert {
          @include output {
            @include xl\:-translate-y-3\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -0.875rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-4") {
        @include assert {
          @include output {
            @include xl\:-translate-x-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-1rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-4") {
        @include assert {
          @include output {
            @include xl\:-translate-y-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -1rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-5") {
        @include assert {
          @include output {
            @include xl\:-translate-x-5;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-1.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-5") {
        @include assert {
          @include output {
            @include xl\:-translate-y-5;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -1.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-6") {
        @include assert {
          @include output {
            @include xl\:-translate-x-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-1.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-6") {
        @include assert {
          @include output {
            @include xl\:-translate-y-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -1.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-7") {
        @include assert {
          @include output {
            @include xl\:-translate-x-7;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-1.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-7") {
        @include assert {
          @include output {
            @include xl\:-translate-y-7;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -1.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-8") {
        @include assert {
          @include output {
            @include xl\:-translate-x-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-2rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-8") {
        @include assert {
          @include output {
            @include xl\:-translate-y-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -2rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-9") {
        @include assert {
          @include output {
            @include xl\:-translate-x-9;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-2.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-9") {
        @include assert {
          @include output {
            @include xl\:-translate-y-9;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -2.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-10") {
        @include assert {
          @include output {
            @include xl\:-translate-x-10;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-2.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-10") {
        @include assert {
          @include output {
            @include xl\:-translate-y-10;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -2.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-11") {
        @include assert {
          @include output {
            @include xl\:-translate-x-11;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-2.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-11") {
        @include assert {
          @include output {
            @include xl\:-translate-y-11;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -2.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-12") {
        @include assert {
          @include output {
            @include xl\:-translate-x-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-3rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-12") {
        @include assert {
          @include output {
            @include xl\:-translate-y-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -3rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-14") {
        @include assert {
          @include output {
            @include xl\:-translate-x-14;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-3.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-14") {
        @include assert {
          @include output {
            @include xl\:-translate-y-14;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -3.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-16") {
        @include assert {
          @include output {
            @include xl\:-translate-x-16;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-4rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-16") {
        @include assert {
          @include output {
            @include xl\:-translate-y-16;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -4rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-20") {
        @include assert {
          @include output {
            @include xl\:-translate-x-20;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-20") {
        @include assert {
          @include output {
            @include xl\:-translate-y-20;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-24") {
        @include assert {
          @include output {
            @include xl\:-translate-x-24;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-6rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-24") {
        @include assert {
          @include output {
            @include xl\:-translate-y-24;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -6rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-28") {
        @include assert {
          @include output {
            @include xl\:-translate-x-28;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-7rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-28") {
        @include assert {
          @include output {
            @include xl\:-translate-y-28;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -7rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-32") {
        @include assert {
          @include output {
            @include xl\:-translate-x-32;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-8rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-32") {
        @include assert {
          @include output {
            @include xl\:-translate-y-32;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -8rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-36") {
        @include assert {
          @include output {
            @include xl\:-translate-x-36;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-9rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-36") {
        @include assert {
          @include output {
            @include xl\:-translate-y-36;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -9rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-40") {
        @include assert {
          @include output {
            @include xl\:-translate-x-40;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-10rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-40") {
        @include assert {
          @include output {
            @include xl\:-translate-y-40;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -10rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-44") {
        @include assert {
          @include output {
            @include xl\:-translate-x-44;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-11rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-44") {
        @include assert {
          @include output {
            @include xl\:-translate-y-44;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -11rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-48") {
        @include assert {
          @include output {
            @include xl\:-translate-x-48;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-12rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-48") {
        @include assert {
          @include output {
            @include xl\:-translate-y-48;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -12rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-52") {
        @include assert {
          @include output {
            @include xl\:-translate-x-52;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-13rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-52") {
        @include assert {
          @include output {
            @include xl\:-translate-y-52;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -13rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-56") {
        @include assert {
          @include output {
            @include xl\:-translate-x-56;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-14rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-56") {
        @include assert {
          @include output {
            @include xl\:-translate-y-56;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -14rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-60") {
        @include assert {
          @include output {
            @include xl\:-translate-x-60;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-15rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-60") {
        @include assert {
          @include output {
            @include xl\:-translate-y-60;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -15rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-64") {
        @include assert {
          @include output {
            @include xl\:-translate-x-64;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-16rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-64") {
        @include assert {
          @include output {
            @include xl\:-translate-y-64;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -16rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-72") {
        @include assert {
          @include output {
            @include xl\:-translate-x-72;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-18rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-72") {
        @include assert {
          @include output {
            @include xl\:-translate-y-72;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -18rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-80") {
        @include assert {
          @include output {
            @include xl\:-translate-x-80;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-20rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-80") {
        @include assert {
          @include output {
            @include xl\:-translate-y-80;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -20rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-96") {
        @include assert {
          @include output {
            @include xl\:-translate-x-96;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-24rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-96") {
        @include assert {
          @include output {
            @include xl\:-translate-y-96;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -24rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-1\/2") {
        @include assert {
          @include output {
            @include xl\:-translate-x-1\/2;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-50%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-1\/3") {
        @include assert {
          @include output {
            @include xl\:-translate-x-1\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-33.333333%, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-2\/3") {
        @include assert {
          @include output {
            @include xl\:-translate-x-2\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-66.666667%, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-1\/4") {
        @include assert {
          @include output {
            @include xl\:-translate-x-1\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-25%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-2\/4") {
        @include assert {
          @include output {
            @include xl\:-translate-x-2\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-50%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-3\/4") {
        @include assert {
          @include output {
            @include xl\:-translate-x-3\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-75%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-full") {
        @include assert {
          @include output {
            @include xl\:-translate-x-full;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-100%, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-1\/2") {
        @include assert {
          @include output {
            @include xl\:-translate-y-1\/2;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -50%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-1\/3") {
        @include assert {
          @include output {
            @include xl\:-translate-y-1\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -33.333333%) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-2\/3") {
        @include assert {
          @include output {
            @include xl\:-translate-y-2\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -66.666667%) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-1\/4") {
        @include assert {
          @include output {
            @include xl\:-translate-y-1\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -25%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-2\/4") {
        @include assert {
          @include output {
            @include xl\:-translate-y-2\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -50%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-3\/4") {
        @include assert {
          @include output {
            @include xl\:-translate-y-3\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -75%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-full") {
        @include assert {
          @include output {
            @include xl\:-translate-y-full;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -100%) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-0") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0px, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-0") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0px) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-px") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-px;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(1px, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-px") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-px;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 1px) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-0\.5") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-0\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0.125rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-0\.5") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-0\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0.125rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-1") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-1") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-1\.5") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-1\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0.375rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-1\.5") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-1\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0.375rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-2") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-2") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-2\.5") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-2\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0.625rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-2\.5") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-2\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0.625rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-3") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-3") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-3\.5") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-3\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0.875rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-3\.5") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-3\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0.875rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-4") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(1rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-4") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 1rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-5") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-5;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(1.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-5") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-5;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 1.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-6") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(1.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-6") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 1.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-7") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-7;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(1.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-7") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-7;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 1.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-8") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(2rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-8") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 2rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-9") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-9;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(2.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-9") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-9;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 2.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-10") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-10;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(2.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-10") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-10;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 2.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-11") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-11;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(2.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-11") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-11;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 2.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-12") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(3rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-12") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 3rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-14") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-14;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(3.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-14") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-14;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 3.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-16") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-16;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(4rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-16") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-16;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 4rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-20") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-20;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(5rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-20") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-20;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 5rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-24") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-24;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(6rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-24") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-24;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 6rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-28") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-28;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(7rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-28") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-28;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 7rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-32") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-32;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(8rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-32") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-32;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 8rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-36") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-36;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(9rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-36") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-36;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 9rem) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-40") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-40;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(10rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-40") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-40;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 10rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-44") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-44;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(11rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-44") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-44;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 11rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-48") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-48;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(12rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-48") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-48;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 12rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-52") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-52;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(13rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-52") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-52;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 13rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-56") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-56;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(14rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-56") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-56;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 14rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-60") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-60;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(15rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-60") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-60;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 15rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-64") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-64;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(16rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-64") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-64;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 16rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-72") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-72;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(18rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-72") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-72;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 18rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-80") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-80;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(20rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-80") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-80;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 20rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-96") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-96;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(24rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-96") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-96;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 24rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-1\/2") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-1\/2;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(50%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-1\/3") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-1\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(33.333333%, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-2\/3") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-2\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(66.666667%, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-1\/4") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-1\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(25%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-2\/4") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-2\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(50%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-3\/4") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-3\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(75%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-full") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-full;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(100%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-1\/2") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-1\/2;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 50%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-1\/3") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-1\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 33.333333%) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-2\/3") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-2\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 66.666667%) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-1\/4") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-1\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 25%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-2\/4") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-2\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 50%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-3\/4") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-3\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 75%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-full") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-full;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 100%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-0") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-0px, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-0") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -0px) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-px") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-px;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-1px, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-px") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-px;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -1px) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-0\.5") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-0\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-0.125rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-0\.5") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-0\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -0.125rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-1") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-0.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-1") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -0.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-1\.5") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-1\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-0.375rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-1\.5") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-1\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -0.375rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-2") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-0.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-2") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -0.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-2\.5") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-2\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-0.625rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-2\.5") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-2\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -0.625rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-3") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-0.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-3") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -0.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-3\.5") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-3\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-0.875rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-3\.5") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-3\.5;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -0.875rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-4") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-1rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-4") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-4;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -1rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-5") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-5;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-1.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-5") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-5;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -1.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-6") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-1.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-6") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -1.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-7") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-7;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-1.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-7") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-7;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -1.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-8") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-2rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-8") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-8;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -2rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-9") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-9;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-2.25rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-9") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-9;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -2.25rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-10") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-10;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-2.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-10") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-10;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -2.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-11") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-11;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-2.75rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-11") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-11;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -2.75rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-12") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-3rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-12") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -3rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-14") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-14;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-3.5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-14") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-14;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -3.5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-16") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-16;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-4rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-16") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-16;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -4rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-20") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-20;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-5rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-20") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-20;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -5rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-24") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-24;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-6rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-24") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-24;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -6rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-28") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-28;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-7rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-28") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-28;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -7rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-32") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-32;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-8rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-32") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-32;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -8rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-36") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-36;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-9rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-36") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-36;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -9rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-40") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-40;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-10rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-40") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-40;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -10rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-44") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-44;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-11rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-44") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-44;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -11rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-48") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-48;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-12rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-48") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-48;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -12rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-52") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-52;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-13rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-52") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-52;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -13rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-56") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-56;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-14rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-56") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-56;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -14rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-60") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-60;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-15rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-60") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-60;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -15rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-64") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-64;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-16rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-64") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-64;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -16rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-72") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-72;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-18rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-72") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-72;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -18rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-80") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-80;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-20rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-80") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-80;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -20rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-96") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-96;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-24rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-96") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-96;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -24rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-1\/2") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-1\/2;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-50%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-1\/3") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-1\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-33.333333%, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-2\/3") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-2\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-66.666667%, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-1\/4") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-1\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-25%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-2\/4") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-2\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-50%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-3\/4") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-3\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-75%, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-full") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-full;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-100%, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-1\/2") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-1\/2;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -50%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-1\/3") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-1\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -33.333333%) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-2\/3") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-2\/3;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -66.666667%) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-1\/4") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-1\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -25%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-2\/4") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-2\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -50%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-3\/4") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-3\/4;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -75%) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-full") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-full;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -100%) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    }

    @include describe("Custom") {
      @include it("translate-x-(17rem)") {
        @include assert {
          @include output {
            @include translate-x-(17rem);
            @include reset;
          }

          @include expect {
            transform: translate(17rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("translate-y-(17rem)") {
        @include assert {
          @include output {
            @include translate-y-(17rem);
            @include reset;
          }

          @include expect {
            transform: translate(0, 17rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-x-(17rem)") {
        @include assert {
          @include output {
            @include -translate-x-(17rem);
            @include reset;
          }

          @include expect {
            transform: translate(-17rem, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-translate-y-(17rem)") {
        @include assert {
          @include output {
            @include -translate-y-(17rem);
            @include reset;
          }

          @include expect {
            transform: translate(0, -17rem) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("sm\:translate-x-(17rem)") {
        @include assert {
          @include output {
            @include sm\:translate-x-(17rem);
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(17rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:translate-y-(17rem)") {
        @include assert {
          @include output {
            @include sm\:translate-y-(17rem);
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 17rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-x-(17rem)") {
        @include assert {
          @include output {
            @include sm\:-translate-x-(17rem);
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(-17rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-translate-y-(17rem)") {
        @include assert {
          @include output {
            @include sm\:-translate-y-(17rem);
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, -17rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-x-(17rem)") {
        @include assert {
          @include output {
            @include md\:translate-x-(17rem);
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(17rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:translate-y-(17rem)") {
        @include assert {
          @include output {
            @include md\:translate-y-(17rem);
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 17rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-x-(17rem)") {
        @include assert {
          @include output {
            @include md\:-translate-x-(17rem);
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(-17rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-translate-y-(17rem)") {
        @include assert {
          @include output {
            @include md\:-translate-y-(17rem);
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, -17rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-x-(17rem)") {
        @include assert {
          @include output {
            @include lg\:translate-x-(17rem);
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(17rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:translate-y-(17rem)") {
        @include assert {
          @include output {
            @include lg\:translate-y-(17rem);
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 17rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-x-(17rem)") {
        @include assert {
          @include output {
            @include lg\:-translate-x-(17rem);
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(-17rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-translate-y-(17rem)") {
        @include assert {
          @include output {
            @include lg\:-translate-y-(17rem);
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, -17rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-x-(17rem)") {
        @include assert {
          @include output {
            @include xl\:translate-x-(17rem);
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(17rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:translate-y-(17rem)") {
        @include assert {
          @include output {
            @include xl\:translate-y-(17rem);
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 17rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-x-(17rem)") {
        @include assert {
          @include output {
            @include xl\:-translate-x-(17rem);
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(-17rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-translate-y-(17rem)") {
        @include assert {
          @include output {
            @include xl\:-translate-y-(17rem);
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, -17rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-x-(17rem)") {
        @include assert {
          @include output {
            @include \2xl\:translate-x-(17rem);
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(17rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:translate-y-(17rem)") {
        @include assert {
          @include output {
            @include \2xl\:translate-y-(17rem);
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 17rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-x-(17rem)") {
        @include assert {
          @include output {
            @include \2xl\:-translate-x-(17rem);
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(-17rem, 0) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("\2xl\:-translate-y-(17rem)") {
        @include assert {
          @include output {
            @include \2xl\:-translate-y-(17rem);
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, -17rem) rotate(0deg) skewX(0deg)
                skewY(0deg) scaleX(1) scaleY(1);
            }
          }
        }
      }
    }
  }
}
