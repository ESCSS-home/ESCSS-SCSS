@use "../../mode0" as *;
@use "true" as *;

// for testing negative values

@mixin -rotate-0 {
  @include rotate-(-0deg);
}

@mixin -rotate-1 {
  @include rotate-(-1deg);
}

@mixin -rotate-2 {
  @include rotate-(-2deg);
}

@mixin -rotate-3 {
  @include rotate-(-3deg);
}

@mixin -rotate-6 {
  @include rotate-(-6deg);
}

@mixin -rotate-12 {
  @include rotate-(-12deg);
}

@mixin -rotate-45 {
  @include rotate-(-45deg);
}

@mixin -rotate-90 {
  @include rotate-(-90deg);
}

@mixin -rotate-180 {
  @include rotate-(-180deg);
}

@mixin sm\:-rotate-0 {
  @include rotate-(-0deg, $sm);
}

@mixin sm\:-rotate-1 {
  @include rotate-(-1deg, $sm);
}

@mixin sm\:-rotate-2 {
  @include rotate-(-2deg, $sm);
}

@mixin sm\:-rotate-3 {
  @include rotate-(-3deg, $sm);
}

@mixin sm\:-rotate-6 {
  @include rotate-(-6deg, $sm);
}

@mixin sm\:-rotate-12 {
  @include rotate-(-12deg, $sm);
}

@mixin sm\:-rotate-45 {
  @include rotate-(-45deg, $sm);
}

@mixin sm\:-rotate-90 {
  @include rotate-(-90deg, $sm);
}

@mixin sm\:-rotate-180 {
  @include rotate-(-180deg, $sm);
}

@mixin md\:-rotate-0 {
  @include rotate-(-0deg, $md);
}

@mixin md\:-rotate-1 {
  @include rotate-(-1deg, $md);
}

@mixin md\:-rotate-2 {
  @include rotate-(-2deg, $md);
}

@mixin md\:-rotate-3 {
  @include rotate-(-3deg, $md);
}

@mixin md\:-rotate-6 {
  @include rotate-(-6deg, $md);
}

@mixin md\:-rotate-12 {
  @include rotate-(-12deg, $md);
}

@mixin md\:-rotate-45 {
  @include rotate-(-45deg, $md);
}

@mixin md\:-rotate-90 {
  @include rotate-(-90deg, $md);
}

@mixin md\:-rotate-180 {
  @include rotate-(-180deg, $md);
}

@mixin lg\:-rotate-0 {
  @include rotate-(-0deg, $lg);
}

@mixin lg\:-rotate-1 {
  @include rotate-(-1deg, $lg);
}

@mixin lg\:-rotate-2 {
  @include rotate-(-2deg, $lg);
}

@mixin lg\:-rotate-3 {
  @include rotate-(-3deg, $lg);
}

@mixin lg\:-rotate-6 {
  @include rotate-(-6deg, $lg);
}

@mixin lg\:-rotate-12 {
  @include rotate-(-12deg, $lg);
}

@mixin lg\:-rotate-45 {
  @include rotate-(-45deg, $lg);
}

@mixin lg\:-rotate-90 {
  @include rotate-(-90deg, $lg);
}

@mixin lg\:-rotate-180 {
  @include rotate-(-180deg, $lg);
}

@mixin xl\:-rotate-0 {
  @include rotate-(-0deg, $xl);
}

@mixin xl\:-rotate-1 {
  @include rotate-(-1deg, $xl);
}

@mixin xl\:-rotate-2 {
  @include rotate-(-2deg, $xl);
}

@mixin xl\:-rotate-3 {
  @include rotate-(-3deg, $xl);
}

@mixin xl\:-rotate-6 {
  @include rotate-(-6deg, $xl);
}

@mixin xl\:-rotate-12 {
  @include rotate-(-12deg, $xl);
}

@mixin xl\:-rotate-45 {
  @include rotate-(-45deg, $xl);
}

@mixin xl\:-rotate-90 {
  @include rotate-(-90deg, $xl);
}

@mixin xl\:-rotate-180 {
  @include rotate-(-180deg, $xl);
}

@mixin \2xl\:-rotate-0 {
  @include rotate-(-0deg, $\2xl);
}

@mixin \2xl\:-rotate-1 {
  @include rotate-(-1deg, $\2xl);
}

@mixin \2xl\:-rotate-2 {
  @include rotate-(-2deg, $\2xl);
}

@mixin \2xl\:-rotate-3 {
  @include rotate-(-3deg, $\2xl);
}

@mixin \2xl\:-rotate-6 {
  @include rotate-(-6deg, $\2xl);
}

@mixin \2xl\:-rotate-12 {
  @include rotate-(-12deg, $\2xl);
}

@mixin \2xl\:-rotate-45 {
  @include rotate-(-45deg, $\2xl);
}

@mixin \2xl\:-rotate-90 {
  @include rotate-(-90deg, $\2xl);
}

@mixin \2xl\:-rotate-180 {
  @include rotate-(-180deg, $\2xl);
}

@mixin -rotate-($v) {
  @include rotate-(-($v));
}

@mixin sm\:-rotate-($v) {
  @include rotate-(-($v), $sm);
}

@mixin md\:-rotate-($v) {
  @include rotate-(-($v), $md);
}

@mixin lg\:-rotate-($v) {
  @include rotate-(-($v), $lg);
}

@mixin xl\:-rotate-($v) {
  @include rotate-(-($v), $xl);
}

@mixin \2xl\:-rotate-($v) {
  @include rotate-(-($v), $\2xl);
}

@include describe("12.Transforms") {
  @include describe("Rotate") {
    @include describe("Basic") {
      @include it("rotate-0") {
        @include assert {
          @include output {
            @include rotate-0;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("rotate-1") {
        @include assert {
          @include output {
            @include rotate-1;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(1deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("rotate-2") {
        @include assert {
          @include output {
            @include rotate-2;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(2deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("rotate-3") {
        @include assert {
          @include output {
            @include rotate-3;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(3deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("rotate-6") {
        @include assert {
          @include output {
            @include rotate-6;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(6deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("rotate-12") {
        @include assert {
          @include output {
            @include rotate-12;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(12deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("rotate-45") {
        @include assert {
          @include output {
            @include rotate-45;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(45deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("rotate-90") {
        @include assert {
          @include output {
            @include rotate-90;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(90deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("rotate-180") {
        @include assert {
          @include output {
            @include rotate-180;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(180deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-rotate-0") {
        @include assert {
          @include output {
            @include -rotate-0;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(-0deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-rotate-1") {
        @include assert {
          @include output {
            @include -rotate-1;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(-1deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-rotate-2") {
        @include assert {
          @include output {
            @include -rotate-2;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(-2deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-rotate-3") {
        @include assert {
          @include output {
            @include -rotate-3;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(-3deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-rotate-6") {
        @include assert {
          @include output {
            @include -rotate-6;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(-6deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-rotate-12") {
        @include assert {
          @include output {
            @include -rotate-12;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(-12deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-rotate-45") {
        @include assert {
          @include output {
            @include -rotate-45;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(-45deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-rotate-90") {
        @include assert {
          @include output {
            @include -rotate-90;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(-90deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-rotate-180") {
        @include assert {
          @include output {
            @include -rotate-180;
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(-180deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }
    }

    @include describe("Rwd") {
      @include it("sm\:rotate-0") {
        @include assert {
          @include output {
            @include sm\:rotate-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:rotate-1") {
        @include assert {
          @include output {
            @include sm\:rotate-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(1deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:rotate-2") {
        @include assert {
          @include output {
            @include sm\:rotate-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(2deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:rotate-3") {
        @include assert {
          @include output {
            @include sm\:rotate-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(3deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:rotate-6") {
        @include assert {
          @include output {
            @include sm\:rotate-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(6deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:rotate-12") {
        @include assert {
          @include output {
            @include sm\:rotate-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(12deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:rotate-45") {
        @include assert {
          @include output {
            @include sm\:rotate-45;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(45deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:rotate-90") {
        @include assert {
          @include output {
            @include sm\:rotate-90;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(90deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:rotate-180") {
        @include assert {
          @include output {
            @include sm\:rotate-180;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(180deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-rotate-0") {
        @include assert {
          @include output {
            @include sm\:-rotate-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(-0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-rotate-1") {
        @include assert {
          @include output {
            @include sm\:-rotate-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(-1deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-rotate-2") {
        @include assert {
          @include output {
            @include sm\:-rotate-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(-2deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-rotate-3") {
        @include assert {
          @include output {
            @include sm\:-rotate-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(-3deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-rotate-6") {
        @include assert {
          @include output {
            @include sm\:-rotate-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(-6deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-rotate-12") {
        @include assert {
          @include output {
            @include sm\:-rotate-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(-12deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-rotate-45") {
        @include assert {
          @include output {
            @include sm\:-rotate-45;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(-45deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-rotate-90") {
        @include assert {
          @include output {
            @include sm\:-rotate-90;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(-90deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-rotate-180") {
        @include assert {
          @include output {
            @include sm\:-rotate-180;
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(-180deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:rotate-0") {
        @include assert {
          @include output {
            @include md\:rotate-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:rotate-1") {
        @include assert {
          @include output {
            @include md\:rotate-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(1deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:rotate-2") {
        @include assert {
          @include output {
            @include md\:rotate-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(2deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:rotate-3") {
        @include assert {
          @include output {
            @include md\:rotate-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(3deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:rotate-6") {
        @include assert {
          @include output {
            @include md\:rotate-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(6deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:rotate-12") {
        @include assert {
          @include output {
            @include md\:rotate-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(12deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:rotate-45") {
        @include assert {
          @include output {
            @include md\:rotate-45;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(45deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:rotate-90") {
        @include assert {
          @include output {
            @include md\:rotate-90;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(90deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:rotate-180") {
        @include assert {
          @include output {
            @include md\:rotate-180;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(180deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-rotate-0") {
        @include assert {
          @include output {
            @include md\:-rotate-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(-0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-rotate-1") {
        @include assert {
          @include output {
            @include md\:-rotate-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(-1deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-rotate-2") {
        @include assert {
          @include output {
            @include md\:-rotate-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(-2deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-rotate-3") {
        @include assert {
          @include output {
            @include md\:-rotate-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(-3deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-rotate-6") {
        @include assert {
          @include output {
            @include md\:-rotate-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(-6deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-rotate-12") {
        @include assert {
          @include output {
            @include md\:-rotate-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(-12deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-rotate-45") {
        @include assert {
          @include output {
            @include md\:-rotate-45;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(-45deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-rotate-90") {
        @include assert {
          @include output {
            @include md\:-rotate-90;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(-90deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-rotate-180") {
        @include assert {
          @include output {
            @include md\:-rotate-180;
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(-180deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:rotate-0") {
        @include assert {
          @include output {
            @include lg\:rotate-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:rotate-1") {
        @include assert {
          @include output {
            @include lg\:rotate-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(1deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:rotate-2") {
        @include assert {
          @include output {
            @include lg\:rotate-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(2deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:rotate-3") {
        @include assert {
          @include output {
            @include lg\:rotate-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(3deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:rotate-6") {
        @include assert {
          @include output {
            @include lg\:rotate-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(6deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:rotate-12") {
        @include assert {
          @include output {
            @include lg\:rotate-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(12deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:rotate-45") {
        @include assert {
          @include output {
            @include lg\:rotate-45;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(45deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:rotate-90") {
        @include assert {
          @include output {
            @include lg\:rotate-90;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(90deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:rotate-180") {
        @include assert {
          @include output {
            @include lg\:rotate-180;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(180deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-rotate-0") {
        @include assert {
          @include output {
            @include lg\:-rotate-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(-0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-rotate-1") {
        @include assert {
          @include output {
            @include lg\:-rotate-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(-1deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-rotate-2") {
        @include assert {
          @include output {
            @include lg\:-rotate-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(-2deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-rotate-3") {
        @include assert {
          @include output {
            @include lg\:-rotate-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(-3deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-rotate-6") {
        @include assert {
          @include output {
            @include lg\:-rotate-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(-6deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-rotate-12") {
        @include assert {
          @include output {
            @include lg\:-rotate-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(-12deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-rotate-45") {
        @include assert {
          @include output {
            @include lg\:-rotate-45;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(-45deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-rotate-90") {
        @include assert {
          @include output {
            @include lg\:-rotate-90;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(-90deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-rotate-180") {
        @include assert {
          @include output {
            @include lg\:-rotate-180;
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(-180deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:rotate-0") {
        @include assert {
          @include output {
            @include xl\:rotate-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:rotate-1") {
        @include assert {
          @include output {
            @include xl\:rotate-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(1deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:rotate-2") {
        @include assert {
          @include output {
            @include xl\:rotate-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(2deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:rotate-3") {
        @include assert {
          @include output {
            @include xl\:rotate-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(3deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:rotate-6") {
        @include assert {
          @include output {
            @include xl\:rotate-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(6deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:rotate-12") {
        @include assert {
          @include output {
            @include xl\:rotate-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(12deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:rotate-45") {
        @include assert {
          @include output {
            @include xl\:rotate-45;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(45deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:rotate-90") {
        @include assert {
          @include output {
            @include xl\:rotate-90;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(90deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:rotate-180") {
        @include assert {
          @include output {
            @include xl\:rotate-180;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(180deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-rotate-0") {
        @include assert {
          @include output {
            @include xl\:-rotate-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(-0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-rotate-1") {
        @include assert {
          @include output {
            @include xl\:-rotate-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(-1deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-rotate-2") {
        @include assert {
          @include output {
            @include xl\:-rotate-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(-2deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-rotate-3") {
        @include assert {
          @include output {
            @include xl\:-rotate-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(-3deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-rotate-6") {
        @include assert {
          @include output {
            @include xl\:-rotate-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(-6deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-rotate-12") {
        @include assert {
          @include output {
            @include xl\:-rotate-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(-12deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-rotate-45") {
        @include assert {
          @include output {
            @include xl\:-rotate-45;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(-45deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-rotate-90") {
        @include assert {
          @include output {
            @include xl\:-rotate-90;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(-90deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-rotate-180") {
        @include assert {
          @include output {
            @include xl\:-rotate-180;
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(-180deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("2xl\:rotate-0") {
        @include assert {
          @include output {
            @include \2xl\:rotate-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("2xl\:rotate-1") {
        @include assert {
          @include output {
            @include \2xl\:rotate-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(1deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("2xl\:rotate-2") {
        @include assert {
          @include output {
            @include \2xl\:rotate-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(2deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("2xl\:rotate-3") {
        @include assert {
          @include output {
            @include \2xl\:rotate-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(3deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("2xl\:rotate-6") {
        @include assert {
          @include output {
            @include \2xl\:rotate-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(6deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("2xl\:rotate-12") {
        @include assert {
          @include output {
            @include \2xl\:rotate-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(12deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("2xl\:rotate-45") {
        @include assert {
          @include output {
            @include \2xl\:rotate-45;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(45deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("2xl\:rotate-90") {
        @include assert {
          @include output {
            @include \2xl\:rotate-90;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(90deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("2xl\:rotate-180") {
        @include assert {
          @include output {
            @include \2xl\:rotate-180;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(180deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("2xl\:-rotate-0") {
        @include assert {
          @include output {
            @include \2xl\:-rotate-0;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(-0deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("2xl\:-rotate-1") {
        @include assert {
          @include output {
            @include \2xl\:-rotate-1;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(-1deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("2xl\:-rotate-2") {
        @include assert {
          @include output {
            @include \2xl\:-rotate-2;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(-2deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("2xl\:-rotate-3") {
        @include assert {
          @include output {
            @include \2xl\:-rotate-3;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(-3deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("2xl\:-rotate-6") {
        @include assert {
          @include output {
            @include \2xl\:-rotate-6;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(-6deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("2xl\:-rotate-12") {
        @include assert {
          @include output {
            @include \2xl\:-rotate-12;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(-12deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("2xl\:-rotate-45") {
        @include assert {
          @include output {
            @include \2xl\:-rotate-45;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(-45deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("2xl\:-rotate-90") {
        @include assert {
          @include output {
            @include \2xl\:-rotate-90;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(-90deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("2xl\:-rotate-180") {
        @include assert {
          @include output {
            @include \2xl\:-rotate-180;
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(-180deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }
    }

    @include describe("Custom") {
      @include it("rotate-(17deg)") {
        @include assert {
          @include output {
            @include rotate-(17deg);
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(17deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("-rotate-(17deg)") {
        @include assert {
          @include output {
            @include -rotate-(17deg);
            @include reset;
          }

          @include expect {
            transform: translate(0, 0) rotate(-17deg) skewX(0deg) skewY(0deg)
              scaleX(1) scaleY(1);
          }
        }
      }

      @include it("sm\:rotate-(17deg)") {
        @include assert {
          @include output {
            @include sm\:rotate-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(17deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("sm\:-rotate-(17deg)") {
        @include assert {
          @include output {
            @include sm\:-rotate-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $sm) {
              transform: translate(0, 0) rotate(-17deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:rotate-(17deg)") {
        @include assert {
          @include output {
            @include md\:rotate-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(17deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("md\:-rotate-(17deg)") {
        @include assert {
          @include output {
            @include md\:-rotate-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $md) {
              transform: translate(0, 0) rotate(-17deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:rotate-(17deg)") {
        @include assert {
          @include output {
            @include lg\:rotate-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(17deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("lg\:-rotate-(17deg)") {
        @include assert {
          @include output {
            @include lg\:-rotate-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $lg) {
              transform: translate(0, 0) rotate(-17deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:rotate-(17deg)") {
        @include assert {
          @include output {
            @include xl\:rotate-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(17deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("xl\:-rotate-(17deg)") {
        @include assert {
          @include output {
            @include xl\:-rotate-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $xl) {
              transform: translate(0, 0) rotate(-17deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("2xl\:rotate-(17deg)") {
        @include assert {
          @include output {
            @include \2xl\:rotate-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(17deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }

      @include it("2xl\:-rotate-(17deg)") {
        @include assert {
          @include output {
            @include \2xl\:-rotate-(17deg);
            @include reset;
          }

          @include expect {
            @media (min-width: $\2xl) {
              transform: translate(0, 0) rotate(-17deg) skewX(0deg) skewY(0deg)
                scaleX(1) scaleY(1);
            }
          }
        }
      }
    }
  }
}
