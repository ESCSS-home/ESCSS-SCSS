// /*x
// Outer API:
// 1. hover_bg-gradient: makes bg-gradient hover possible.
// 2. reset: reset global variables($), if a class uses it.
// 3. atomic classes: a vanilla css class with rwd feature

// Help bg-gradient hover transition
// .demo {
//    @include bg-gradient-to-r;
//    @include from-red-500;
//
//    @include hover_bg-gradient {
//      @include from-sky-500;
//      @include sm\:from-rose-500;
//    }
// }
@mixin hover_bg-gradient {
  & {
    @include relative;
  }

  &::before {
    content: "";
    @include absolute;
    @include inset-0;
    @include opacity-0;
    @include transition-all;
    @content; // take outside stuff to override inside property
  }

  &:hover::before {
    @include opacity-100;
    @include cursor-pointer;
  }
}

// reset global variables
// Best Practice: USE IN EVERY CLASSES.
// why? 1. Can be an indicator of how many css that you've used,
//      2. Only a class uses global variable needs to do reset, but people will be lazy so use it in every classes.

// .demo {
//  @include scale-50; // this one uses global variable so needs to be reset.
//
//  @include reset;  // reset global variables to prevent unexpected behavior that relates to transform property. e.g. using scale、rotate、skew..
// }
@mixin reset {
  // Gradient Color Stops
  $tw-dummy-gradient-direction: null !global;
  $tw-gradient-from: #fff !global;
  $tw-gradient-via: null !global; // detects the use of 2 or 3 gradient stops
  $tw-gradient-to: transparent !global;
  $tw-gradient-from-position: null !global;
  $tw-gradient-via-position: null !global;
  $tw-gradient-to-position: null !global;

  // Space Between
  $tw-dummy-space-x-value: 0 !global;
  $tw-dummy-space-y-value: 0 !global;
  $tw-space-x-reverse: 0 !global;
  $tw-space-y-reverse: 0 !global;

  // Divide Width
  $tw-dummy-divide-x-value: 0 !global;
  $tw-dummy-divide-y-value: 0 !global;
  $tw-divide-x-reverse: 0 !global;
  $tw-divide-y-reverse: 0 !global;

  // Box Shadow
  $tw-ring-offset-width: 0 !global;
  $tw-ring-offset-color: #fff !global;
  $tw-ring-inset: null !global;
  $tw-dummy-ring-width: 0 !global;
  $tw-ring-color: rgb(59 130 246 / 0.5) !global;
  $tw-dummy-shadow-token: null !global;
  $tw-dummy-shadow-width: 0 0 0 0 !global;
  $tw-shadow-color: #fff !global;

  // Scroll Snap Type
  $tw-scroll-snap-strictness: proximity !global;

  // Transforms
  $tw-translate-x: 0 !global;
  $tw-translate-y: 0 !global;
  $tw-rotate: 0deg !global;
  $tw-skew-x: 0deg !global;
  $tw-skew-y: 0deg !global;
  $tw-scale-x: 1 !global;
  $tw-scale-y: 1 !global;

  // Filters
  $tw-blur: null !global;
  $tw-brightness: null !global;
  $tw-contrast: null !global;
  $tw-grayscale: null !global;
  $tw-hue-rotate: null !global;
  $tw-invert: null !global;
  $tw-saturate: null !global;
  $tw-sepia: null !global;
  $tw-drop-shadow: null !global;
  $tw-backdrop-blur: null !global;
  $tw-backdrop-brightness: null !global;
  $tw-backdrop-contrast: null !global;
  $tw-backdrop-grayscale: null !global;
  $tw-backdrop-hue-rotate: null !global;
  $tw-backdrop-invert: null !global;
  $tw-backdrop-opacity: null !global;
  $tw-backdrop-saturate: null !global;
  $tw-backdrop-sepia: null !global;

  // For matching tailwind behavior
  $tw-dummy-not-match--snap: false !global;
  $tw-dummy-not-match--shadow-color: false !global;
  $tw-dummy-not-match--ring-offset-width: false !global;
}

@mixin sm {
  @media (min-width: $sm) {
    @content;
  }
}

@mixin md {
  @media (min-width: $md) {
    @content;
  }
}

@mixin lg {
  @media (min-width: $lg) {
    @content;
  }
}

@mixin xl {
  @media (min-width: $xl) {
    @content;
  }
}

@mixin \2xl {
  @media (min-width: $\2xl) {
    @content;
  }
}

@mixin dark {
  .dark & {
    @content;

    @media (prefers-color-scheme: dark) {
      @content;
    }
  }
}
// x*/
